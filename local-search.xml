<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>LeetCode刷题心得（持续更新中...）</title>
    <link href="/2024/09/26/LeetCode%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/"/>
    <url>/2024/09/26/LeetCode%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/</url>
    
    <content type="html"><![CDATA[<h1 id="leetcode"><a href="#leetcode" class="headerlink" title="leetcode"></a>leetcode</h1><h1 id="1-数组"><a href="#1-数组" class="headerlink" title="1.数组"></a>1.数组</h1><h2 id="1-1-二分查找"><a href="#1-1-二分查找" class="headerlink" title="1.1 二分查找"></a>1.1 二分查找</h2><h3 id="1-1-1-二分查找"><a href="#1-1-1-二分查找" class="headerlink" title="1.1.1 二分查找"></a>1.1.1 二分查找</h3><p>小技巧：位运算比&#x2F;2更快（注意位移运算符优先级比加法运算符低）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">middle = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(((left + (right - left) &gt;&gt;<span class="hljs-number">1</span>)))<br></code></pre></td></tr></table></figure><p>key :有序数组、没有重复元素方可使用二分法，其实思路很简单，但确实很容易一看就会一写就废</p><h3 id="1-1-2-在排序数组中查找元素的第一个和最后一个位置"><a href="#1-1-2-在排序数组中查找元素的第一个和最后一个位置" class="headerlink" title="1.1.2 在排序数组中查找元素的第一个和最后一个位置"></a>1.1.2 在排序数组中查找元素的第一个和最后一个位置</h3><p>注意左边界和右边界初始值不要赋值为-1，因为有可能超出数组之外值为-1</p><h3 id="1-1-3-x的平方根"><a href="#1-1-3-x的平方根" class="headerlink" title="1.1.3 x的平方根"></a>1.1.3 x的平方根</h3><p><img src="/2024/09/26/LeetCode%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/img/image-20240922193504108.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number</span>&#125; <span class="hljs-variable">x</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">number</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">// x的平方根大小在0到x之间</span><br><span class="hljs-comment">// 利用二分法，找到平方等于x的mid；或平方小于x但mid+1的平方大于x</span><br><span class="hljs-keyword">var</span> mySqrt = <span class="hljs-keyword">function</span> (<span class="hljs-params">x</span>) &#123;<br>  <span class="hljs-keyword">let</span> left = <span class="hljs-number">1</span><br>  <span class="hljs-keyword">let</span> right = x<br>  <span class="hljs-keyword">let</span> mid = <span class="hljs-number">0</span><br>  <span class="hljs-keyword">if</span> (x === <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (x === <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>      mid = left + ((right - left) &gt;&gt; <span class="hljs-number">1</span>)<br>      <span class="hljs-keyword">if</span> (mid * mid &lt; x) &#123;<br>        left = mid + <span class="hljs-number">1</span><br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mid * mid &gt; x) &#123;<br>        right = mid - <span class="hljs-number">1</span><br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> mid<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> right<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-2-移除元素"><a href="#1-2-移除元素" class="headerlink" title="1.2 移除元素"></a>1.2 移除元素</h2><h3 id="1-2-1-移除元素"><a href="#1-2-1-移除元素" class="headerlink" title="1.2.1 移除元素"></a>1.2.1 移除元素</h3><p>不能用filter方法，因为要求是要原地修改数组而非返回一个新的数组（filter不会修改原数组，给nums赋值也不行因为就是形参而已，对外部数组是没有影响的）</p><p>关键：数组在内存空间地址是连续的，删除元素实际上只能将其覆盖</p><h4 id="补充：-JavaScript的参数传递方式"><a href="#补充：-JavaScript的参数传递方式" class="headerlink" title="补充： JavaScript的参数传递方式"></a>补充： JavaScript的参数传递方式</h4><p>JavaScript 中的变量传递方式可以理解为一种混合模式：</p><ul><li><p><strong>原始类型</strong>（如 <code>number</code>, <code>string</code>, <code>boolean</code>, <code>null</code>, <code>undefined</code>）是<strong>值传递</strong>。</p></li><li><p><strong>引用类型</strong>（如 <code>Object</code>, <code>Array</code>, <code>Function</code>）是<strong>引用传递</strong>，但这里的引用实际上是<strong>按值传递引用</strong>。也就是说，虽然引用的内容会改变，但你不能通过赋值改变引用本身。</p><p><strong>理解按值传递引用</strong>：<strong>1.引用的内容会改变</strong>：当你通过引用类型（比如对象或数组）传递参数时，你可以修改引用所指向的对象或数组的<strong>内容</strong>，这会影响到原来的对象或数组。<strong>2.不能通过赋值改变引用本身</strong>：但如果你尝试给这个引用本身赋值（即把它指向一个新的对象或数组），这个赋值不会影响原来的引用。</p><p><strong>总结：</strong></p><p><strong>引用的值传递</strong>：你传递的是引用的副本，也就是变量指向对象的内存地址的副本。因此，函数内部对这个引用对象内容的修改会影响外部变量。</p><p><strong>赋值改变引用本身无效</strong>：如果在函数内部重新赋值给这个引用变量（让它指向另一个对象），这个赋值只会在函数内部生效，外部的引用并不会改变。</p><p>这个现象是因为 JavaScript 的函数参数传递方式是 “按值传递引用”（pass-by-value of the reference），即你传递的其实是引用的一个<strong>值副本</strong>。你可以修改引用指向的内容，但不能通过给引用赋值来改变外部的对象或数组。</p></li></ul><h4 id="1-2-2-1-暴力解法"><a href="#1-2-2-1-暴力解法" class="headerlink" title="1.2.2.1 暴力解法"></a>1.2.2.1 暴力解法</h4><p><img src="/2024/09/26/LeetCode%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/img/27.%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0-%E6%9A%B4%E5%8A%9B%E8%A7%A3%E6%B3%95.gif" alt="暴力解法"></p><p>每次遇到要删除的元素都把其后的元素每个都往前移一位</p><h4 id="1-2-2-2-双指针法"><a href="#1-2-2-2-双指针法" class="headerlink" title="1.2.2.2 双指针法"></a>1.2.2.2 双指针法</h4><p><img src="/2024/09/26/LeetCode%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/img/27.%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0-%E5%8F%8C%E6%8C%87%E9%92%88%E6%B3%95.gif" alt="双指针法"></p><p>关键要明确快指针、慢指针指向什么</p><p>快指针：指向新数组的元素（即不为目标值的元素），相当于value</p><p>慢指针：指向新数组的下标，相当于key</p><p>所以只要将快指针指向的值赋值给慢指针指向的元素即可啦（把key-value对应起来）</p><p>注意指针变量的初始化</p><h3 id="1-2-2-删除排序数组中的重复项"><a href="#1-2-2-删除排序数组中的重复项" class="headerlink" title="1.2.2 删除排序数组中的重复项"></a>1.2.2 删除排序数组中的重复项</h3><p>关键：重复元素相邻，快慢指针指向元素不同时，将快指针指向的元素赋值给慢指针的下一位</p><h3 id="1-2-3-移动零"><a href="#1-2-3-移动零" class="headerlink" title="1.2.3 移动零"></a>1.2.3 移动零</h3><p>将快指针指向元素赋值给慢指针指向元素改为两个指针指向元素交换即可</p><h3 id="1-2-4-比较含退格的字符串"><a href="#1-2-4-比较含退格的字符串" class="headerlink" title="1.2.4 比较含退格的字符串"></a>1.2.4 比较含退格的字符串</h3><h4 id="1-2-4-1-栈模拟（逻辑要简单一点）"><a href="#1-2-4-1-栈模拟（逻辑要简单一点）" class="headerlink" title="1.2.4.1 栈模拟（逻辑要简单一点）"></a>1.2.4.1 栈模拟（逻辑要简单一点）</h4><p>用数组的push和pop方法模拟栈，如果不为#压入栈，如果为#则弹出栈顶（注意要栈长度大于0）</p><h4 id="1-2-4-2-双指针法（情况比较多）"><a href="#1-2-4-2-双指针法（情况比较多）" class="headerlink" title="1.2.4.2 双指针法（情况比较多）"></a>1.2.4.2 双指针法（情况比较多）</h4><p>关键：算去掉退格后的字符串：删除#号左边的元素&#x3D;&gt;逆序遍历数组，跳过前一个是#号的元素&#x3D;&gt;用一个变量来村塾遇到#号的个数，下一次遇到非#就–。记住是要比较两个字符串，比较两个指针指向的元素</p><h4 id="补充：为什么-if-i-0-j-0-不能替代-if-i-0-j-0-？"><a href="#补充：为什么-if-i-0-j-0-不能替代-if-i-0-j-0-？" class="headerlink" title="补充：为什么 if(i &lt; 0 || j &lt; 0) 不能替代 if ((i &gt;= 0) !== (j &gt;= 0))？"></a>补充：<strong>为什么 <code>if(i &lt; 0 || j &lt; 0)</code> 不能替代 <code>if ((i &gt;= 0) !== (j &gt;= 0))</code>？</strong></h4><p>当用 <code>if (i &lt; 0 || j &lt; 0)</code> 替代 <code>if ((i &gt;= 0) !== (j &gt;= 0))</code> 时，会包括以下两种情况：</p><ol><li><strong>都无效时（<code>i &lt; 0 &amp;&amp; j &lt; 0</code>）</strong>：<ul><li>在这种情况下，两个字符串其实已经比较完毕，应该继续检查它们剩余的字符，而不应该直接返回 <code>false</code>。但 <code>i &lt; 0 || j &lt; 0</code> 条件会误判这种情况，返回 <code>false</code>。</li></ul></li><li><strong>只有一个无效时（<code>i &lt; 0 || j &lt; 0</code>）</strong>：<ul><li>这在逻辑上与 <code>!==</code> 表达式的一种子集情况相同，但我们之前提到的错误判定覆盖了导致它的不足。</li></ul></li></ol><h3 id="1-2-5-有序数组的平方"><a href="#1-2-5-有序数组的平方" class="headerlink" title="1.2.5 有序数组的平方"></a>1.2.5 有序数组的平方</h3><p>双指针一：找正负数分隔&#x3D;&gt;比如最后一个负数的索引（注意全为负数的情况）。负数平方从右到左非递减顺序，正数平方从左往右非递减顺序&#x3D;&gt;扫描顺序是从小到大，正序放入新数组即可。此方法要考虑的情况比较多，因为从正负数分隔扫描的特殊性，两段长度可能不同，扫描结束的条件也不同，需分别讨论某一扫描结束后的操作。而方法二的好处在于可以用一个条件判断扫描是否结束</p><p>双指针二：比较平方后的数组左边和右边的元素，把大的逆序放入新数组，注意逆序放入是必要的，因为扫描的顺序决定了，负数部分平方和正数部分平方都是从大到小的顺序</p><h2 id="1-3-长度最小的子数组"><a href="#1-3-长度最小的子数组" class="headerlink" title="1.3 长度最小的子数组"></a>1.3 长度最小的子数组</h2><h3 id="1-3-1-长度最小的子数组"><a href="#1-3-1-长度最小的子数组" class="headerlink" title="1.3.1 长度最小的子数组"></a>1.3.1 长度最小的子数组</h3><p>暴力解法（LeetCode超时）：两层for循环，外层移动窗口起始位置，然后再从i开始往后移动终止位置，找到所有子数组，找到满足条件地最小子数组长度</p><p>滑动窗口：与暴力最大的不同就是for循环移动的是窗口终止位置，同时如果发现窗口中元素和大于等于s了，则移动窗口起始位置，继续判断窗口中元素和是否满足条件（所以这里是while循环而非for循环，但是时间复杂度为O(n)，因为每个元素进窗口出窗口，共操作2n次）</p><h3 id="1-3-2-水果成篮"><a href="#1-3-2-水果成篮" class="headerlink" title="1.3.2 水果成篮"></a>1.3.2 水果成篮</h3><p>不要用Set（只有值，不能确定是哪个元素的）而要用Map（键值对，遇到重复key会自动更新value，fruits[j]-j，所以它的value是该水果分类的最新位置）</p><p>整体思路：也是移动终止位置，如果窗口中水果种类超过2（map.size&gt;2），则缩小窗口（移起始位置，移到哪呢，移到最早出现的水果后一个，比较map的values得到里面最小的，并记得从map里删掉最早出现的水果）直至水果种类小于等于2。</p><p>找最大子串：是不满足条件时才更新左指针</p><p>找最小字串：满足条件更新左指针</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">diffTitle</span>(<span class="hljs-params">str, title</span>) &#123;<br>   <span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; <span class="hljs-comment">// template 的指针</span><br>   <span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; <span class="hljs-comment">// title 的指针</span><br><br>   <span class="hljs-keyword">while</span> (i &lt; str.<span class="hljs-property">length</span>) &#123;<br>     <span class="hljs-keyword">if</span> (str[i] === <span class="hljs-string">&#x27;&#123;&#x27;</span>) &#123;<br>       <span class="hljs-comment">// 遇到&#x27;&#123;&#x27;, 跳过内容直到找到&#x27;&#125;&#x27;</span><br>       <span class="hljs-keyword">while</span> (i &lt; str.<span class="hljs-property">length</span> &amp;&amp; str[i] !== <span class="hljs-string">&#x27;&#125;&#x27;</span>) &#123;<br>         i++;<br>       &#125;<br>       <span class="hljs-comment">// 跳过 &#x27;&#125;&#x27;</span><br>       i++;<br>     &#125; <span class="hljs-keyword">else</span> &#123;<br>       <span class="hljs-comment">// &#123;&#125;外的元素</span><br>       <span class="hljs-keyword">if</span> (j &gt;= title.<span class="hljs-property">length</span> || str[i] !== title[j]) &#123;<br>         <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// 如果字符不匹配，返回false</span><br>       &#125;<br>       i++;<br>       j++;<br>     &#125;<br>   &#125;<br><br>   <span class="hljs-comment">// 最后检查是否j已经到达标题的结尾</span><br>   <span class="hljs-keyword">return</span> j === title.<span class="hljs-property">length</span>;<br> &#125;<br><br> <span class="hljs-keyword">let</span> resultArr = [];<br> <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> a = <span class="hljs-number">0</span>; a &lt; n; a++) &#123;<br>   resultArr[a] = <span class="hljs-title function_">diffTitle</span>(template, titles[a]);<br> &#125;<br> <br> <span class="hljs-keyword">return</span> resultArr.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> res ? <span class="hljs-string">&quot;True&quot;</span> : <span class="hljs-string">&quot;False&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="1-3-3-最小覆盖子串"><a href="#1-3-3-最小覆盖子串" class="headerlink" title="1.3.3 最小覆盖子串"></a>1.3.3 最小覆盖子串</h3><p>其实主体思路是一样的：先右指针找找找，直到子串包含目标字串主要字符，其实难点主要是这个判断条件，选择哈希表记录t中字符出现次数（因为题目要求对于 <code>t</code> 中重复字符，寻找的子字符串中该字符数量必须不少于 <code>t</code> 中该字符数量），<strong>如果s中找到该字符，则哈希表对应value减1，变为0说明不再缺少这个字符</strong></p><h4 id="解决滑动窗口：何时收缩窗口？何时扩大窗口？"><a href="#解决滑动窗口：何时收缩窗口？何时扩大窗口？" class="headerlink" title="解决滑动窗口：何时收缩窗口？何时扩大窗口？"></a>解决滑动窗口：何时收缩窗口？何时扩大窗口？</h4><p>在许多滑动窗口问题中，窗口的收缩是为了优化解的质量。例如，在“最小覆盖子串”（LeetCode 76题）中，我们希望找到包含所有目标字符的最小子串。具体步骤如下：</p><ol><li><p>扩展窗口</p><p>移动右指针，逐步包含更多的元素，直到窗口满足问题的要求（例如，窗口内包含所有目标字符）。</p></li><li><p>收缩窗口</p><p>一旦窗口满足要求，尝试通过移动左指针来缩小窗口，去除不必要的元素，同时<strong>确保窗口仍然满足要求</strong>。</p><p>记录当前窗口的长度及其起始位置，更新最优解（如最小长度、最优子串等）。</p></li><li><p>重复</p><p>继续移动右指针，寻找下一个可能的满足要求的窗口，并重复上述过程。</p></li></ol><h4 id="解决这类滑动窗口问题的通用步骤"><a href="#解决这类滑动窗口问题的通用步骤" class="headerlink" title="解决这类滑动窗口问题的通用步骤"></a><strong>解决这类滑动窗口问题的通用步骤</strong></h4><p>无论是“最小覆盖子串”还是其他滑动窗口问题，如“最长无重复子串”、“滑动窗口最大值”等，通常遵循以下通用步骤：</p><ol><li><p><strong>明确窗口的含义</strong>：</p><p>确定窗口内需要维护的数据和状态。例如，窗口是否需要包含特定元素、是否需要满足某种条件等。</p></li><li><p><strong>初始化窗口指针和必要的辅助数据结构</strong>：</p><p>左指针和右指针的初始位置。</p><p>辅助数据结构，如哈希表、计数器等，用于维护窗口内的状态。</p></li><li><p><strong>扩展窗口</strong>（通常是移动右指针）：</p><p>增加窗口的大小，包含更多元素。</p><p>更新辅助数据结构以反映窗口内的变化。</p></li><li><p><strong>检查窗口是否满足要求</strong>：</p><p>判断当前窗口是否满足问题的约束条件。</p><p>找最小窗口：如果满足，则尝试收缩窗口以优化解。</p><p>找最大窗口：如果不满足，则尝试收缩窗口以使窗口重新满足条件</p></li><li><p><strong>收缩窗口</strong>（通常是移动左指针，移动不一定是线性的i++，也可能要直接移动到某个索引）：</p><p>尝试减少窗口的大小，同时保持窗口满足要求。</p><p>更新辅助数据结构和状态。</p></li><li><p><strong>记录和更新最优解</strong>：</p><p>在窗口满足条件时，根据问题需求更新最优解（如最小长度、最大长度等）。</p></li><li><p><strong>重复上述过程</strong>：</p><p>继续移动右指针，重复扩展和收缩窗口的过程，直到遍历完整个数据结构。</p></li><li><p><strong>返回结果</strong>：</p><p>根据问题需求，返回最优解或特定的结果</p></li></ol><h2 id="1-4-螺旋矩阵II"><a href="#1-4-螺旋矩阵II" class="headerlink" title="1.4 螺旋矩阵II"></a>1.4 螺旋矩阵II</h2><h3 id="1-4-1-螺旋矩阵II"><a href="#1-4-1-螺旋矩阵II" class="headerlink" title="1.4.1 螺旋矩阵II"></a>1.4.1 螺旋矩阵II</h3><h4 id="遍历每边法："><a href="#遍历每边法：" class="headerlink" title="遍历每边法："></a>遍历每边法：</h4><p>主要是要抓住不变量原则，遍历每一条边，每一条边都坚持左闭右开原则，但有局限性，如果不是正方形的矩阵怎么知道转多少圈呢？</p><p>声明二维数组的方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 准备一个n*n的二维数组</span><br> <span class="hljs-keyword">let</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(n).<span class="hljs-title function_">fill</span>(<span class="hljs-number">0</span>).<span class="hljs-title function_">map</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(n).<span class="hljs-title function_">fill</span>(<span class="hljs-number">0</span>))<br> <span class="hljs-keyword">let</span> arr1 = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(&#123; <span class="hljs-attr">length</span>: n &#125;, <span class="hljs-function">() =&gt;</span> <span class="hljs-title class_">Array</span>(n).<span class="hljs-title function_">fill</span>(<span class="hljs-number">0</span>))<br></code></pre></td></tr></table></figure><h3 id="1-4-2-螺旋矩阵"><a href="#1-4-2-螺旋矩阵" class="headerlink" title="1.4.2 螺旋矩阵"></a>1.4.2 螺旋矩阵</h3><h4 id="边界指针法："><a href="#边界指针法：" class="headerlink" title="边界指针法："></a>边界指针法：</h4><p>注意边界指针法的区间设置不同，它是遍历完一行（列）就移动某边界指针使未遍历区域减小，在遍历时是左闭右闭区间，可视作通解</p><h2 id="1-5-区间和"><a href="#1-5-区间和" class="headerlink" title="1.5 区间和"></a>1.5 区间和</h2><h3 id="1-5-1-区间和"><a href="#1-5-1-区间和" class="headerlink" title="1.5.1 区间和"></a>1.5.1 区间和</h3><p>其实整体思想很简单，就是算出每个元素的前缀和（注意区间的开闭，是否包含当前元素，选好后就不要变了），然后[a,b]内的区间和&#x3D;preSum[b]-preSum[a-1]（a&gt;0时，a&#x3D;0则等于preSum[b]），这里的前缀和是包含当前元素的。其实感觉在考数学哈哈，算法的尽头是数学…</p><h3 id="1-5-2-开发商分配土地"><a href="#1-5-2-开发商分配土地" class="headerlink" title="1.5.2 开发商分配土地"></a>1.5.2 开发商分配土地</h3><p>区间和的应用，只不过变成了划分一个二维数组使其两部分（横切或者竖切一刀）差值最小，感觉偏暴力吧</p><h1 id="2-链表"><a href="#2-链表" class="headerlink" title="2.链表"></a>2.链表</h1><h2 id="2-1-定义链表"><a href="#2-1-定义链表" class="headerlink" title="2.1 定义链表"></a>2.1 定义链表</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ListNode</span> &#123;<br>  <span class="hljs-comment">// 当前节点值</span><br>  val<br>  <span class="hljs-comment">// 指向下一个节点，初始值为null</span><br>  next = <span class="hljs-literal">null</span><br>  <span class="hljs-comment">// 构造函数，传入当前节点值</span><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">value</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">val</span> = value<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">next</span> = <span class="hljs-literal">null</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-2-移除链表元素"><a href="#2-2-移除链表元素" class="headerlink" title="2.2 移除链表元素"></a>2.2 移除链表元素</h2><p>方法一：直接操作原链表</p><p>将头节点和非头节点分开处理</p><p>方法二：加一个虚拟头节点</p><p>将头节点和非头节点一同处理，注意最后返回的是虚拟头节点的next</p><h2 id="2-3-设计链表"><a href="#2-3-设计链表" class="headerlink" title="2.3 设计链表"></a>2.3 设计链表</h2><p>其实不难吧，静下来心来写就好了，注意一些边界情况和错误检查</p><h2 id="2-4-反转链表"><a href="#2-4-反转链表" class="headerlink" title="2.4 反转链表"></a>2.4 反转链表</h2><p>双指针法，就是让当前节点next指向前一个节点</p><p>递归挺抽象的，感觉自己写不出来</p><h2 id="2-5-两两交换链表中的节点"><a href="#2-5-两两交换链表中的节点" class="headerlink" title="2.5 两两交换链表中的节点"></a>2.5 两两交换链表中的节点</h2><p>主要是画图，搞清楚每次修改的过程，以及是在几个节点间进行的，注意赋值过程中前面的赋值已经改变了链表的相连关系，后面的赋值是对新的链表进行而非最初始的状态</p><h2 id="2-6-删除链表的倒数第N个节点"><a href="#2-6-删除链表的倒数第N个节点" class="headerlink" title="2.6 删除链表的倒数第N个节点"></a>2.6 删除链表的倒数第N个节点</h2><p>先使快慢指针之间差n+1步，最后同步移动直到快指针到达null，慢指针指向倒数第n个节点前一个</p><h2 id="2-7-链表相交"><a href="#2-7-链表相交" class="headerlink" title="2.7 链表相交"></a>2.7 链表相交</h2><p>方法一，对齐两链表后从短链表头节点的位置开始遍历</p><p>方法二，相当于把两个链表合二为一(自己的走完了就换到对方的头节点去)，最多走lenA+lenB步，两个指针总会相遇的</p><h2 id="2-8-环形链表II"><a href="#2-8-环形链表II" class="headerlink" title="2.8 环形链表II"></a>2.8 环形链表II</h2><p>主要是考数学，大概实现思路就是快指针每次移动两个节点，慢指针每次移动一个节点（如果有环一定能相遇），得到两指针相遇的节点，可以用数学证明从头结点到环入口，相遇节点到环入口距离相等，所有从头节点，相遇节点移动两个速度相同的指针则会在环入口相遇</p><h1 id="3-哈希表"><a href="#3-哈希表" class="headerlink" title="3.哈希表"></a>3.哈希表</h1><h2 id="3-1-有效的字母异位词"><a href="#3-1-有效的字母异位词" class="headerlink" title="3.1 有效的字母异位词"></a>3.1 有效的字母异位词</h2><h3 id="3-1-1-有效的字母异位词"><a href="#3-1-1-有效的字母异位词" class="headerlink" title="3.1.1 有效的字母异位词"></a>3.1.1 有效的字母异位词</h3><p>注意js中算与‘a’的ASCII码值的差值不能直接相减，而是要调用chaCodeAt()方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//写法一</span><br>s.<span class="hljs-title function_">charCodeAt</span>(i)-<span class="hljs-string">&#x27;a&#x27;</span>.<span class="hljs-title function_">charCodeAt</span>()<br><span class="hljs-comment">//写法二</span><br>s[i].<span class="hljs-title function_">chaCodeAt</span>()-<span class="hljs-string">&#x27;a&#x27;</span>.<span class="hljs-title function_">charCodeAt</span>()<br></code></pre></td></tr></table></figure><h3 id="3-1-2-字母异位词分组"><a href="#3-1-2-字母异位词分组" class="headerlink" title="3.1.2 字母异位词分组"></a>3.1.2 字母异位词分组</h3><p>思路一：将字符串进行排序得到一个标识，作为key，value为对应的异位词数组（但对字符串排序这种方法会在某些问题中，比如给超长的字符串，会超出时间限制）</p><p>思路二：将字符串中个字母的出现次数作为key，value为对应的异位词数组</p><h3 id="3-1-3-找到字符串中所有字母异位词"><a href="#3-1-3-找到字符串中所有字母异位词" class="headerlink" title="3.1.3 找到字符串中所有字母异位词"></a>3.1.3 找到字符串中所有字母异位词</h3><p>滑动窗口与以上两种找异位词思路的结合使用，在这道题里如使用排序后的字符串作为键，会超时</p><h2 id="3-2-两个数组的交集"><a href="#3-2-两个数组的交集" class="headerlink" title="3.2 两个数组的交集"></a>3.2 两个数组的交集</h2><h3 id="3-2-1-两个数组的交集"><a href="#3-2-1-两个数组的交集" class="headerlink" title="3.2.1 两个数组的交集"></a>3.2.1 两个数组的交集</h3><p>用Set能很快解决</p><h3 id="3-2-2-两个数组的交集II"><a href="#3-2-2-两个数组的交集II" class="headerlink" title="3.2.2 两个数组的交集II"></a>3.2.2 两个数组的交集II</h3><p>用哈希表（这里选用的是对象{}）存储数字-出现次数，因为要求在结果中数字出现为最小次数，在遍历nums2时，每次碰到map中的数字将其出现次数–，当其次数&lt;&#x3D;0就不往结果数组中添加了（解决了nums1中某数字出现次数小于nums2中出现次数，大于等于不做处理）</p><h2 id="3-3-快乐数"><a href="#3-3-快乐数" class="headerlink" title="3.3 快乐数"></a>3.3 快乐数</h2><p>如果当前这个和已经出现过，说明陷入无限循环了则退出，否则一直找到和等于1为止 &#x3D;&gt; 用哈希表判断</p><p>注意求和的方法，每次取个位，十位，百位等等</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 个位-&gt;十位-&gt;百位</span><br>num % <span class="hljs-number">10</span><br><span class="hljs-comment">//去掉个位-&gt;十位-&gt;百位</span><br>num=<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(num/<span class="hljs-number">10</span>)<br></code></pre></td></tr></table></figure><h2 id="3-4-两数之和"><a href="#3-4-两数之和" class="headerlink" title="3.4 两数之和"></a>3.4 两数之和</h2><p>去哈希表中寻找当前数要满足和为target的另一个数，找到了则将目标数和当前数的下标添加进结果中，否则将当前数加入哈希表中</p><h2 id="3-5-四数相加II"><a href="#3-5-四数相加II" class="headerlink" title="3.5 四数相加II"></a>3.5 四数相加II</h2><p>与两数之和思路很像，只不过存储的是a+b的和-出现次数，要找的是大小为0-(c+d)的键，将其value值累积起来得到最终结果</p><h2 id="3-6-赎金信"><a href="#3-6-赎金信" class="headerlink" title="3.6 赎金信"></a>3.6 赎金信</h2><p>什么时候用数组？（定长的情况）什么时候用Set？（只用关注一个值）什么时候用Map？（要同时存储两个值，比如元素-下标，字母-出现次数）</p><h2 id="3-7-三数之和"><a href="#3-7-三数之和" class="headerlink" title="3.7 三数之和"></a>3.7 三数之和</h2><p>每次固定一个元素nums[i]，根据和&gt;0或&lt;0调整left指针和right指针，关键是对结果进行去重的处理，在指针遍历时就跳过重复的元素，每次找到一个有效的三元组后将left，right移动到下一个不重复的元素的上一个（相似思路可看<strong>1.2.2移除重复元素</strong>），继续寻找可能的三元组，同时nums[i]也要避免重复，因为这个数值的有效三元组一定包含在上一个里了</p><p>还要注意数组的排序sort()如果不传入比较函数则默认按字典顺序进行排序，而这里是按数值进行排序，得写成：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 升序</span><br>nums.<span class="hljs-title function_">sort</span>(<span class="hljs-function">(<span class="hljs-params">a,b</span>)=&gt;</span>a-b)<br><span class="hljs-comment">// 降序</span><br>nums.<span class="hljs-title function_">sort</span>(<span class="hljs-function">(<span class="hljs-params">a-b</span>)=&gt;</span>b-a)<br></code></pre></td></tr></table></figure><h2 id="3-8-四数之和"><a href="#3-8-四数之和" class="headerlink" title="3.8 四数之和"></a>3.8 四数之和</h2><p>与三数之和类似，只是套了两层循环，注意固定的第二个元素判断重复是从i+2开始而非1</p><h1 id="4-字符串"><a href="#4-字符串" class="headerlink" title="4.字符串"></a>4.字符串</h1><h2 id="4-1-反转字符串"><a href="#4-1-反转字符串" class="headerlink" title="4.1 反转字符串"></a>4.1 反转字符串</h2><p>注意这里的字符串是以字符数组的形式给出，可以直接一头一尾双指针交换元素解决</p><h2 id="4-2-反转字符串II"><a href="#4-2-反转字符串II" class="headerlink" title="4.2 反转字符串II"></a>4.2 反转字符串II</h2><p>多了个判断剩余元素个数，双指针位置不再是简单的一头一尾但思路没变，可以单独封装一个函数，注意要传字符数组而不是直接是字符串，最后再把字符数组拼接成字符串就好了</p><p>js中字符串不可修改</p><h2 id="4-3-替换数字"><a href="#4-3-替换数字" class="headerlink" title="4.3 替换数字"></a>4.3 替换数字</h2><p>为什么不直接用字符串的拼接呢？没必要想得太复杂</p><h2 id="4-4-反转字符串里的单词"><a href="#4-4-反转字符串里的单词" class="headerlink" title="4.4 反转字符串里的单词"></a>4.4 反转字符串里的单词</h2><p>思路一：跳过开头空格；提取出每个单词放入单词数组；反转单词数组；为单词间添加空格</p><p>思路二：先去掉多余空格（可参考移除元素的思路），整个字符串反转，再每个单词反转（只要一遇到空格就反转前面的单词）</p><h2 id="4-5-右旋字符串"><a href="#4-5-右旋字符串" class="headerlink" title="4.5 右旋字符串"></a>4.5 右旋字符串</h2><p>和上一题思路二有点像，先整体反转，再局部反转（顺序交换也可，注意反转时的长度到底是多少就好）</p><h2 id="4-6-找出字符串中第一个匹配项的下标（KMP算法）"><a href="#4-6-找出字符串中第一个匹配项的下标（KMP算法）" class="headerlink" title="4.6 找出字符串中第一个匹配项的下标（KMP算法）"></a>4.6 找出字符串中第一个匹配项的下标（KMP算法）</h2><p>构建模式串的LPS数组，可以避免遇到主串和模式串出现不匹配时，重新从头开始遍历&#x3D;&gt;跳到上一项的LPS的值指向的下标</p><h2 id="4-7-重复的子字符串"><a href="#4-7-重复的子字符串" class="headerlink" title="4.7 重复的子字符串"></a>4.7 重复的子字符串</h2><p>思路一：用了库函数，但思路是很简单直接的，并且也没有超时，就是从开头去找符合条件的子串（长度能整除s的长度，重复(使用repeat())s&#x2F;subStr.length次后能组成s）</p><p>思路二：KMP算法，不包含在<strong>最长相等前缀后缀</strong>的子串就是s的最小<strong>重复</strong>子串</p><h1 id="5-栈与队列"><a href="#5-栈与队列" class="headerlink" title="5.栈与队列"></a>5.栈与队列</h1><h2 id="5-1-用栈实现队列"><a href="#5-1-用栈实现队列" class="headerlink" title="5.1 用栈实现队列"></a>5.1 用栈实现队列</h2><p>用一个输入栈，一个输出栈来模拟队列，记得复用相似功能的函数，注意一定是用栈的特性来模拟，用数组的push和pop模拟栈</p><h2 id="5-2-用队列实现栈"><a href="#5-2-用队列实现栈" class="headerlink" title="5.2 用队列实现栈"></a>5.2 用队列实现栈</h2><p>这里的队列是单向的，先进先出，所以弹出栈顶元素（队尾）时得把最后一个元素以外的元素备份到另一个队列中，用数组的unshift和pop模拟队列</p><p>优化：一个队列实现，把除队尾的元素移到它的后面去</p><h2 id="5-3-有效的括号"><a href="#5-3-有效的括号" class="headerlink" title="5.3 有效的括号"></a>5.3 有效的括号</h2><p>栈&#x3D;&gt;对称匹配问题</p><p>关键是搞清楚不匹配的情况有几种：1.左符号多余，字符串匹配完后，栈不为空；2.右符号与左符号不匹配；3.右符号多余，栈为空时字符串还没遍历完。这里处理第二点的巧思，左符号不入栈，而将与其匹配的右符号入栈，这样只用匹配字符串的右符号是否与栈顶相等，大大简化逻辑</p><h2 id="5-4-删除字符串中的相邻重复项"><a href="#5-4-删除字符串中的相邻重复项" class="headerlink" title="5.4 删除字符串中的相邻重复项"></a>5.4 删除字符串中的相邻重复项</h2><p>和上一题思路挺像的，栈做这种匹配类问题确实好用</p><h2 id="5-5-逆波兰表达式求值"><a href="#5-5-逆波兰表达式求值" class="headerlink" title="5.5 逆波兰表达式求值"></a>5.5 逆波兰表达式求值</h2><p>和前两题思路相似，碰到数字压入栈，碰到运算符弹出栈顶两个数字进行运算，将运算结果压入栈。</p><p>注意运算的顺序，还有除法是取整数部分（Math.trunc()），而非向上（Math.ceil()）或向下取整（Math.floor()）或去最接近整数（Math.round()）</p><h2 id="5-6-滑动窗口最大值"><a href="#5-6-滑动窗口最大值" class="headerlink" title="5.6 滑动窗口最大值"></a>5.6 滑动窗口最大值</h2><p>用一个双端队列维护窗口中可能最大值的索引，每次去除队列中在窗口之外的元素索引，去除队列中所有比当前元素小的元素索引，相同的也去掉，减少运算次数，数值反正是一样的，然后再将当前元素索引添加到队列，当最初始的窗口大小达到k，计算窗口中最大值</p><h2 id="5-7-前K个高频元素"><a href="#5-7-前K个高频元素" class="headerlink" title="5.7 前K个高频元素"></a>5.7 前K个高频元素</h2><p>用哈希表统计每个数字出现频率，再用最小堆对数字出现频率进行排序（JS中可用数组模拟），如果最小堆大小大于k了，则弹出堆顶元素，这样可以使前K个高频元素留在最小堆中</p><h1 id="6-二叉树"><a href="#6-二叉树" class="headerlink" title="6.二叉树"></a>6.二叉树</h1><h2 id="6-1-二叉树理论基础"><a href="#6-1-二叉树理论基础" class="headerlink" title="6.1 二叉树理论基础"></a>6.1 二叉树理论基础</h2><h3 id="6-1-1-二叉树的遍历"><a href="#6-1-1-二叉树的遍历" class="headerlink" title="6.1.1 二叉树的遍历"></a>6.1.1 二叉树的遍历</h3><p><strong>深度优先遍历</strong>&#x3D;&gt;使用栈，区分这三种遍历方式，主要看中间节点的遍历顺序就好</p><p>前序遍历：中左右（迭代法，递归法）</p><p>中序遍历：左中右（迭代法，递归法）</p><p>后序遍历：左右中（迭代法，递归法）</p><p><strong>广度优先遍历</strong>&#x3D;&gt;使用队列</p><p>层次遍历（迭代法）</p><h3 id="6-1-2-二叉树的定义"><a href="#6-1-2-二叉树的定义" class="headerlink" title="6.1.2 二叉树的定义"></a>6.1.2 二叉树的定义</h3><p>要能用白纸写出来</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeNode</span> &#123;<br>  <span class="hljs-comment">// 数值</span><br>  val<br>  <span class="hljs-comment">// 指向左孩子</span><br>  left<br>  <span class="hljs-comment">// 指向右孩子</span><br>  right<br>  <span class="hljs-comment">// 构造函数</span><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">val = <span class="hljs-number">0</span>, left = <span class="hljs-literal">null</span>, right = <span class="hljs-literal">null</span></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">val</span> = val<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">left</span> = left<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">right</span> = right<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-2-二叉树的深度优先遍历"><a href="#6-2-二叉树的深度优先遍历" class="headerlink" title="6.2 二叉树的深度优先遍历"></a>6.2 二叉树的深度优先遍历</h2><p>前序遍历：递归，迭代（栈），标记法（压入栈后跟一个null）</p><p>中序遍历：递归，迭代（栈和指针），标记法（压入栈后跟一个null）</p><p>后序遍历：递归，迭代（栈），标记法（压入栈后跟一个null）</p><h2 id="6-3-二叉树的广度优先遍历"><a href="#6-3-二叉树的广度优先遍历" class="headerlink" title="6.3 二叉树的广度优先遍历"></a>6.3 二叉树的广度优先遍历</h2><h3 id="6-3-1-二叉树的层序遍历"><a href="#6-3-1-二叉树的层序遍历" class="headerlink" title="6.3.1 二叉树的层序遍历"></a>6.3.1 二叉树的层序遍历</h3><p>递归或者迭代</p><h3 id="6-3-2-二叉树的右视图"><a href="#6-3-2-二叉树的右视图" class="headerlink" title="6.3.2 二叉树的右视图"></a>6.3.2 二叉树的右视图</h3><p>其实就是中右左的顺序遍历（每层的最右节点不一定是右节点，也有可能是左节点，所以左子树也要遍历），然后要判断一下当前层有没有被访问过，没访问过才将当前节点值添加到结果集</p><h3 id="6-3-3-N叉树的层序遍历"><a href="#6-3-3-N叉树的层序遍历" class="headerlink" title="6.3.3 N叉树的层序遍历"></a>6.3.3 N叉树的层序遍历</h3><p>在递归调用时用循环传入当前节点的每个子节点就好</p><h2 id="6-4-翻转二叉树"><a href="#6-4-翻转二叉树" class="headerlink" title="6.4 翻转二叉树"></a>6.4 翻转二叉树</h2><p>交换每个节点的左右孩子即可，注意遍历的方式最好选取前序、后序、层序遍历，中序遍历会导致有的左右孩子被翻转2次（但用栈遍历null标记法却不会有这个问题）</p><h2 id="6-5-对称二叉树"><a href="#6-5-对称二叉树" class="headerlink" title="6.5 对称二叉树"></a>6.5 对称二叉树</h2><p>先比较左右节点是否相等，然后比较外侧节点（左节点的left，右节点的right）、内侧节点（左节点的right，右节点的left）是否相等</p><h2 id="6-6-二叉树的最大深度"><a href="#6-6-二叉树的最大深度" class="headerlink" title="6.6 二叉树的最大深度"></a>6.6 二叉树的最大深度</h2><p>根节点的高度就是二叉树的最大深度</p><p>递归法：后序遍历、前序遍历</p><p>迭代法：层序遍历</p><p>N叉树的最大深度把左节点、右节点的处理改成遍历孩子节点就好了</p><h2 id="6-7-二叉树的最小深度"><a href="#6-7-二叉树的最小深度" class="headerlink" title="6.7 二叉树的最小深度"></a>6.7 二叉树的最小深度</h2><p>和最大深度的不同主要在于对左右孩子是否为空的处理，这道题要求的是叶子节点，所以最小深度不能是到空孩子的深度</p><h2 id="6-8-完全二叉树的节点个数"><a href="#6-8-完全二叉树的节点个数" class="headerlink" title="6.8 完全二叉树的节点个数"></a>6.8 完全二叉树的节点个数</h2><p>完全二叉树：1.满二叉树 2.最后一层未满，集中在左侧（一直遍历直到找到满二叉树）</p><p>满二叉树：向左遍历和向右遍历深度相同&#x3D;&gt;2^Depth-1个节点，如果不相同则继续递归左子树、右子树直到找到满二叉树，返回左右子树节点个数+1（中间节点）</p><p>普通二叉树，直接遍历树，递归和迭代</p><h2 id="6-9-平衡二叉树"><a href="#6-9-平衡二叉树" class="headerlink" title="6.9 平衡二叉树"></a>6.9 平衡二叉树</h2><p>明显体现除求深度（从上到下，前序遍历）和高度（从下到上，后序遍历）的不同，注意之前求二叉树的最大深度用后序遍历是因为最大深度就是求根节点的高度</p><p>递归三部曲：1.明确递归函数参数和返回值；2.明确终止条件；3.明确单层递归逻辑，比较左子树、右子树高度的差值绝对值是否小于1</p><h2 id="6-10-二叉树的所有路径"><a href="#6-10-二叉树的所有路径" class="headerlink" title="6.10 二叉树的所有路径"></a>6.10 二叉树的所有路径</h2><p>这道题里的回溯并不是path.pop()这种显式的回溯，在每次递归中，<code>path</code> 都会增加当前节点的值，形成 <code>path + &quot;-&gt;&quot; + node.val</code> 的新路径。在函数调用返回后，这一层的 <code>path</code> 会自动回溯到调用前的状态，不会影响其他路径。因为 <code>path</code> 是字符串的 <strong>不可变数据类型</strong>，所以不会在不同递归层之间共享修改的状态。</p><h2 id="6-11-左叶子之和"><a href="#6-11-左叶子之和" class="headerlink" title="6.11 左叶子之和"></a>6.11 左叶子之和</h2><p>左叶子的定义：节点A的左孩子不为空，且左孩子的左右孩子都为空（说明是叶子节点），那么A节点的左孩子为左叶子节点，要通过节点的父节点来判断它的左孩子是不是为左叶子</p><p>注意基本数据类型是按值传递给函数，所以函数中修改不影响外部变量（解决：不把外部变量用形参传给函数，而是直接修改外部变量），但如果是引用类型则会被函数中修改所影响</p><h2 id="6-12-找树左下角的值"><a href="#6-12-找树左下角的值" class="headerlink" title="6.12 找树左下角的值"></a>6.12 找树左下角的值</h2><p>其实就是找深度最大的叶子节点</p><h2 id="6-13-路径总和"><a href="#6-13-路径总和" class="headerlink" title="6.13 路径总和"></a>6.13 路径总和</h2><p>递归函数什么时候需要返回值？什么时候不需要返回值？这里总结如下三点：</p><p>如果需要搜索整棵二叉树且不用处理递归返回值，递归函数就不要返回值。（这种情况就是下面介绍的113.路径总和II）</p><p>如果需要搜索整棵二叉树且需要处理递归返回值，递归函数就需要返回值。(如二叉树的最近公共祖先)</p><p>如果要搜索其中一条符合条件的路径，那么递归一定需要返回值，因为遇到符合条件的路径了就要及时返回。（本题的情况）</p><p>注意比较是否达到某个和时，往往可以用目标值递减到0判断达到了，比直接判等要简单一些，这题的终止条件就是目标和减为0且刚好到达了叶子节点</p><p>注意这个地方：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 后续递归中path会被修改，不要传入它的引用，而是用扩展运算符保存它的副本</span><br>      result.<span class="hljs-title function_">push</span>([...path])<br><span class="hljs-comment">// 不要写成result.push(path)</span><br></code></pre></td></tr></table></figure><h2 id="6-14-从中序与后序遍历序列构造二叉树"><a href="#6-14-从中序与后序遍历序列构造二叉树" class="headerlink" title="6.14 从中序与后序遍历序列构造二叉树"></a>6.14 从中序与后序遍历序列构造二叉树</h2><p>后序遍历序列的最后一个元素为根节点，再根据这个元素去将中序序列切割为左数组、右数组，再由于中序、后序序列切割的左数组、右数组长度相等，切割后序序列为左数组、右数组，然后递归调用构造根节点的左子树、右子树，注意一个细节，判断空数组应是数组长度&#x3D;&#x3D;&#x3D;0而非数组&#x3D;&#x3D;&#x3D;null</p><p>前序和后序遍历序列无法确定一棵二叉树，无法确定左右部分</p><h2 id="6-15-最大二叉树"><a href="#6-15-最大二叉树" class="headerlink" title="6.15 最大二叉树"></a>6.15 最大二叉树</h2><p>和上面的思路相似，只是注意直接定义下标值在原数值上操作而非定义新的数组，不然leetcode上超时</p><h2 id="6-16-合并二叉树"><a href="#6-16-合并二叉树" class="headerlink" title="6.16 合并二叉树"></a>6.16 合并二叉树</h2><p>和遍历一个树逻辑是一样的，只是同时传入两个树的节点进行操作</p><h2 id="6-17-二叉搜索树中的搜索"><a href="#6-17-二叉搜索树中的搜索" class="headerlink" title="6.17 二叉搜索树中的搜索"></a>6.17 二叉搜索树中的搜索</h2><p>主要利用二叉搜索树节点有序性的特点，当前节点值大于目标值则搜索其左子树，小于目标值则搜索其右子树，相等则返回该节点</p><h2 id="6-18-验证二叉搜索树"><a href="#6-18-验证二叉搜索树" class="headerlink" title="6.18 验证二叉搜索树"></a>6.18 验证二叉搜索树</h2><p>利用中序遍历来遍历二叉搜索树一定是单调递增（不能有重复元素）的序列的特性解决</p><h2 id="6-19-二叉搜索树的最小绝对差"><a href="#6-19-二叉搜索树的最小绝对差" class="headerlink" title="6.19 二叉搜索树的最小绝对差"></a>6.19 二叉搜索树的最小绝对差</h2><p>利用中序遍历二叉搜索树有序的特点，有一个变量来记录前一个节点就好，最小绝对值一定出现在相邻节点间，一定要利用二叉搜索树有序的特点</p><h2 id="6-20-二叉搜索树的众数"><a href="#6-20-二叉搜索树的众数" class="headerlink" title="6.20 二叉搜索树的众数"></a>6.20 二叉搜索树的众数</h2><p>普通二叉树，利用哈希表记录所有节点值的出现频率，再对频率进行排序，取出频率最高的所有数值</p><p>二叉搜索树，利用中序遍历的特点，还是记录上一个节点，这里有一个技巧，只用遍历一遍树得出众数，就是当遇到比当前最大频率大的数，就更新当前最大频率，并将收集到的结果作废清空，再将等于当前最大频率的数值加入结果集</p><h2 id="6-21-二叉树的最近公共祖先"><a href="#6-21-二叉树的最近公共祖先" class="headerlink" title="6.21 二叉树的最近公共祖先"></a>6.21 二叉树的最近公共祖先</h2><p>如果找到一个节点，发现左子树出现结点p，右子树出现节点q，或者左子树出现结点q，右子树出现节点p，那么该节点就是节点p和q的最近公共祖先</p><h2 id="6-22-二叉搜索树的最近公共祖先"><a href="#6-22-二叉搜索树的最近公共祖先" class="headerlink" title="6.22 二叉搜索树的最近公共祖先"></a>6.22 二叉搜索树的最近公共祖先</h2><p>和二叉搜索树的搜索一样，充分利用了二叉搜索树的有序的特点，只要理解一点：最近公共祖先就是自顶向下节点值第一个位于[p,q]区间（注意p,q节点值大小并不确定）的节点，否则后面就会分叉了。具体步骤：如果当前节点值在p,q节点值区间左侧，转到其右子树；如果在区间右侧，转到其左子树，等第一次在区间中时，返回当前节点</p><h2 id="6-23-二叉搜索树中的插入操作"><a href="#6-23-二叉搜索树中的插入操作" class="headerlink" title="6.23 二叉搜索树中的插入操作"></a>6.23 二叉搜索树中的插入操作</h2><p>其实就是找到二叉搜索树的末尾，把新节点按二叉搜索树的规则加入，注意有返回值是一种优化，可以在可插入的时候得到函数返回新的节点并插入</p><h2 id="6-24-删除二叉搜索树中的节点"><a href="#6-24-删除二叉搜索树中的节点" class="headerlink" title="6.24 删除二叉搜索树中的节点"></a>6.24 删除二叉搜索树中的节点</h2><p>有以下五种情况：</p><ul><li>第一种情况：没找到删除的节点，遍历到空节点直接返回了</li><li>找到删除的节点<ul><li>第二种情况：左右孩子都为空（叶子节点），直接删除节点， 返回NULL为根节点</li><li>第三种情况：删除节点的左孩子为空，右孩子不为空，删除节点，右孩子补位，返回右孩子为根节点</li><li>第四种情况：删除节点的右孩子为空，左孩子不为空，删除节点，左孩子补位，返回左孩子为根节点</li><li>第五种情况：左右孩子节点都不为空，则将删除节点的左子树头结点（左孩子）放到删除节点的右子树的最左面节点的左孩子上，返回删除节点右孩子为新的根节点。</li></ul></li></ul><h2 id="6-25-修剪二叉搜索树"><a href="#6-25-修剪二叉搜索树" class="headerlink" title="6.25 修剪二叉搜索树"></a>6.25 修剪二叉搜索树</h2><p>如果当前节点值大于high，递归其左子树找到符合条件的节点并返回作为新的根节点；如果当前节点值小于low，递归其右子树找到符合条件的节点并返回作为新的根节点；然后将符合条件的左节点、右节点接入root.left和root.right</p><h2 id="6-26-将有序数组转换为二叉搜索树"><a href="#6-26-将有序数组转换为二叉搜索树" class="headerlink" title="6.26 将有序数组转换为二叉搜索树"></a>6.26 将有序数组转换为二叉搜索树</h2><p>每次取数组的最中间的数值构建根节点，以该数值为界，将数组分割成左数组和右数组，然后递归构建该节点的左子树和右子树</p><h2 id="6-27-把二叉搜索树转换为累加树"><a href="#6-27-把二叉搜索树转换为累加树" class="headerlink" title="6.27 把二叉搜索树转换为累加树"></a>6.27 把二叉搜索树转换为累加树</h2><p>其实就是右中左（反中序遍历）的顺序遍历二叉搜索树（数值就是从大到小了），然后当前节点值累加上一个节点的值就好</p><h1 id="7-回溯算法"><a href="#7-回溯算法" class="headerlink" title="7.回溯算法"></a>7.回溯算法</h1><h2 id="7-1-回溯算法模板"><a href="#7-1-回溯算法模板" class="headerlink" title="7.1 回溯算法模板"></a>7.1 回溯算法模板</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">backtracking</span>(<span class="hljs-params">参数</span>) &#123;<br>    <span class="hljs-keyword">if</span> (终止条件) &#123;<br>        存放结果;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (选择：本层集合中元素（树中节点孩子的数量就是集合的大小）) &#123;<br>        处理节点;<br>        <span class="hljs-title function_">backtracking</span>(路径，选择列表); <span class="hljs-comment">// 递归</span><br>        回溯，撤销处理结果<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-2-组合"><a href="#7-2-组合" class="headerlink" title="7.2 组合"></a>7.2 组合</h2><p>能很好利用上面的模板，不过还是得注意加入结果集的应当是当前组合的浅拷贝，而不是传它的引用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">result.<span class="hljs-title function_">push</span>([...combine])<br></code></pre></td></tr></table></figure><p>剪枝优化后的版本，每次只用搜索到使当前组合长度等于k时的数组，后面的就不用再搜索了</p><h2 id="7-3-组合总和III"><a href="#7-3-组合总和III" class="headerlink" title="7.3 组合总和III"></a>7.3 组合总和III</h2><p>在上题的求组合上再加上判断组合总和是否达到目标值的判断</p><h2 id="7-4-电话号码的字母组合"><a href="#7-4-电话号码的字母组合" class="headerlink" title="7.4 电话号码的字母组合"></a>7.4 电话号码的字母组合</h2><p>和上面的组合有一点不一样，是求不同集合间的组合，所以for循环遍历的是每一个字母集合，是从0开始的，而和前面相似的startIndex是用来遍历数字的</p><h2 id="7-5-组合总和"><a href="#7-5-组合总和" class="headerlink" title="7.5 组合总和"></a>7.5 组合总和</h2><p>终止条件就两个：和等于目标值或和大于目标值，这里没要求个数，元素也可以重复选取，所以终止条件按和来确定，个数不确定，递归时传入的还是当前的索引，而不是下一个，因为可以重复选取元素</p><h2 id="7-6-组合总和II"><a href="#7-6-组合总和II" class="headerlink" title="7.6 组合总和II"></a>7.6 组合总和II</h2><p>这题中给出的数组有重复元素且不能重复选取，上一题组合总和中给出的数组无重复元素且可以重复选取。对给定的数组进行排序后再去重，可以使用标记数组表示某元素是否在当前组合中，则有：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 当前元素与上一个相同，且上一个元素没被选择，说明上一个元素的组合会和当前重合，跳过</span><br><span class="hljs-comment">// 如果上一个被选择了，说明这是上一个元素的组合（包含重复元素的）</span><br><span class="hljs-keyword">if</span> (candidates[i] === candidates[i - <span class="hljs-number">1</span>] &amp;&amp; selected[i - <span class="hljs-number">1</span>] === <span class="hljs-literal">false</span>) &#123;<br>  <span class="hljs-keyword">continue</span><br>&#125;<br></code></pre></td></tr></table></figure><p>不用标记数组，只用startIndex也可以判断：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 除了开头的元素可以选与自己相同的元素，后面遍历到相同的元素就跳过</span><br><span class="hljs-keyword">if</span> (i &gt; startIndex &amp;&amp; candidates[i] === candidates[i - <span class="hljs-number">1</span>]) &#123;<br>  <span class="hljs-keyword">continue</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-7-分割回文串"><a href="#7-7-分割回文串" class="headerlink" title="7.7 分割回文串"></a>7.7 分割回文串</h2><p>判断当前子串是否是回文串，如果是，加入当前路径，并从下一个索引 end+1递归；不是回文子串则跳过，扩大子串范围，尝试新的子串看能不能找到回文串，当索引达到字符串的长度，将当前路径加入结果集。判断回文串可以用双指针或动态规划</p><h2 id="7-8-复原IP地址"><a href="#7-8-复原IP地址" class="headerlink" title="7.8 复原IP地址"></a>7.8 复原IP地址</h2><p>上一题的加强版，JS中加 ‘.’ 号的操作可以放到最后用数组的join(‘.’)来分隔，另外注意类型的转换</p><h2 id="7-9-子集"><a href="#7-9-子集" class="headerlink" title="7.9 子集"></a>7.9 子集</h2><p>与前面的各种组合问题不同的是，子集找的是树的所有节点，而之前的组合问题只收集树的叶子节点，并且注意什么时候i从startIndex开始（找组合，无序），什么时候从0开始（求排列，有序）</p><p>注意这里收集全部节点和前面收集叶子节点的时机不同，收集全部节点在终止条件之前，收集叶子节点在达到终止条件后再收集</p><h2 id="7-10-子集II"><a href="#7-10-子集II" class="headerlink" title="7.10 子集II"></a>7.10 子集II</h2><p>和之前的组合总和II相似的去重逻辑，同一树枝上可以重复选取，同一树层上不可重复选取，注意去重的操作建立在<strong>排序</strong>后的数组之上</p><h2 id="7-11-非递减子序列"><a href="#7-11-非递减子序列" class="headerlink" title="7.11 非递减子序列"></a>7.11 非递减子序列</h2><p>看似和上一题很像，但一个大坑就是，不能对原数组进行排序去重，不然子序列全是非递减的了，这里的去重就只有用哈希表来记录当前层某个元素是否被使用，注意是在循环外声明Set才能检查这一层的元素，而且在回溯时不撤销set的添加，因为要一直保持这一层使用过的元素的状态，而到下一层会创建新的Set了</p><h2 id="7-12-全排列"><a href="#7-12-全排列" class="headerlink" title="7.12 全排列"></a>7.12 全排列</h2><p>排列和组合最大的不同，排列里不再使用startIndex，因为每次都要从头开始搜索，而用一个used数组来表示当前path里哪些元素被使用了，因为每个元素只能使用一次，和前面有去重操作的组合有点像，但两者使用used数组的目的不同，所以判断的操作也有所不同：（数组里有重复元素）去重：上一个是否被使用；（数组里没有重复元素）防止重复使用同一个元素：当前是否被使用了</p><h1 id="8-贪心算法"><a href="#8-贪心算法" class="headerlink" title="8.贪心算法"></a>8.贪心算法</h1><h2 id="8-1-分发饼干"><a href="#8-1-分发饼干" class="headerlink" title="8.1 分发饼干"></a>8.1 分发饼干</h2><p>两种思路：大饼干喂饱大胃口，优先喂饱大胃口的；或者小饼干喂饱小胃口，优先喂饱小胃口的。两种不同的思路决定了是拿一个个的饼干和胃口去比还是反过来（也就是决定了遍历顺序）</p><h2 id="8-2-摆动序列"><a href="#8-2-摆动序列" class="headerlink" title="8.2 摆动序列"></a>8.2 摆动序列</h2><p>3种情况都想清楚，上下坡有平坡、单调坡有平坡，要记录之前的拐点值；首尾节点对子序列计算有影响，记录的如果是拐点数的话，是从1开始的，因为一个和两个不等元素也算作摆动序列</p><h2 id="8-3-最大子数组和"><a href="#8-3-最大子数组和" class="headerlink" title="8.3 最大子数组和"></a>8.3 最大子数组和</h2><p>当前连续子数组的和为负数时，则丢弃，继续从当前位置（因为前面的和一定没有当前收集的大）找新的子数组，不用担心丢失结果，因为每次只在遇到大于当前结果的子数组和才更新结果，注意更新结果要在丢弃当前子数组之前，否则当数组为[-1]时会返回-1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-property">length</span>; i++) &#123;<br>    currentSum += nums[i]<br>    <span class="hljs-comment">// 当前和大于结果，更新结果</span><br>    <span class="hljs-keyword">if</span> (currentSum &gt; result) &#123;<br>      result = currentSum<br>    &#125;<br>    <span class="hljs-comment">// 如果当前和已经小于0，则丢弃，继续找新的子数组</span><br>    <span class="hljs-keyword">if</span> (currentSum &lt; <span class="hljs-number">0</span>) &#123;<br>      currentSum = <span class="hljs-number">0</span><br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><p>注意到底是当前数为负数还是和为负数时丢弃当前数组？当前数为负数时，和不一定为负数，继续向前和还有可能增加，也不会当前和可能为最大的情况，因为有result记录最大的连续和</p><h2 id="8-4-买卖股票的最佳时机II"><a href="#8-4-买卖股票的最佳时机II" class="headerlink" title="8.4 买卖股票的最佳时机II"></a>8.4 买卖股票的最佳时机II</h2><p>只要想清楚<strong>如何拆分总利润</strong>就好了，就是每一天的价格减去前一天的价格加起来，那么只在局部利润为正时才收集，得到的就是最大的总利润了，注意这里要从第二天开始才有利润</p><h2 id="8-5-跳跃游戏"><a href="#8-5-跳跃游戏" class="headerlink" title="8.5 跳跃游戏"></a>8.5 跳跃游戏</h2><p>不要想到底跳几步，关键是<strong>最大覆盖范围（index+nums[index]）</strong>能到哪，注意遍历的时候终止条件是<code>i&lt;=cover</code>而不是<code>i&lt;nums.length</code>，因为遍历的应该是当前能覆盖到的数组范围</p><h1 id="9-动态规划"><a href="#9-动态规划" class="headerlink" title="9.动态规划"></a>9.动态规划</h1><p>牢记dp[i]到底表示的是什么，并且注意dp数组的初始化！</p><h2 id="9-1-斐波那契数"><a href="#9-1-斐波那契数" class="headerlink" title="9.1 斐波那契数"></a>9.1 斐波那契数</h2><p>1.确定动态规划数组，第N个斐波那契数就是dp[n]；2.求递推公式：dp[n]&#x3D;dp[n-1]+dp[n-2]；3.dp数组初始化；4.确定遍历顺序，从前往后，填充dp数组；5.举例验证。这道题的空间优化可以不维护整个长度为n的dp序列而只维护两个值dp[0]和dp[1]</p><h2 id="9-2-爬楼梯"><a href="#9-2-爬楼梯" class="headerlink" title="9.2 爬楼梯"></a>9.2 爬楼梯</h2><p>dp[i]表示的是爬到第i层的<strong>方法数</strong>，爬到i-1层方法数dp[i-1]，再爬一层就能达到i层；或者爬到i-2层方法数dp[i-2]，再爬两层就能到达i层，所以dp[i]&#x3D;dp[i-1]+dp[i-2]</p><h2 id="9-3-使用最小花费爬楼梯"><a href="#9-3-使用最小花费爬楼梯" class="headerlink" title="9.3 使用最小花费爬楼梯"></a>9.3 使用最小花费爬楼梯</h2><p>dp[i]表示的是到达第i层的<strong>最小花费</strong>，因为可以爬1或2层，所以有两种情况到达第i层：从第i-1层，再爬一层，花费dp[i-1]+cost[i-1]；或者从第i-2层，再爬两层，花费dp[i-2]+cost[i-2]，那dp[i]因为是最小花费，取这两者的最小值</p><h2 id="9-4-不同路径"><a href="#9-4-不同路径" class="headerlink" title="9.4 不同路径"></a>9.4 不同路径</h2><p>dp[i][j]代表从（0，0）到（i，j）的路径数，<code>dp[i]][j]=dp[i-1][j]+dp[i][j-1]</code>，以下是初始化：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 初始化，从（0，0）到（i,0）或者（0，j）都只有一条路径</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>    dp[i][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span><br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>    dp[<span class="hljs-number">0</span>][j] = <span class="hljs-number">1</span><br>  &#125;<br></code></pre></td></tr></table></figure><p>找到了定义二维数组较为简单的方式，这样的逻辑简洁清晰：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> dp = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(m), <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(n).<span class="hljs-title function_">fill</span>(<span class="hljs-number">0</span>))<br></code></pre></td></tr></table></figure><h2 id="9-5-不同路径II"><a href="#9-5-不同路径II" class="headerlink" title="9.5 不同路径II"></a>9.5 不同路径II</h2><p>这道题相较于上一题多了有障碍的情况，那么在初始化时和推导dp[i]时都应该考虑到有障碍，当<code>[i][j]</code>上没有障碍时才使用推导公式推导出dp[i]否则dp[i]保持初始化的状态，这道题注意初始化<code>[i][0]</code>和<code>[0][j]</code>时遇到障碍了后面就都不处理了，即后面的全都过不去了路径数都保持初始状态0</p><h2 id="9-6-整数拆分"><a href="#9-6-整数拆分" class="headerlink" title="9.6 整数拆分"></a>9.6 整数拆分</h2><p>dp[i]表示的i拆分的数的最大乘积，dp初始化，题目说了n&gt;&#x3D;2，所以dp[0]，dp[1]是没有意义的，从dp[2]开始赋初始值，推导dp[i]</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">3</span>; i &lt;= n; i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">1</span>; j &lt;= i / <span class="hljs-number">2</span>; j++) &#123;<br>      <span class="hljs-comment">// 相当于看成把i拆分成i-j和j，j是逐渐增大的，已经完成了拆分j的过程</span><br>      <span class="hljs-comment">// 可以看成(i - j) * j是两个数相乘，dp[i - j] * j是多个数相乘</span><br>      <span class="hljs-keyword">let</span> temp = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>((i - j) * j, dp[i - j] * j)<br>      <span class="hljs-comment">// 取最大的乘积</span><br>      dp[i] = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(temp, dp[i])<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><h2 id="9-7-不同的二叉搜索树"><a href="#9-7-不同的二叉搜索树" class="headerlink" title="9.7 不同的二叉搜索树"></a>9.7 不同的二叉搜索树</h2><p>这道题难在如何得出递推公式，思路如下：</p><p>1 到 <code>n</code> 的每个数字都可以作为 BST 的根节点，根节点的左边是比它小的数字（左子树），右边是比它大的数字（右子树）。 如果我们设 <code>G(n)</code> 表示 <code>n</code> 个节点能构造的不同 BST 的个数，并设 <code>F(i, n)</code> 表示以 <code>i</code> 为根节点时有多少种不同的 BST，则：</p><ul><li><p><code>G(n)</code> 就是每个 <code>i</code>（1 到 <code>n</code>）作为根节点时的所有可能的 BST 数的总和：<br>$$<br>G(n)&#x3D;∑i&#x3D;1nF(i,n)G(n) &#x3D; \sum_{i&#x3D;1}^{n} F(i, n)G(n)&#x3D;i&#x3D;1∑nF(i,n)<br>$$</p></li><li><p>对于 <code>F(i, n)</code>，左右子树的组合数决定了它的 BST 种类数。如果 <code>i</code> 作为根节点：</p><ul><li>左子树有 <code>i - 1</code> 个节点，共有 <code>G(i - 1)</code> 种可能。</li><li>右子树有 <code>n - i</code> 个节点，共有 <code>G(n - i)</code> 种可能。</li></ul><p>因此，<code>F(i, n) = G(i - 1) * G(n - i)</code>。</p></li><li><p>最终递推式为：<br>$$<br>G(n)&#x3D;<br>∑<br>n<br>​<br> G(i−1)∗G(n−i)<br>$$</p></li></ul><h2 id="9-8-01背包"><a href="#9-8-01背包" class="headerlink" title="9.8 01背包"></a>9.8 01背包</h2><h3 id="9-8-1-01背包问题"><a href="#9-8-1-01背包问题" class="headerlink" title="9.8.1 01背包问题"></a>9.8.1 01背包问题</h3><p>01背包的精髓就在于：dp[i]的计算包含两种情况，选当前元素和不选当前元素</p><p>二维dp数组和一维dp数组有哪些不同：因为一维数组少了一个维度，所以很可能由于操作不当导致状态被覆盖，使用一维dp数组时要倒序遍历背包容量（dp[j]依赖于dp[j-weight[i]]，如果j从小到大遍历，dp[j-weight[i]]可能被当前轮次的更新所覆盖，而已经不是上一次的状态了）、先遍历物品再遍历背包容量且顺序不可交换（否则每次的背包容量都可选择所有的物品，这是完全背包问题而非01背包），二维数组因为有i这个维度，能够确保不同物品间的轮次互不影响，所以没这么多限制</p><p>一直记着<code>dp[i][j]</code>表示的是把下标在1~i范围的物品放入容量为j的背包的最大总价值，初始化时要注意一些细节：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 初始化</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>    <span class="hljs-comment">// dp[i][0]把下标为0~i的物品放入容量为0的包，价值全为0</span><br>    dp[i][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span><br>  &#125;<br>  <span class="hljs-comment">// 注意j是从第一个物品的重量开始的，因为要装下第1个物品，容量至少要为weight[0]</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = weight[<span class="hljs-number">0</span>]; j &lt; bagWeight + <span class="hljs-number">1</span>; j++) &#123;<br>    <span class="hljs-comment">// dp[0][j]把编号为0的物品放入容量为j的背包的最大价值就是value[0]</span><br>    dp[<span class="hljs-number">0</span>][j] = value[<span class="hljs-number">0</span>]<br>  &#125;<br></code></pre></td></tr></table></figure><p>推导<code>dp[i][j]</code>有两种大情况：当前背包整体容量（注意不是剩下的）能放下物品i，在这种情况下，<code>dp[i][j]</code>是取放物品i或者不放物品i中的价值最大值；另一种大情况是放不下物品i，那直接取上一个物品的最大加hi在就好了。注意计算放物品i时的价值，要先给物品i留出足够的容量，再用剩下的容量去装前面的i-1个物品</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 推导dp[i][j]</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; m; i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">1</span>; j &lt; bagWeight + <span class="hljs-number">1</span>; j++) &#123;<br>      <span class="hljs-comment">// 第一种大情况：可以放物品i，但放还是不放价值不一样，要取其中的最大值</span><br>      <span class="hljs-comment">// 当前容量为j，如果要放物品i，剩余容量为j-weight[i]</span><br>      <span class="hljs-comment">// 物品i-1要放入容量为j-weight[i]的包的最大价值：dp[i-1][j-weight[i]],总价值就是dp[i-1][j-weight[i]]+value[i]</span><br>      <span class="hljs-comment">// 此时最大价值就取dp[i-1][j-weight[i]]+value[i]与不放物品i时的价值dp[i-1][j]中的最大值</span><br>      <span class="hljs-comment">// 第二种大情况：放不下物品i，直接取放物品i-1时的结果dp[i-1][j]</span><br>      <span class="hljs-keyword">if</span> (j &gt;= weight[i]) &#123;<br>        <span class="hljs-comment">// 可以放物品i</span><br>        dp[i][j] = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(dp[i - <span class="hljs-number">1</span>][j - weight[i]] + value[i], dp[i - <span class="hljs-number">1</span>][j])<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 放不下物品i</span><br>        dp[i][j] = dp[i - <span class="hljs-number">1</span>][j]<br>      &#125;<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><h3 id="9-8-2-分割等和子集"><a href="#9-8-2-分割等和子集" class="headerlink" title="9.8.2 分割等和子集"></a>9.8.2 分割等和子集</h3><p>这道题感觉最难的是想到用01背包来做，以及怎么套模板。把子集目标和看成背包最大容量，dp[j]表示容量为j的背包放物品后的最大重量，注意区分这里容量和重量，重量可不一定等于容量，要找的就是最大重量能不能等于容量，就是说能不能把背包装满。推导dp[j]：不选第i个元素，容量j的最大重量就是dp[j]； 选第i个元素，容量j的最大重量是前i-1个元素的最大重量加上第i个的重量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = target; j &gt;= nums[i]; j--) &#123;<br>      <span class="hljs-comment">// 不选第i个元素，容量j的最大重量就是dp[j]</span><br>      <span class="hljs-comment">// 选第i个元素，容量j的最大重量是前i-1个元素的最大重量加上第i个的重量</span><br>      dp[j] = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(dp[j], dp[j - nums[i]] + nums[i])<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><p>最后返回dp[target]&#x3D;&#x3D;&#x3D;target，也就是容量sum&#x2F;2的包最大重量是sum&#x2F;2吗</p><h3 id="9-8-3-最后一块石头的重量II"><a href="#9-8-3-最后一块石头的重量II" class="headerlink" title="9.8.3 最后一块石头的重量II"></a>9.8.3 最后一块石头的重量II</h3><p>其实就是求把两堆石头分成重量基本相等的两堆，那就和上一题非常像了，只是最后返回的东西不一样，这个是要返回sum(数组重量总和)-dp[target]-dp[target]（因为target&#x3D;sum&#x2F;2时进行向下取整保证sum-dp[target]更大），这道题中的dp[j]也是容量为j的背包的最大重量。</p><h3 id="9-8-4-目标和"><a href="#9-8-4-目标和" class="headerlink" title="9.8.4 目标和"></a>9.8.4 目标和</h3><p>可以看成left组合-right组合&#x3D;target（全是加法就是right组合为0的情况），数组总和sum，left-(sum-left)&#x3D;target，left&#x3D;(sum+target)&#x2F;2，就是找和为(sum+target)&#x2F;2的子数组。dp[i][j]&#96;表示的是前i个物品<strong>装满</strong>容量j的背包的方法数</p><p>二维数组和一维数组的初始化不太一样，二维数组因为是考虑的前i个数装满容量0的情况，就得考虑这其中有多少个0，然后<code>dp[i][0]</code>初始化成2^n(0的个数)，但一维数组只是考虑最初始的装满容量0的方法就只有1种，就是什么都不放，而后面的推导已经包含了重量为0的情况，初始化就不用考虑了否则就会重复计算</p><h3 id="9-8-5-一和零"><a href="#9-8-5-一和零" class="headerlink" title="9.8.5 一和零"></a>9.8.5 一和零</h3><p>这道题是相当于有背包有两个维度，最多装m个0和n个0。<code>dp[i][j]</code>表示最多含 i 个0和 j 个1的字符串数组构成的最大子集的大小，这里的二维数组其实相当于之前只有一个维度的背包时的一维dp数组</p><h2 id="9-9-完全背包"><a href="#9-9-完全背包" class="headerlink" title="9.9 完全背包"></a>9.9 完全背包</h2><h3 id="9-9-1-完全背包问题"><a href="#9-9-1-完全背包问题" class="headerlink" title="9.9.1 完全背包问题"></a>9.9.1 完全背包问题</h3><p>完全背包和01背包的不同只在完全背包每个物品可以重复选，所以完全背包用一维dp数组时背包容量是从小到大开始遍历</p><h3 id="9-9-2-零钱兑换II"><a href="#9-9-2-零钱兑换II" class="headerlink" title="9.9.2 零钱兑换II"></a>9.9.2 零钱兑换II</h3><p>就是一道完全背包问题，但这道题要注意背包和物品的遍历顺序，这里是求组合必须先遍历物品再遍历背包。可总结为：如果求组合数就是外层for循环遍历物品，内层for遍历背包。如果求排列数就是外层for遍历背包，内层for循环遍历物品。</p><h3 id="9-9-3-组合总和IV"><a href="#9-9-3-组合总和IV" class="headerlink" title="9.9.3 组合总和IV"></a>9.9.3 组合总和IV</h3><p>这一题求的是排列数，遍历顺序就是先背包再物品</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试准备</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>硅谷甄选运营平台</title>
    <link href="/2024/09/24/%E7%A1%85%E8%B0%B7%E7%94%84%E9%80%89%E8%BF%90%E8%90%A5%E5%B9%B3%E5%8F%B0/"/>
    <url>/2024/09/24/%E7%A1%85%E8%B0%B7%E7%94%84%E9%80%89%E8%BF%90%E8%90%A5%E5%B9%B3%E5%8F%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="1-项目初始化"><a href="#1-项目初始化" class="headerlink" title="1.项目初始化"></a>1.项目初始化</h1><h2 id="模板路由配置"><a href="#模板路由配置" class="headerlink" title="模板路由配置"></a>模板路由配置</h2><p>一级路由搭建</p><h1 id="2-登录模块"><a href="#2-登录模块" class="headerlink" title="2.登录模块"></a>2.登录模块</h1><h2 id="登录静态页面搭建"><a href="#登录静态页面搭建" class="headerlink" title="登录静态页面搭建"></a>登录静态页面搭建</h2><p>element plus组件库使用</p><h2 id="登录验证"><a href="#登录验证" class="headerlink" title="登录验证"></a>登录验证</h2><p>注意要配置生产环境，解决跨域问题，才能成功访问到接口</p><h2 id="登录时间判断"><a href="#登录时间判断" class="headerlink" title="登录时间判断"></a>登录时间判断</h2><p>注意Date静态方法与new Date()调用的实例方法区别</p><p><strong>实例方法</strong>: 需要通过<code>new Date()</code>实例化一个日期对象后调用，操作的是具体的日期对象。</p><p><strong>常见实例方法：</strong></p><ul><li><code>getFullYear()</code>: 获取年份。</li><li><code>getMonth()</code>: 获取月份（0-11，0表示一月）。</li><li><code>getDate()</code>: 获取日期（1-31）。</li><li><code>getDay()</code>: 获取星期几（0-6，0表示星期日）。</li><li><code>getHours()</code>: 获取小时（0-23）。</li><li><code>getMinutes()</code>: 获取分钟（0-59）。</li><li><code>getSeconds()</code>: 获取秒（0-59）。</li><li><code>toString()</code>: 返回日期对象的字符串表示。</li></ul><p><strong>静态方法</strong>: 不需要实例化，可以直接通过<code>Date</code>构造函数调用，通常用于全局时间相关的操作。</p><p><strong>常见静态方法：</strong></p><ul><li><code>Date.now()</code>: 返回自1970年1月1日午夜以来的毫秒数。</li><li><code>Date.parse()</code>: 解析一个日期字符串，返回该日期的时间戳（从1970年1月1日午夜开始的毫秒数）。</li><li><code>Date.UTC()</code>: 根据提供的年份、月份、日期等参数，返回该日期的UTC时间戳。</li></ul><h2 id="登录模块表单校验"><a href="#登录模块表单校验" class="headerlink" title="登录模块表单校验"></a>登录模块表单校验</h2><p>位el-form添加:model绑定收集的数据，ref打标签，便于后面调用组件实例身上的validate方法校验表单，:rules传入校验规则</p><h2 id="自定义表单校验"><a href="#自定义表单校验" class="headerlink" title="自定义表单校验"></a>自定义表单校验</h2><p>向rules的validator传入函数，函数传入的三个参数</p><p><code>rule: any,</code>校验配置对象</p><p><code>value: any,</code> 表单文本内容</p><p><code>callback: any</code>，回调函数，满足条件放行通过，否则抛出错误</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">const</span> <span class="hljs-title function_">validatePass</span> = (<span class="hljs-params"><span class="hljs-attr">rule</span>: <span class="hljs-built_in">any</span>, <span class="hljs-attr">value</span>: <span class="hljs-built_in">any</span>, <span class="hljs-attr">callback</span>: <span class="hljs-built_in">any</span></span>) =&gt; &#123;<br>  <span class="hljs-keyword">if</span> (value === <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>    <span class="hljs-title function_">callback</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Please input the password&#x27;</span>))<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">if</span> (ruleForm.<span class="hljs-property">checkPass</span> !== <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>      <span class="hljs-keyword">if</span> (!ruleFormRef.<span class="hljs-property">value</span>) <span class="hljs-keyword">return</span><br>      ruleFormRef.<span class="hljs-property">value</span>.<span class="hljs-title function_">validateField</span>(<span class="hljs-string">&#x27;checkPass&#x27;</span>)<br>    &#125;<br>    <span class="hljs-title function_">callback</span>()<br>  &#125;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">validatePass2</span> = (<span class="hljs-params"><span class="hljs-attr">rule</span>: <span class="hljs-built_in">any</span>, <span class="hljs-attr">value</span>: <span class="hljs-built_in">any</span>, <span class="hljs-attr">callback</span>: <span class="hljs-built_in">any</span></span>) =&gt; &#123;<br>  <span class="hljs-keyword">if</span> (value === <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>    <span class="hljs-title function_">callback</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Please input the password again&#x27;</span>))<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value !== ruleForm.<span class="hljs-property">pass</span>) &#123;<br>    <span class="hljs-title function_">callback</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Two inputs don&#x27;t match!&quot;</span>))<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_">callback</span>()<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> rules = reactive&lt;<span class="hljs-title class_">FormRules</span>&lt;<span class="hljs-keyword">typeof</span> ruleForm&gt;&gt;(&#123;<br>  <span class="hljs-attr">pass</span>: [&#123; <span class="hljs-attr">validator</span>: validatePass, <span class="hljs-attr">trigger</span>: <span class="hljs-string">&#x27;blur&#x27;</span> &#125;],<br>  <span class="hljs-attr">checkPass</span>: [&#123; <span class="hljs-attr">validator</span>: validatePass2, <span class="hljs-attr">trigger</span>: <span class="hljs-string">&#x27;blur&#x27;</span> &#125;],<br>&#125;)<br></code></pre></td></tr></table></figure><h1 id="3-主页面（layout）"><a href="#3-主页面（layout）" class="headerlink" title="3.主页面（layout）"></a>3.主页面（layout）</h1><h2 id="主页面静态页面搭建"><a href="#主页面静态页面搭建" class="headerlink" title="主页面静态页面搭建"></a>主页面静态页面搭建</h2><p>注意calc()和scss全局变量灵活控制样式</p><h2 id="利用组件递归动态生成导航菜单"><a href="#利用组件递归动态生成导航菜单" class="headerlink" title="利用组件递归动态生成导航菜单"></a>利用组件递归动态生成导航菜单</h2><h3 id="当有动态路由时，把路由交由pinia管理"><a href="#当有动态路由时，把路由交由pinia管理" class="headerlink" title="当有动态路由时，把路由交由pinia管理"></a>当有动态路由时，把路由交由pinia管理</h3><p>将动态路由存储在Pinia（或其他状态管理工具）中的做法在大型Vue 3项目中比较常见，尤其是在需要根据用户权限动态生成或控制路由的情况下。将动态路由存储在Pinia中是为了更好地管理权限、动态添加路由、实现状态持久化，以及解耦业务逻辑。这种做法对于需要根据用户权限动态生成路由的应用非常有效。这么做有几个原因：</p><h4 id="用户权限管理"><a href="#用户权限管理" class="headerlink" title="用户权限管理"></a>用户权限管理</h4><p>在一些应用中，不同用户有不同的权限，访问的路由也有所不同。将动态路由存储在Pinia中，可以根据用户登录后的权限数据来动态生成可访问的路由表。</p><ul><li><strong>示例</strong>: 用户登录后，后端返回用户的权限信息。前端根据这些权限信息生成动态路由，并存储在Pinia中，方便在路由守卫或其他组件中访问和控制。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 假设权限信息从后端获取后存储在 Pinia 中</span><br><span class="hljs-keyword">const</span> useAuthStore = <span class="hljs-title function_">defineStore</span>(<span class="hljs-string">&#x27;auth&#x27;</span>, &#123;<br>  <span class="hljs-attr">state</span>: <span class="hljs-function">() =&gt;</span> (&#123;<br>    <span class="hljs-attr">roles</span>: [], <span class="hljs-comment">// 用户角色或权限</span><br>    <span class="hljs-attr">routes</span>: [], <span class="hljs-comment">// 动态路由</span><br>  &#125;),<br>  <span class="hljs-attr">actions</span>: &#123;<br>    <span class="hljs-title function_">setRoutes</span>(<span class="hljs-params">routes</span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">routes</span> = routes;<br>    &#125;<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="路由动态添加"><a href="#路由动态添加" class="headerlink" title="路由动态添加"></a>路由动态添加</h4><p>当应用加载时，可以根据用户的权限或其他条件，动态地将路由添加到Vue Router中。将这些路由放在Pinia中可以在应用的任何地方方便地管理和修改路由。</p><ul><li><strong>示例</strong>: 应用初始化时，根据用户角色动态添加路由：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; useAuthStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./store/auth&#x27;</span>;<br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router&#x27;</span>;<br><br><span class="hljs-keyword">const</span> authStore = <span class="hljs-title function_">useAuthStore</span>();<br><br><span class="hljs-comment">// 根据权限生成路由</span><br><span class="hljs-keyword">const</span> dynamicRoutes = <span class="hljs-title function_">generateRoutes</span>(authStore.<span class="hljs-property">roles</span>);<br><br><span class="hljs-comment">// 存储在 Pinia 中</span><br>authStore.<span class="hljs-title function_">setRoutes</span>(dynamicRoutes);<br><br><span class="hljs-comment">// 动态添加路由</span><br>dynamicRoutes.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">route</span> =&gt;</span> &#123;<br>  router.<span class="hljs-title function_">addRoute</span>(route);<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="状态管理与持久化"><a href="#状态管理与持久化" class="headerlink" title="状态管理与持久化"></a><strong>状态管理与持久化</strong></h4><p>通过Pinia管理动态路由，可以与其他应用状态一起进行集中管理和持久化。比如，当用户刷新页面时，动态路由依然可以从Pinia中恢复，不需要重新向后端请求权限信息来生成路由。</p><ul><li><strong>示例</strong>: 结合持久化插件将动态路由存储在本地，以避免页面刷新后路由信息丢失：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> createPersistedState <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pinia-plugin-persistedstate&#x27;</span>;<br><br><span class="hljs-keyword">const</span> pinia = <span class="hljs-title function_">createPinia</span>();<br>pinia.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">createPersistedState</span>(&#123;<br>  <span class="hljs-attr">paths</span>: [<span class="hljs-string">&#x27;auth.routes&#x27;</span>] <span class="hljs-comment">// 持久化动态路由</span><br>&#125;));<br></code></pre></td></tr></table></figure><h3 id="写样式时一个注意点"><a href="#写样式时一个注意点" class="headerlink" title="写样式时一个注意点"></a>写样式时一个注意点</h3><p>发现加上了scoped但是父组件中的样式还是会影响子组件的样式</p><h3 id="动态创建菜单时注意点"><a href="#动态创建菜单时注意点" class="headerlink" title="动态创建菜单时注意点"></a>动态创建菜单时注意点</h3><p>当菜单项有且仅有一个子路由时，使用了<code>el-menu-item</code>来呈现该子路由，而不是使用<code>el-sub-menu</code>。这么做的原因:</p><p><strong>简化用户导航</strong>：如果父菜单项只有一个子路由，那么这个父菜单项和子路由基本上是绑定在一起的，导航到父菜单项时通常直接会进入这个子路由页面。因此，将唯一的子路由直接呈现为一级菜单项，可以简化用户的点击操作，使导航更加直观。</p><p><strong>避免冗余点击</strong>：当父菜单项只有一个子路由时，如果使用<code>el-sub-menu</code>，用户点击父菜单项后还需要再点击子菜单项，这种情况就显得不必要和冗余。直接将唯一的子路由呈现为一级菜单项，可以减少用户的点击次数，提升用户体验。</p><p><strong>UI&#x2F;UX体验一致</strong>：在用户看来，一个只包含一个子菜单的父菜单项如果使用了<code>el-sub-menu</code>，可能会让他们感到多余或困惑。直接将子菜单项提升为主菜单项，可以提供一致且简洁的用户体验。</p><p><strong>路由与视图的自然映射</strong>：在某些设计中，一个父路由与其唯一的子路由可能代表同一个页面或功能。此时，子路由实际上代表的是主路由的具体视图，因此直接呈现为一级菜单更加合理。</p><h3 id="可能出现的内存溢出问题"><a href="#可能出现的内存溢出问题" class="headerlink" title="可能出现的内存溢出问题"></a>可能出现的内存溢出问题</h3><p>如果把menuRoutes放在组件内部，则会引发内存溢出</p><p>使用el-icon结合component（is属性对应相应meta里对应的图标）实现菜单图标</p><h3 id="el-menu下还要包裹一层template结构"><a href="#el-menu下还要包裹一层template结构" class="headerlink" title="el-menu下还要包裹一层template结构"></a>el-menu下还要包裹一层template结构</h3><p>因为 <code>el-menu</code> 是整个菜单的容器，它只渲染一次，而 <code>v-for</code> 是用于循环渲染子元素的指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;el-menu class=&quot;menu&quot;&gt;<br>      &lt;template  v-for=&quot;m in menuRoutes&quot; :key=&quot;m.path&quot; &gt;<br>      &lt;!-- 没有子路由，呈现el-menu-item --&gt;<br>      &lt;el-menu-item :index=&quot;m.path&quot; v-if=&quot;!m.meta.isHidden &amp;&amp; !m.children&quot;&gt;<br>        &lt;template #title&gt;<br>          &lt;el-icon&gt;<br>            &lt;component :is=&quot;m.meta.icon&quot;&gt;&lt;/component&gt;<br>          &lt;/el-icon&gt;<br>          &lt;span&gt; &#123;&#123; m.meta?.title &#125;&#125; &lt;/span&gt;<br>        &lt;/template&gt;<br>      &lt;/el-menu-item&gt;<br>      &lt;!-- 有且仅有一个子路由，也呈现el-menu-item，避免冗余导航 --&gt;<br>      &lt;el-menu-item :index=&quot;m.children[0]?.path&quot; v-if=&quot;!m.meta.isHidden &amp;&amp; m.children?.length === 1&quot;&gt;<br>        &lt;template #title&gt;<br>          &lt;el-icon&gt;<br>            &lt;component :is=&quot;m.meta.icon&quot;&gt;&lt;/component&gt;<br>          &lt;/el-icon&gt;<br>          &lt;span&gt;&#123;&#123; m.children[0].meta.title &#125;&#125;&lt;/span&gt;<br>        &lt;/template&gt;<br>      &lt;/el-menu-item&gt;<br>      &lt;!-- 有一个以上子路由，采用折叠菜单 --&gt;<br>      &lt;el-sub-menu :index=&quot;m.path&quot; v-if=&quot;!m.meta.isHidden &amp;&amp; m.children &amp;&amp; m.children.length &gt; 1&quot;&gt;<br>        &lt;template #title&gt;<br>          &lt;el-icon&gt;<br>            &lt;component :is=&quot;m.meta.icon&quot;&gt;&lt;/component&gt;<br>          &lt;/el-icon&gt;<br>          &lt;span&gt;&#123;&#123; m.meta.title &#125;&#125;&lt;/span&gt;<br>        &lt;/template&gt;<br>        &lt;Menu :menuRoutes=&quot;m.children&quot;&gt;&lt;/Menu&gt;<br>      &lt;/el-sub-menu&gt;<br><br>      &lt;/template&gt;<br>    &lt;/el-menu&gt;<br></code></pre></td></tr></table></figure><p>要循环渲染的是子元素而非<code>el-menu</code></p><p><strong><code>el-menu</code> 作为容器：</strong> <code>el-menu</code> 是一个整体的菜单容器，不应被循环渲染。它内部的菜单项才是需要循环渲染的部分。直接在 <code>el-menu</code> 上使用 <code>v-for</code> 会导致整个菜单容器被多次渲染，而不是循环渲染每个菜单项。</p><p><strong>循环的目标是子元素：</strong> <code>v-for</code> 的目标是循环生成多个子元素（如 <code>el-menu-item</code> 或 <code>el-sub-menu</code>），而不是循环生成多个 <code>el-menu</code> 容器。因此，<code>v-for</code> 应该放在一个用于包裹子元素的 <code>&lt;template&gt;</code> 或直接在子元素标签上。</p><p><strong>保持结构清晰：</strong> 把 <code>v-for</code> 放在合适的位置，可以保持代码结构清晰，避免误解和潜在的渲染问题。直接把 <code>v-for</code> 放在 <code>el-menu</code> 上，可能会使代码混乱且不符合逻辑。</p><h3 id="搭建路由时的注意点"><a href="#搭建路由时的注意点" class="headerlink" title="搭建路由时的注意点"></a>搭建路由时的注意点</h3><p>使用编程式路由导航，配置路由时要写完整路径</p><p>注意给路由命名不能重复，否则后面的路由会顶掉前面的路由使其不能匹配</p><p>注意menu组件里不能包含el-menu，否则递归使用组件时el-sub-menu下也是从el-menu开始的结构而非el-menu-item，会导致菜单项与父级平级，看起来没有向里的缩进量。</p><p>还要注意搭建路由时要考虑清楚，&#x2F;home之所以是&#x2F;的子路由，是因为home组件要展示在LayOut组件中，&#x2F;screen会直接跳走为另一个页面所以与&#x2F;平级，其他&#x2F;acl和&#x2F;product都是挂载的LayOut组件，所以其子路由自然在LayOut组件中展示（理解好嵌套路由和组件之间的关系）</p><h3 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h3><p>关于整个页面出现滚动条，发现是Logo组件未限定高度</p><p>添加LayOut组件一级路由切换子路由时的动画</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;router-view v-slot=&quot;&#123; Component &#125;&quot;&gt;<br>  &lt;transition name=&quot;fade&quot;&gt;<br>    &lt;!-- 渲染LayOut一级路由的子路由 --&gt;<br>    &lt;component :is=&quot;Component&quot; /&gt;<br>  &lt;/transition&gt;<br>&lt;/router-view&gt;<br></code></pre></td></tr></table></figure><p>el-menu-item的icon不要放到插槽中，否则折叠菜单后文字和icon都消失了，但el-sub-menu的icon放到插槽里</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;el-icon&gt;<br>  &lt;component :is=&quot;m.meta.icon&quot;&gt;&lt;/component&gt;<br>&lt;/el-icon&gt;<br>&lt;template #title&gt;<br>  &lt;span&gt;&#123;&#123; m.children[0].meta.title &#125;&#125;&lt;/span&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>回忆动态绑定样式（3种方式）</p><p>以前觉得样式尽量写到css里，但在真实开发中感觉行内样式也挺香的，特别是只用给span这种普普通通的元素加点margin啥的</p><p>注意折叠后不仅宽度要变，可能元素的定位也要发生变化</p><p>注意注意，解构store对象要用storeToRefs包裹，否则解构出的数据失去响应式！！！（当然后面还是觉得xxxstore.xxx比较香）</p><p>一个很奇怪的地方，切换菜单图标用refs解构成功，用storeTorefs有问题，说不能读取undefined上的value，是因为会忽略store中的方法和非响应式数据</p><p>学到了新的route的api</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// 获取匹配到的路由数组</span><br>const matchedRoutes = route.matched;<br></code></pre></td></tr></table></figure><h2 id="刷新业务实现"><a href="#刷新业务实现" class="headerlink" title="刷新业务实现"></a>刷新业务实现</h2><p>点击刷新按钮：</p><p>​1.更改存放layout配置仓库中isRefresh的值（值是多少不重要，只要变化就好）</p><p>​ 2.监测到isRefresh修改后，卸载content部分展示组件再重新挂载( <code>v-if</code> 实现卸载与挂载的切换) （注意<code>v-if</code>是在渲染出来的组件身上）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;!-- 使用过渡动画 --&gt;<br>  &lt;router-view v-slot=&quot;&#123; Component &#125;&quot;&gt;<br>    &lt;transition name=&quot;fade&quot;&gt;<br>      &lt;!-- 渲染LayOut一级路由的子路由，注意是卸载和挂载这里渲染出来的组件 --&gt;<br>      &lt;component :is=&quot;Component&quot; v-if=&quot;flag&quot;/&gt;<br>    &lt;/transition&gt;<br>  &lt;/router-view&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h2 id="全屏业务实现"><a href="#全屏业务实现" class="headerlink" title="全屏业务实现"></a>全屏业务实现</h2><p>原生实现：</p><p>（1）Element.requestFullscreen()：用于发出异步请求使元素进入全屏模式；</p><p>（2）Document.exitFullscreen() ：用于让当前文档退出全屏模式；</p><p>插件实现：</p><p>screenfull.request(); &#x2F;&#x2F; 全屏<br>screenfull.exit(); &#x2F;&#x2F; 退出全屏<br>screenfull.toggle(); &#x2F;&#x2F; 全屏切换</p><h2 id="获取用户信息与token理解"><a href="#获取用户信息与token理解" class="headerlink" title="获取用户信息与token理解"></a>获取用户信息与token理解</h2><p>token就是每个用户的唯一标识，当用户登录成功后，服务器端返回token，之后再向服务器发请求都需携带token</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//请求拦截器</span><br>request.<span class="hljs-property">interceptors</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">use</span>(<span class="hljs-function"><span class="hljs-params">config</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">// 如果用户小仓库已经有TOKEN的话，以后发请求的请求头都要携带TOKEN</span><br>    <span class="hljs-keyword">let</span> &#123; token &#125; = <span class="hljs-title function_">useAcountStore</span>()<br>    <span class="hljs-keyword">if</span> (token) &#123;<br>        <span class="hljs-comment">//config配置对象,headers属性请求头,经常给服务器端携带公共参数</span><br>        config.<span class="hljs-property">headers</span>.<span class="hljs-property">token</span> = token<br>    &#125;<br>    <span class="hljs-keyword">return</span> config;<br>&#125;);<br></code></pre></td></tr></table></figure><p>注意仓库中数据大部分要是响应式的，否则可能修改无效</p><h2 id="路由鉴权"><a href="#路由鉴权" class="headerlink" title="路由鉴权"></a>路由鉴权</h2><p>注意新建的ts文件实现某个业务要记得在main.ts中引入</p><p>注意路由鉴权文件中的router是整个项目的路由器，而非用useRouter()创建的路由器对象，原来学习路由守卫时是直接写在<code>src/router/index.ts</code>里的，现在只是把这部分提到新的地方<code>src/permission.ts</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 引入整个项目的路由器（而非创建路由器对象）</span><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./router&quot;</span>;<br></code></pre></td></tr></table></figure><p>注意在组件以外的地方使用小仓库要记得引入大仓库并传入</p><h1 id="4-品牌管理模块"><a href="#4-品牌管理模块" class="headerlink" title="4.品牌管理模块"></a>4.品牌管理模块</h1><p>注意写接口时老师用的箭头函数，只有一行时可以省略（）和return，但我写的普通函数要记得加return</p><p>在前端定义品牌的 TypeScript 数据类型时，<code>id</code> 属性可有可无是因为品牌的状态不同：</p><ol><li><strong>已有品牌</strong>：对于已经存在的品牌，<code>id</code> 是数据库中唯一标识该品牌的字段，因此它是必有的，用来区分和操作具体的品牌记录。</li><li><strong>新增品牌</strong>：在创建新品牌时，<code>id</code> 通常由后端生成。前端在发送请求前，新增的品牌是没有 <code>id</code> 的，因为此时品牌还未被存储到数据库中，因此 <code>id</code> 属性可以为空或不存在。新品牌数据在发送到后端后，后端会生成一个 <code>id</code> 并返回给前端。</li></ol><h2 id="TypeScript-类型定义示例"><a href="#TypeScript-类型定义示例" class="headerlink" title="TypeScript 类型定义示例"></a>TypeScript 类型定义示例</h2><p>在 TypeScript 中，你可以使用可选属性 (<code>?</code>) 来定义 <code>id</code> 可以有也可以没有：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">typescript复制代码interface <span class="hljs-title class_">Brand</span> &#123;<br>  id?: number; <span class="hljs-comment">// 已有品牌有id，新增品牌没有id</span><br>  <span class="hljs-attr">name</span>: string;<br>  <span class="hljs-attr">logoUrl</span>: string;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里 <code>id?</code> 表示 <code>id</code> 属性是可选的，只有在已有品牌时才会存在，而在新增品牌时可以不定义这个属性。</p><h3 id="什么时候使用接口，什么时候使用类型别名？"><a href="#什么时候使用接口，什么时候使用类型别名？" class="headerlink" title="什么时候使用接口，什么时候使用类型别名？"></a>什么时候使用接口，什么时候使用类型别名？</h3><ul><li><p><strong>接口</strong>：更适合用于定义对象的结构，尤其是需要扩展或被类实现时。</p></li><li><p><strong>类型别名</strong>：更适合用于定义复杂的类型组合，如联合类型、交叉类型或需要表达更复杂的类型逻辑时。</p></li><li><p>如果你主要是定义对象的形状，尤其是需要扩展或实现时，推荐使用接口。</p></li><li><p>如果你需要更灵活地组合类型或定义复杂的类型逻辑，推荐使用类型别名。</p></li></ul><h3 id="定义ts类型"><a href="#定义ts类型" class="headerlink" title="定义ts类型"></a>定义ts类型</h3><h4 id="响应式数据"><a href="#响应式数据" class="headerlink" title="响应式数据"></a>响应式数据</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 存储已有品牌数据</span><br><span class="hljs-keyword">let</span> trademarkArr = reactive&lt;<span class="hljs-title class_">Records</span>&gt;([])<br></code></pre></td></tr></table></figure><h4 id="普通数据"><a href="#普通数据" class="headerlink" title="普通数据"></a>普通数据</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> <span class="hljs-attr">result</span>: <span class="hljs-title class_">TrademarkResponseData</span> = <span class="hljs-keyword">await</span> <span class="hljs-title function_">reqHasTrademark</span>(currentPage.<span class="hljs-property">value</span>, pageSize.<span class="hljs-property">value</span>)<br></code></pre></td></tr></table></figure><h2 id="分页器组件"><a href="#分页器组件" class="headerlink" title="分页器组件"></a>分页器组件</h2><p>虽然数据改变了，但分页器组件渲染有问题</p><p>给分页器组件添加一个key，每次数据改变后更新key</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (result.<span class="hljs-property">code</span> === <span class="hljs-number">200</span>) &#123;<br>  <span class="hljs-comment">// 让数据改变后分页器重新渲染</span><br>  pagination.<span class="hljs-property">value</span> = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>()<br>  total.<span class="hljs-property">value</span> = result.<span class="hljs-property">data</span>.<span class="hljs-property">total</span><br>  trademarkArr = result.<span class="hljs-property">data</span>.<span class="hljs-property">records</span><br>  <span class="hljs-comment">// 小米的logoUrl缺少http://</span><br>  <span class="hljs-keyword">if</span> (((trademarkArr[<span class="hljs-number">0</span>].<span class="hljs-property">logoUrl</span>).<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;http://&#x27;</span>)) === -<span class="hljs-number">1</span>) &#123;<br>    trademarkArr[<span class="hljs-number">0</span>].<span class="hljs-property">logoUrl</span> = <span class="hljs-string">&#x27;http://&#x27;</span> + trademarkArr[<span class="hljs-number">0</span>].<span class="hljs-property">logoUrl</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>记得新增和修改品牌向服务器发请求时要带data，不然服务器拿不到更新后的数据</p><h2 id="表单校验"><a href="#表单校验" class="headerlink" title="表单校验"></a>表单校验</h2><p>form上打标识、model指定数据收集在哪、rules指定校验规则</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;el-form ref=&quot;formRef&quot; :model=&quot;trademarkParams&quot; :rules=&quot;rules&quot;&gt;<br></code></pre></td></tr></table></figure><p>rules中自定义校验规则</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">validatePass</span> = (<span class="hljs-params">rule: any, value: any, callback: any</span>) =&gt; &#123;  <span class="hljs-keyword">if</span> (value === <span class="hljs-string">&#x27;&#x27;</span>) &#123;    <span class="hljs-title function_">callback</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Please input the password&#x27;</span>))  &#125; <span class="hljs-keyword">else</span> &#123;    <span class="hljs-keyword">if</span> (ruleForm.<span class="hljs-property">checkPass</span> !== <span class="hljs-string">&#x27;&#x27;</span>) &#123;      <span class="hljs-keyword">if</span> (!ruleFormRef.<span class="hljs-property">value</span>) <span class="hljs-keyword">return</span>      ruleFormRef.<span class="hljs-property">value</span>.<span class="hljs-title function_">validateField</span>(<span class="hljs-string">&#x27;checkPass&#x27;</span>)    &#125;    <span class="hljs-title function_">callback</span>()  &#125; &#125;<br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">const rules = reactive&lt;FormRules&lt;typeof ruleForm&gt;&gt;(<span class="hljs-punctuation">&#123;</span><br>  pass<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span> validator<span class="hljs-punctuation">:</span> validatePass<span class="hljs-punctuation">,</span> trigger<span class="hljs-punctuation">:</span> &#x27;blur&#x27; <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  checkPass<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span> validator<span class="hljs-punctuation">:</span> validatePass2<span class="hljs-punctuation">,</span> trigger<span class="hljs-punctuation">:</span> &#x27;blur&#x27; <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  age<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span> validator<span class="hljs-punctuation">:</span> checkAge<span class="hljs-punctuation">,</span> trigger<span class="hljs-punctuation">:</span> &#x27;blur&#x27; <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#125;</span>)<br></code></pre></td></tr></table></figure><p>在合适时机调用 formRef.value.validate()校验所有表单项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">confirmDialog</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 校验所有表单项</span><br>  <span class="hljs-keyword">await</span> formRef.<span class="hljs-property">value</span>.<span class="hljs-title function_">validate</span>()<br>    <span class="hljs-comment">// 校验不通过后续不执行</span><br>    .....<br></code></pre></td></tr></table></figure><p>注意初次的formRef.value为undefined，可以用ts的问号写法或者下一次DOM更新时（nextTick）清除上一次表单校验提示错误信息</p><p>注意get，delete请求时会在url上携带id等数据，不用传递额外数据；而post,put请求往往会额外传递data数据告诉服务器需添加或修改的数据</p><p>注意删除品牌时传的当前页码：为什么要等于1？因为此时trademarkArr是还没有更新的，服务器那边已经修改了，但这边展示的数据还没有更新，要重新请求，所以这里的trademarkArr长度也是没有更新的，&#x3D;1的时候实际上这页已经没有数据了，要返回上一页</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 重新获取品牌数据</span><br><span class="hljs-keyword">await</span> <span class="hljs-title function_">getHasTradeMark</span>(trademarkArr.<span class="hljs-property">length</span> &lt;= <span class="hljs-number">1</span> ? currentPage.<span class="hljs-property">value</span> - <span class="hljs-number">1</span> : currentPage.<span class="hljs-property">value</span>)<br></code></pre></td></tr></table></figure><h1 id="5-属性管理模块"><a href="#5-属性管理模块" class="headerlink" title="5.属性管理模块"></a>5.属性管理模块</h1><p>注意el-select框v-model收集选中的分类的id，但id初始值为’‘（空字符串），如果设为0最开始会展示在select框上</p><p>细节：一级分类的选中值变化时，要清空二级，三级分类的id和三级分类数组(二级分类数组不用请，已经获取了新的数据了)；二级分类选中值变化时，清空三级分类id即可</p><p>使用storeTorefs和不使用各有优劣，使用了看起来比较简洁，但是每次就要.value了；不使用的话看起来比较复杂但不容易出问题</p><p>注意收集用户的数据只收集新增一个数据项应具有的属性，id等由服务器返回的数据通通没有，收集的数据可以用在新增和修改中；修改时将收集到用户上传的数据与当前要修改的完整数据项使用Object.assign合并成新的数据项</p><p>注意vue开发工具常有延迟，可通过页面来观察展示的数据，记得要给el-table传入data属性指定表格的数据</p><p>注意el-table-column插槽中可以传入row，即为当前的数据项，可以通过v-model将用户输入保存到当前数据项（类比v-for的item）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;el-table-column label=&quot;属性值名称&quot;&gt;<br>  &lt;!-- row:代表attrValueList中每一项，即当前属性值对象 --&gt;<br>  &lt;template #=&quot;&#123; row &#125;&quot;&gt;<br>    &lt;el-input v-model=&quot;row.valueName&quot; placeholder=&quot;请输入&quot; /&gt;<br>  &lt;/template&gt;<br>&lt;/el-table-column&gt;<br></code></pre></td></tr></table></figure><p>注意每次新增前要先清上一次用户输入的数据再拿到需要的数据</p><p>注意input聚焦(.focus())这样的操作一般都要放在nextTick中</p><p>对一堆input来说，每次让新添加上来的input聚焦，即所有input的最后一个（可以为这些input的ref传入函数，把他们存到数组中，方便拿到每一个input组件实例）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json">nextTick(() =&gt; <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-comment">// 每次让最后一个el-input组件实例聚焦</span><br>  inputArr<span class="hljs-punctuation">[</span>attrParams.attrValueList.length - <span class="hljs-number">1</span><span class="hljs-punctuation">]</span>.focus()<br><span class="hljs-punctuation">&#125;</span>)<br></code></pre></td></tr></table></figure><p>注意Object.assign()是浅拷贝，新、旧数据指向同一个对象，并未开辟新的存储空间</p><p>，会出bug，比如修改属性后点击取消也会修改原来row里的属性值，但服务器那边的数据并没有被修改。可以使用lodash解决，也可以Object.assign(a,JSON.parse(JSON.stringfy(b)))，把原来的对象先转成JSON字符串，再转为JSON对象，在堆内存中开辟新的空间</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 使用lodash解决</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(attrParams, <span class="hljs-title function_">cloneDeep</span>(row))<br></code></pre></td></tr></table></figure><p>发现了一个影响用户体验的地方，原来我把属性数组、请求获取属性的方法放在了category小仓库里，导致每次重新获取属性比较慢，会出现几秒的暂无数据页面，但把这两个数据放到attribute组件里就好了</p><p>发现使用categoryStore.$reset后路由组件渲染出问题了，显示找不到父节点？</p><h1 id="6-SPU管理模块"><a href="#6-SPU管理模块" class="headerlink" title="6.SPU管理模块"></a>6.SPU管理模块</h1><p>el-table-column上的prop属性可以直接写源数据中的字段名称（能找到数组中每个对象中的字段）</p><p>注意，分页器初始每页显示的条数必须要在page-sizes数组中，不然page-sizes上会显示一个初始值</p><p>可以通过给form设置label-width值使每个表单项对齐</p><p>如何在父组件中拿到子组件的实例对象：用ref，在切换场景我用的v-show，所以子组件是被挂载了，只是未显示</p><p>接口崩了的处理办法，可以再配置swagger上的接口地址，再封装一个request.ts</p><p>v-model既可以收集又可以更新</p><p>数组的map方法，map() 方法返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值。map() 方法按照原始数组元素顺序依次处理元素。<strong>注意：</strong> map() 不会对空数组进行检测。<strong>注意：</strong> map() 不会改变原始数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// el-upload里上传图片的格式必须是&#123;name:...,url:...&#125;，用map转换一下</span><br>imgList.<span class="hljs-property">value</span> = imgResult.<span class="hljs-property">data</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">name</span>: item.<span class="hljs-property">imgName</span>,<br>    <span class="hljs-attr">url</span>: item.<span class="hljs-property">imgUrl</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>当数据比较多时，分散在各个接口中时，可以先声明几个变量来存储数据，最后整合交给服务器</p><p>注意row传进来的是整个一行的对象（完整的对象）</p><p>注意filter与every的结合使用，可以过滤出符合某些条件的元素</p><p>要想Select框拿到数据需要在select上写v-model收集要拿到的数据，并在option上设置value拿到每一项对应的数据，要收集多个数据时可使用模板字符串，后面再对拿到的数据做处理如split</p><p>注意字符串split后是个数组，解构要用[]</p><p>注意对空、重复属性值的检查可以放在将新的属性值添加到原数组之前（此时不用剔除自己，因为还没收集到），也可以放到之后（此时要剔除自己，收集到了，且还要将原数组中空、重复的这个属性值去掉）</p><p>因为要收集用户输入，所以一定是在失去焦点之后才做判断</p><h3 id="JS中的短路逻辑"><a href="#JS中的短路逻辑" class="headerlink" title="JS中的短路逻辑"></a>JS中的短路逻辑</h3><p>在 <code>imgUrl: (item.response &amp;&amp; item.response.data) || item.imgUrl</code> 这个代码中：</p><ul><li><strong>当 <code>item.response</code> 为真</strong>，并且 <code>item.response.data</code> 也存在时，表达式返回 <code>item.response.data</code> 的值。</li><li><strong>当 <code>item.response</code> 为假</strong>（如 <code>null</code> 或 <code>undefined</code>）时，整个 <code>item.response &amp;&amp; item.response.data</code> 表达式返回 <code>null</code> 或 <code>undefined</code>，此时通过 <code>||</code> 运算符，会使用右边的值 <code>item.imgUrl</code> 作为 <code>imgUrl</code> 的值。</li></ul><p>不能直接写成 <code>item.response.data || item.imgUrl</code> 的原因：</p><ol><li><strong>防止访问未定义属性的错误</strong>：<ul><li>如果 <code>item.response</code> 不存在（即为 <code>undefined</code> 或 <code>null</code>），那么 <code>item.response.data</code> 的访问会导致错误。</li><li><code>item.response &amp;&amp; item.response.data</code> 通过短路求值，首先检查 <code>item.response</code> 是否存在。如果不存在，就不会继续访问 <code>item.response.data</code>，从而避免了潜在的错误。</li></ul></li><li><strong>处理 <code>item.response</code> 为 <code>null</code> 或 <code>undefined</code> 的情况</strong>：<ul><li>使用 <code>item.response &amp;&amp; item.response.data</code> 可以优雅地处理 <code>item.response</code> 为 <code>null</code> 或 <code>undefined</code> 的情况，返回 <code>null</code> 或 <code>undefined</code>，然后通过 <code>||</code> 运算符使用 <code>item.imgUrl</code> 作为默认值。</li></ul></li></ol><p>注意接口定义ts数据类型要和老师完全一致</p><p>注意区分插槽传的参数$index（当前第几行）和v-for里面传的index（v-for遍历生成的索引）不是一个东西</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template #=&quot;&#123; row,$index &#125;&quot;&gt;<br>           &lt;el-tag closable v-for=&quot;(item, index) in row.spuSaleAttrValueList&quot; :key=&quot;item.id&quot;<br>             @close=&quot;closeTag(row, index)&quot; :style=&quot;&#123; marginRight: &#x27;6px&#x27; &#125;&quot;&gt;&#123;&#123; item.<br>               saleAttrValueName &#125;&#125;&lt;/el-tag&gt;<br> &lt;/template&gt;              <br></code></pre></td></tr></table></figure><p>注意新增SPU在清空上一次数据时，不仅要清空spuParams，还要清空其他用来收集SPU数据的变量，如imgList,attrList（最开始页面展示的就是这里面的数据）</p><h3 id="数组的reduce方法"><a href="#数组的reduce方法" class="headerlink" title="数组的reduce方法"></a>数组的reduce方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">array.<span class="hljs-title function_">reduce</span>(<span class="hljs-title function_">callback</span>(accumulator, currentValue, currentIndex, array), initialValue)<br></code></pre></td></tr></table></figure><h4 id="参数解释"><a href="#参数解释" class="headerlink" title="参数解释"></a>参数解释</h4><ol><li><strong>callback</strong>: 一个函数，用于执行每个数组元素的累加计算。它有四个参数：<ul><li><code>accumulator</code> (累计器)：上一次调用回调函数时返回的累积值，或者是初始值 <code>initialValue</code>（如果提供了的话）。</li><li><code>currentValue</code> (当前值)：数组中正在处理的当前元素。</li><li><code>currentIndex</code> (当前索引)：当前元素在数组中的索引。如果提供了 <code>initialValue</code>，则索引为 <code>0</code>，否则为 <code>1</code>。</li><li><code>array</code> (数组)：调用 <code>reduce</code> 方法的数组。</li></ul></li><li><strong>initialValue</strong> (可选): 作为第一次调用 <code>callback</code> 时 <code>accumulator</code> 的初始值。如果没有提供初始值，数组的第一个元素将被作为初始值，并从第二个元素开始执行回调函数。</li></ol><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><ul><li><code>reduce</code> 方法返回累计计算的结果。</li></ul><p>先开始把sku的attrId,valueId收集到spu的attr对象身上，最后使用Reduce方法把这个字段切割并封装成对象赋值给skuParams</p><h3 id="遍历取反的思想"><a href="#遍历取反的思想" class="headerlink" title="遍历取反的思想"></a>遍历取反的思想</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 设置默认图片</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">setDefaultImg</span>(<span class="hljs-params">row:any</span>) &#123;<br>  <span class="hljs-comment">// 勾选当前图片前的勾选框</span><br>  <span class="hljs-comment">// 先让所有图片不选，再勾选当前的（row）勾选框</span><br>  imgArr.<span class="hljs-property">value</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>    imgTable.<span class="hljs-property">value</span>.<span class="hljs-title function_">toggleRowSelection</span>(item, <span class="hljs-literal">false</span>)<br>  &#125;)<br>  imgTable.<span class="hljs-property">value</span>.<span class="hljs-title function_">toggleRowSelection</span>(row, <span class="hljs-literal">true</span>)<br><br>  skuParams.<span class="hljs-property">value</span>.<span class="hljs-property">skuDefaultImg</span> = row.<span class="hljs-property">imgUrl</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="7-用户管理模块"><a href="#7-用户管理模块" class="headerlink" title="7.用户管理模块"></a>7.用户管理模块</h1><p>使input两端不能输入空格，可使用v-model.trim（输入的内容中间输入的空格不会去除）</p><p>清楚上一次表单校验提示的错误信息，可以在抽屉打开时进行，利用element plus提供的事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;el-drawer v-model=&quot;showUserDrawer&quot; direction=&quot;rtl&quot; @open=&quot;formRef.clearValidate()&quot;&gt;<br></code></pre></td></tr></table></figure><p>trigger:’change’会有问题，点击取消，上次输入的信息变成空串也会触发</p><h3 id="表单校验中v-if和v-show的问题"><a href="#表单校验中v-if和v-show的问题" class="headerlink" title="表单校验中v-if和v-show的问题"></a>表单校验中v-if和v-show的问题</h3><p>发现表单校验一个神奇的地方，修改用户是只展示用户名和用户昵称的，添加用户的话还要输入用户密码，所以采用v-show&#x2F;v-if控制用户密码el-input显示与隐藏。但是用v-show的话密码输入框还是会挂载的，只是不展示，所以表单校验还会校验密码，就会出问题；但用v-if的话，密码输入框会被卸载，也就不会校验密码了</p><p>在 Vue 中，<code>v-if</code> 和 <code>v-show</code> 的工作机制不同，这也是为什么在你的示例中，使用 <code>v-if</code> 时不会触发校验，而使用 <code>v-show</code> 时会触发校验的原因。</p><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><ul><li><p>当使用 <code>v-if=&quot;!userParams.id&quot;</code> 时，如果 <code>userParams.id</code> 存在，表单项 <code>&lt;el-form-item&gt;</code> 及其子元素根本就不会被渲染到页面上，因此表单验证也不会触发。</p></li><li><p>当使用 <code>v-show=&quot;!userParams.id&quot;</code> 时，即使 <code>userParams.id</code> 存在，表单项 <code>&lt;el-form-item&gt;</code> 及其子元素仍然存在于 DOM 中，只是被隐藏了。因此，表单验证仍然会执行。</p></li><li><p>**使用 <code>v-if</code>**：适用于需要在特定条件下完全移除表单项及其验证的场景。</p></li><li><p>**使用 <code>v-show</code>**：适用于需要在表单项可见或不可见时，依然保持表单项及其验证的场景。</p></li></ul><p>每次修改完用户让浏览器强制刷新一次，因为可能修改的是自己的用户，那么就要重新获取用户信息并让用户重新登录（这里的逻辑写在了路由守卫里）</p><p>修改了login下的index.vue和permission.ts</p><p>注意展示和数据，可以将数据加工成需要的样子但可能比较复杂，展示时在模板里的js表达式也能得到相应效果</p><h3 id="数组api的灵活使用（map-reduce）"><a href="#数组api的灵活使用（map-reduce）" class="headerlink" title="数组api的灵活使用（map,reduce）"></a>数组api的灵活使用（map,reduce）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 第1种：使用reduce</span><br><span class="hljs-comment">// checkedRoleIds.value = checkedRoles.value.reduce((prev: any, next) =&gt; &#123;</span><br><span class="hljs-comment">//   prev.push(next.id)</span><br><span class="hljs-comment">//   return prev</span><br><span class="hljs-comment">// &#125;, [])</span><br><span class="hljs-comment">// 第2种，使用map</span><br>checkedRoleIds.<span class="hljs-property">value</span> = checkedRoles.<span class="hljs-property">value</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> item.<span class="hljs-property">id</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>注意删除加了气泡确认框后，把原来绑在delete按钮上的回调要换到气泡框的@confirm上</p><h3 id="搜索用户业务"><a href="#搜索用户业务" class="headerlink" title="搜索用户业务"></a>搜索用户业务</h3><p>在获取用户列表时将输入的用户名作为query参数传给接口，来获取相应用户</p><p>注意搜索后不仅要更新当前用户列表，还要更新新返回的数据条数，当然这个新增业务可以直接添加在获取用户列表中</p><h3 id="事件回调直接绑定异步函数可能出现问题"><a href="#事件回调直接绑定异步函数可能出现问题" class="headerlink" title="事件回调直接绑定异步函数可能出现问题"></a>事件回调直接绑定异步函数可能出现问题</h3><p>为何重置按钮直接绑定getUser请求会显示无网络呢，但把它写一个回调来调getUser却能正常使用？</p><p>当在渲染过程中引发了一个异步操作时，可能导致浏览器认为网络请求出错，尤其是在开发环境或某些浏览器中更容易出现这种情况</p><p>确保 <code>getUser</code> 的执行是在点击事件的处理过程中被调用，而不是直接作为事件处理函数返回值。这样做有几个好处：</p><ol><li><strong>避免 Vue 的异步错误处理问题</strong>：包装在回调中的异步函数调用，可以避免 Vue 在处理异步操作时可能产生的错误。</li><li><strong>更清晰的代码结构</strong>：回调函数使代码更易读，并且可以在回调中加入额外的逻辑（如条件判断、额外操作等）。</li></ol><p>可能的原因：</p><ul><li><strong>异步操作的返回值</strong>：直接绑定异步函数会将返回的 <code>Promise</code> 暴露给 Vue 的事件处理机制，可能引发不可预见的行为。</li><li><strong>生命周期冲突</strong>：Vue 可能在某些时候因组件状态或渲染的原因，无法正确处理直接绑定的异步函数</li></ul><p>想要el-input组件在按下回车后调用搜索的回调，需要在el-form上阻止按下enter（提交表单）的默认行为(会刷新页面)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;el-form ref=&quot;formRef&quot; label-width=&quot;auto&quot; inline @submit.prevent=&quot;&quot;&gt;<br>    &lt;el-input placeholder=&quot;请输入用户姓名&quot; v-model=&quot;searchName&quot; @keyup.enter=&quot;searchUser&quot; /&gt;<br></code></pre></td></tr></table></figure><h3 id="分配权限"><a href="#分配权限" class="headerlink" title="分配权限"></a>分配权限</h3><p>勾选菜单其实只要勾选叶子节点就可以了，利用递归（把这个业务封装成一个函数，然后在函数中再次调用，即为递归）</p><p>reduce在递归中的使用？prev对累加递归调用函数的结果未可知，感觉不是一个prev了啊，每次的初始值如果赋空值的话结果根本保存不下来的，所以初始的空数组要在函数中传，而递归中传的是prev</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 收集被选中的权限的ID</span><br><span class="hljs-comment">// // 法一：用foreach</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getCheckedMenu</span>(<span class="hljs-params">menuList: Menu[], initArr: number[]</span>) &#123;<br>  menuList.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (!item.<span class="hljs-property">children</span> || item.<span class="hljs-property">children</span>.<span class="hljs-property">length</span> &lt;= <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-keyword">if</span> (item.<span class="hljs-property">select</span>) &#123;<br>        initArr.<span class="hljs-title function_">push</span>((item.<span class="hljs-property">id</span> <span class="hljs-keyword">as</span> number))<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-title function_">getCheckedMenu</span>(item.<span class="hljs-property">children</span>, initArr)<br>    &#125;<br>  &#125;)<br>  <span class="hljs-keyword">return</span> initArr<br>&#125;<br><span class="hljs-comment">// 法二：用reduce</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getCheckedMenu</span>(<span class="hljs-params">menuList: Menu[], initArr: number[]</span>) &#123;<br>  <span class="hljs-keyword">return</span> menuList.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">prev: number[], next</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 检查是否为叶子节点（没有子节点）</span><br>    <span class="hljs-keyword">if</span> ((!next.<span class="hljs-property">children</span> || next.<span class="hljs-property">children</span>.<span class="hljs-property">length</span> &lt;= <span class="hljs-number">0</span>)) &#123;<br>      <span class="hljs-keyword">if</span> (next.<span class="hljs-property">select</span>) &#123;<br>        prev.<span class="hljs-title function_">push</span>(next.<span class="hljs-property">id</span> <span class="hljs-keyword">as</span> number);<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 递归处理子节点</span><br>      <span class="hljs-title function_">getCheckedMenu</span>(next.<span class="hljs-property">children</span>, prev);<br>    &#125;<br>    <span class="hljs-keyword">return</span> prev;<br>  &#125;, initArr);<br>&#125;<br></code></pre></td></tr></table></figure><p>初始时选中的是从数据中过滤出来的，后续被选中的权限要用计算得到</p><p>注意要分配角色、权限也需要拿到id，也要Object.assign()合并params和row</p><p>注意搜索和重置清空搜索框的时机</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 搜索按钮回调</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">searchRole</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title function_">getRole</span>()<br>  <span class="hljs-comment">// 清空搜索关键字</span><br>  keyword.<span class="hljs-property">value</span> = <span class="hljs-string">&#x27;&#x27;</span><br>&#125;<br><span class="hljs-comment">// 重置按钮回调</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">refresh</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 清空搜索关键字</span><br>  keyword.<span class="hljs-property">value</span> = <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-title function_">getRole</span>()<br>&#125;<br></code></pre></td></tr></table></figure><p>注意模板里用ref不用.value</p><p>el-table的树形，默认展开使用expand-row-keys要是字符串类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;el-table :data=&quot;permissionList&quot; style=&quot;width: 100%; margin-bottom: 20px&quot; row-key=&quot;id&quot; border :expand-row-keys=&quot;[&#x27;1&#x27;]&quot;&gt;<br></code></pre></td></tr></table></figure><p>注意对话框等结构不要写到表格的结构中</p><p>注意追加新的菜单，还要收集pid和level，才能知道是给谁追加几级菜单</p><p>权限管理-&gt;需设置异步路由（需满足条件才能访问），原来的全是常量路由</p><p>popover里面嵌套颜色选择器color-picker会出现的问题，颜色选择器上的事件会冒泡到popover上，而且stop没有用，可能因为是原生事件？解决方法：1.手动控制popover的显示与隐藏，其上的visible属性。2.或者在取色器上增加一个:teleported&#x3D;”false”</p><p>(解释：</p><ul><li><strong>默认 <code>teleport</code> 行为</strong>：<code>Element Plus</code> 中的 <code>el-popover</code> 和 <code>el-color-picker</code> 都使用了 <code>teleport</code> 技术，默认会将弹出的内容（如颜色选择器）移动到 <code>body</code> 的末尾。这样可以避免由于 z-index 或父元素样式导致的显示问题。</li><li><strong>事件处理问题</strong>：当弹出的内容被 <code>teleport</code> 移动到 <code>body</code> 外部时，事件冒泡和触发机制可能不如预期，尤其是点击时。因为点击颜色选择器时，弹出层和触发层在不同的 DOM 层次中，事件可能没有被正确捕获和处理。</li><li>**<code>teleported=&quot;false&quot;</code>**：当你将 <code>teleported</code> 设置为 <code>false</code> 时，弹出层内容会被渲染在原本组件的 DOM 结构内部，不再移到 <code>body</code> 外。这样可以确保事件冒泡和 DOM 层次的操作保持一致，从而避免 <code>popover</code> 弹出框由于错误的事件处理而消失。</li></ul><p>因此，通过禁用 <code>teleport</code> 功能，所有的元素都保持在相同的 DOM 层次中，这就避免了因为跨层事件冒泡带来的问题。)</p><h1 id="8-数据大屏"><a href="#8-数据大屏" class="headerlink" title="8.数据大屏"></a>8.数据大屏</h1><p>自适应问题：</p><p>vw,vh解决，思路简单，但计算麻烦，可同rem一起使用</p><p>scale缩放解决</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.content</span> &#123;<br>  <span class="hljs-comment">/* #region 核心：将content的变换原点变为父元素几何中心 */</span><br>  <span class="hljs-attribute">position</span>: fixed;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">top</span>:<span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">transform-origin</span>: left top;<br>  <span class="hljs-comment">/* #endregion */</span><br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">1920px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">1080px</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ddd</span>;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">1.1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>再用js确定缩放倍数，并将content再位移到原来的位置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 得到content</span><br>   <span class="hljs-keyword">let</span> content = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.content&#x27;</span>)<br>   <span class="hljs-comment">// content缩放</span><br>   content.<span class="hljs-property">style</span>.<span class="hljs-property">transform</span> = <span class="hljs-string">`scale(<span class="hljs-subst">$&#123;getScale()&#125;</span>) translate(-50%,-50%)`</span><br>   <span class="hljs-comment">// 得到缩放倍数</span><br>   <span class="hljs-keyword">function</span> <span class="hljs-title function_">getScale</span>(<span class="hljs-params">w = <span class="hljs-number">1920</span>, h = <span class="hljs-number">1080</span></span>) &#123;<br>     <span class="hljs-keyword">let</span> ww = <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span> / w<br>     <span class="hljs-keyword">let</span> wh = <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span> / h<br>     <span class="hljs-keyword">return</span> ww &lt; wh ? ww : wh<br>   &#125;<br>   <span class="hljs-variable language_">window</span>.<span class="hljs-property">onresize</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>     <span class="hljs-comment">// content缩放</span><br>     content.<span class="hljs-property">style</span>.<span class="hljs-property">transform</span> = <span class="hljs-string">`scale(<span class="hljs-subst">$&#123;getScale()&#125;</span>) translate(-50%,-50%)`</span><br>   &#125;<br></code></pre></td></tr></table></figure><p>reduce有时会搞不清prev变成了什么，这时直接用foreach就好.注意这里的逻辑（这里的要保持父子关系，即不能把children过滤出来和父路由同级，不然就变成下图这样了，但是也要过滤掉不能访问的子路由）和上面勾选菜单（只要最下面的叶子节点判断勾选就好了，不用管以上的节点）的处理不一样</p><p><img src="/2024/09/24/%E7%A1%85%E8%B0%B7%E7%94%84%E9%80%89%E8%BF%90%E8%90%A5%E5%B9%B3%E5%8F%B0/img/image-20240914112843963.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 从异步路由中过滤出用户可以访问的路由</span><br><span class="hljs-comment">// 注意每次使用这个函数要对asyncRoutes进行深拷贝，否则会修改元数据</span><br> <span class="hljs-keyword">function</span> <span class="hljs-title function_">filterAsyncRoutes</span>(<span class="hljs-params">asyncRoutes: RouteRecordRaw[], routeNameArr: string[]</span>) &#123;<br>   <span class="hljs-keyword">return</span> asyncRoutes.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>     <span class="hljs-comment">// 有孩子</span><br>     <span class="hljs-keyword">if</span> (routeNameArr.<span class="hljs-title function_">includes</span>((item.<span class="hljs-property">name</span> <span class="hljs-keyword">as</span> string))) &#123;<br>       <span class="hljs-comment">// 路由名字匹配</span><br>       <span class="hljs-keyword">if</span> (item.<span class="hljs-property">children</span> &amp;&amp; item.<span class="hljs-property">children</span>.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;<br>         <span class="hljs-comment">// 如果有孩子</span><br>         <span class="hljs-comment">// 要继续过滤出匹配的孩子</span><br>         item.<span class="hljs-property">children</span> = <span class="hljs-title function_">filterAsyncRoutes</span>(item.<span class="hljs-property">children</span>, routeNameArr)<br>       &#125;<br>       <span class="hljs-comment">// 没有孩子则直接返回路由</span><br>       <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>     &#125;<br>   &#125;);<br> &#125;<br></code></pre></td></tr></table></figure><p>以上过滤出来的异步路由只是能够展示出来，但还没有注册</p><p>动态追加了异步路由和任意路由后，异步路由加载白屏问题：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 获取用户信息</span><br><span class="hljs-keyword">await</span> <span class="hljs-title function_">getUserInfo</span>()<br><span class="hljs-comment">// 如果加载异步路由直接放行会出现白屏，等待路由组件渲染完毕再放行</span><br><span class="hljs-title function_">next</span>(&#123;...to&#125;)<br></code></pre></td></tr></table></figure><p>注意页面需要倒计时效果，如果是用延时调用，需要在模板里调用函数获得时间，这样就可以数据更新-》模板重新渲染-》重新调用该函数-》重新执行延时调用（从而实现与定时器一样的效果）</p><p>设置按钮权限可以用自定义全局指令，只用引用一次仓库里的按钮数据</p><p>定义全局指令，要定义在函数里，然后在main.ts中引入就会执行</p><p>这里为什么要这样写？在 Axios 中，<code>DELETE</code> 请求的配置对象需要显式地将请求体数据放在 <code>data</code> 属性中。通过 <code>&#123; data: idList &#125;</code>，你明确告诉 Axios 在发送 <code>DELETE</code> 请求时，将 <code>idList</code> 作为请求体的一部分传递到服务器端。</p><p><strong><code>data</code> 属性</strong>：用来指定请求体内容，类似于 <code>POST</code> 和 <code>PUT</code> 请求中常见的行为。</p><p><strong>传递数据</strong>：这样后端能够接收到你指定的 <code>idList</code>，处理相应的批量删除操作。</p><p>在 Axios 中发送 <code>DELETE</code> 请求时，通常无法像 <code>POST</code> 请求那样直接通过第二个参数传递请求体的数据。<code>DELETE</code> 方法的规范更倾向于使用 URL 路径或查询字符串传递参数，而不像 <code>POST</code> 请求有专门的请求体用于发送数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 批量删除用户方法</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">reqBatchRemoveUser</span>(<span class="hljs-params">idList: number[]</span>) &#123;<br>  <span class="hljs-keyword">return</span> request.<span class="hljs-title function_">delete</span>(<span class="hljs-variable constant_">API</span>.<span class="hljs-property">BATCHREMOVEUSERS_URL</span>, &#123; <span class="hljs-attr">data</span>: idList &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>改变页码要在请求之前，因为当前页码改变会触发current-change事件所以传入了当前页码导致不会返回首页</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 获取已有SKU</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getSku</span>(<span class="hljs-params">pager: number = <span class="hljs-number">1</span></span>) &#123;<br>  currentPage.<span class="hljs-property">value</span> = pager<br>  <span class="hljs-comment">// 发请求</span><br>  <span class="hljs-keyword">let</span> <span class="hljs-attr">result</span>: <span class="hljs-title class_">SkuResponseData</span> = <span class="hljs-keyword">await</span> <span class="hljs-title function_">reqSku</span>(currentPage.<span class="hljs-property">value</span>, pageSize.<span class="hljs-property">value</span>)<br>  <span class="hljs-comment">// 存储已有SKU</span><br>  skuList.<span class="hljs-property">value</span> = result.<span class="hljs-property">data</span>.<span class="hljs-property">records</span><br>  <span class="hljs-comment">// 存储数据总条数</span><br>  total.<span class="hljs-property">value</span> = result.<span class="hljs-property">data</span>.<span class="hljs-property">total</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Vue3</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学习Vue3</title>
    <link href="/2024/09/24/%E5%AD%A6%E4%B9%A0Vue3/"/>
    <url>/2024/09/24/%E5%AD%A6%E4%B9%A0Vue3/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Vue3简介"><a href="#1-Vue3简介" class="headerlink" title="1. Vue3简介"></a>1. Vue3简介</h1><ul><li><p>2020年9月18日，<code>Vue.js</code>发布版<code>3.0</code>版本，代号：<code>One Piece</code>（n</p></li><li><p>经历了：<a href="https://github.com/vuejs/core/commits/main">4800+次提交</a>、<a href="https://github.com/vuejs/rfcs/tree/master/active-rfcs">40+个RFC</a>、<a href="https://github.com/vuejs/vue-next/pulls?q=is:pr+is:merged+-author:app/dependabot-preview+">600+次PR</a>、<a href="https://github.com/vuejs/core/graphs/contributors">300+贡献者</a></p></li><li><p>官方发版地址：<a href="https://github.com/vuejs/core/releases/tag/v3.0.0">Release v3.0.0 One Piece · vuejs&#x2F;core</a></p></li><li><p>截止2023年10月，最新的公开版本为：<code>3.3.4</code></p></li></ul><h2 id="1-1-性能的提升"><a href="#1-1-性能的提升" class="headerlink" title="1.1. 性能的提升"></a>1.1. 性能的提升</h2><ul><li><p>打包大小减少<code>41%</code>。</p></li><li><p>初次渲染快<code>55%</code>, 更新渲染快<code>133%</code>。</p></li><li><p>内存减少<code>54%</code>。</p></li></ul><h2 id="1-2-源码的升级"><a href="#1-2-源码的升级" class="headerlink" title="1.2. 源码的升级"></a>1.2. 源码的升级</h2><ul><li><p>使用<code>Proxy</code>代替<code>defineProperty</code>实现响应式。</p></li><li><p>重写虚拟<code>DOM</code>的实现和<code>Tree-Shaking</code>。</p></li></ul><h2 id="1-3-拥抱TypeScript"><a href="#1-3-拥抱TypeScript" class="headerlink" title="1.3. 拥抱TypeScript"></a>1.3. 拥抱TypeScript</h2><ul><li><code>Vue3</code>可以更好的支持<code>TypeScript</code>。</li></ul><h2 id="1-4-新的特性"><a href="#1-4-新的特性" class="headerlink" title="1.4. 新的特性"></a>1.4. 新的特性</h2><ol><li><p><code>Composition API</code>（组合<code>API</code>）：</p><ul><li><p><code>setup</code></p></li><li><p><code>ref</code>与<code>reactive</code></p></li><li><p><code>computed</code>与<code>watch</code></p><p>……</p></li></ul></li><li><p>新的内置组件：</p><ul><li><p><code>Fragment</code></p></li><li><p><code>Teleport</code></p></li><li><p><code>Suspense</code></p><p>……</p></li></ul></li><li><p>其他改变：</p><ul><li><p>新的生命周期钩子</p></li><li><p><code>data</code> 选项应始终被声明为一个函数</p></li><li><p>移除<code>keyCode</code>支持作为<code> v-on</code> 的修饰符</p><p>……</p></li></ul></li></ol><h1 id="2-创建Vue3工程"><a href="#2-创建Vue3工程" class="headerlink" title="2. 创建Vue3工程"></a>2. 创建Vue3工程</h1><h2 id="2-1-基于-vue-cli-创建"><a href="#2-1-基于-vue-cli-创建" class="headerlink" title="2.1. 基于 vue-cli 创建"></a>2.1. 基于 vue-cli 创建</h2><p>点击查看<a href="https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create">官方文档</a></p><blockquote><p>备注：目前<code>vue-cli</code>已处于维护模式，官方推荐基于 <code>Vite</code> 创建项目。</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment">## 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上</span><br>vue <span class="hljs-literal">--version</span><br><br><span class="hljs-comment">## 安装或者升级你的@vue/cli </span><br>npm install <span class="hljs-literal">-g</span> @vue/<span class="hljs-built_in">cli</span><br><br><span class="hljs-comment">## 执行创建命令</span><br>vue create vue_test<br><br><span class="hljs-comment">##  随后选择3.x</span><br><span class="hljs-comment">##  Choose a version of Vue.js that you want to start the project with (Use arrow keys)</span><br><span class="hljs-comment">##  &gt; 3.x</span><br><span class="hljs-comment">##    2.x</span><br><br><span class="hljs-comment">## 启动</span><br><span class="hljs-built_in">cd</span> vue_test<br>npm run serve<br></code></pre></td></tr></table></figure><hr><h2 id="2-2-基于-vite-创建-推荐"><a href="#2-2-基于-vite-创建-推荐" class="headerlink" title="2.2. 基于 vite 创建 (推荐)"></a>2.2. 基于 vite 创建 (推荐)</h2><p><code>vite</code> 是新一代前端构建工具，官网地址：<a href="https://vitejs.cn/">https://vitejs.cn</a>，<code>vite</code>的优势如下：</p><ul><li>轻量快速的热重载（<code>HMR</code>），能实现极速的服务启动。</li><li>对 <code>TypeScript</code>、<code>JSX</code>、<code>CSS</code> 等支持开箱即用。</li><li>真正的按需编译，不再等待整个应用编译完成。</li><li><code>webpack</code>构建 与 <code>vite</code>构建对比图如下：<br><img src="/2024/09/24/%E5%AD%A6%E4%B9%A0Vue3/img/1683167182037-71c78210-8217-4e7d-9a83-e463035efbbe.png"><br><img src="/2024/09/24/%E5%AD%A6%E4%B9%A0Vue3/img/1683167204081-582dc237-72bc-499e-9589-2cdfd452e62f.png"></li></ul><ul><li>具体操作如下（点击查看<a href="https://cn.vuejs.org/guide/quick-start.html#creating-a-vue-application">官方文档</a>）</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment">## 1.创建命令</span><br>npm create vue@latest<br><br><span class="hljs-comment">## 2.具体配置</span><br><span class="hljs-comment">## 配置项目名称</span><br>√ Project name: vue3_test<br><span class="hljs-comment">## 是否添加TypeScript支持</span><br>√ Add TypeScript?  Yes<br><span class="hljs-comment">## 是否添加JSX支持</span><br>√ Add JSX Support?  No<br><span class="hljs-comment">## 是否添加路由环境</span><br>√ Add Vue Router <span class="hljs-keyword">for</span> Single Page Application development?  No<br><span class="hljs-comment">## 是否添加pinia环境</span><br>√ Add Pinia <span class="hljs-keyword">for</span> state management?  No<br><span class="hljs-comment">## 是否添加单元测试</span><br>√ Add Vitest <span class="hljs-keyword">for</span> Unit Testing?  No<br><span class="hljs-comment">## 是否添加端到端测试方案</span><br>√ Add an <span class="hljs-keyword">End</span><span class="hljs-literal">-to-End</span> Testing Solution? » No<br><span class="hljs-comment">## 是否添加ESLint语法检查</span><br>√ Add ESLint <span class="hljs-keyword">for</span> code quality?  Yes<br><span class="hljs-comment">## 是否添加Prettiert代码格式化</span><br>√ Add Prettier <span class="hljs-keyword">for</span> code formatting?  No<br></code></pre></td></tr></table></figure><p>编写一个App组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;app&quot;&gt;<br>    &lt;h1&gt;你好啊！&lt;/h1&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script lang=&quot;ts&quot;&gt;<br>  export default &#123;<br>    name:&#x27;App&#x27; //组件名<br>  &#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>  .app &#123;<br>    background-color: #ddd;<br>    box-shadow: 0 0 10px;<br>    border-radius: 10px;<br>    padding: 20px;<br>  &#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li><code>Vite</code> 项目中，<code>index.html</code> 是项目的入口文件，在项目最外层。</li><li>加载<code>index.html</code>后，<code>Vite</code> 解析 <code>&lt;script type=&quot;module&quot; src=&quot;xxx&quot;&gt;</code> 指向的<code>JavaScript</code>。</li><li><code>Vue3</code>**中是通过 **<code>createApp</code> 函数创建一个应用实例。</li></ul><h2 id="2-3-一个简单的效果"><a href="#2-3-一个简单的效果" class="headerlink" title="2.3. 一个简单的效果"></a>2.3. 一个简单的效果</h2><p><code>Vue3</code>向下兼容<code>Vue2</code>语法，且**<code>Vue3</code>中的模板中可以没有根标签**</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;person&quot;&gt;<br>    &lt;h2&gt;姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;<br>    &lt;h2&gt;年龄：&#123;&#123;age&#125;&#125;&lt;/h2&gt;<br>    &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;<br>    &lt;button @click=&quot;changeAge&quot;&gt;年龄+1&lt;/button&gt;<br>    &lt;button @click=&quot;showTel&quot;&gt;点我查看联系方式&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script lang=&quot;ts&quot;&gt;<br>  export default &#123;<br>    name:&#x27;App&#x27;,<br>    data() &#123;<br>      return &#123;<br>        name:&#x27;张三&#x27;,<br>        age:18,<br>        tel:&#x27;13888888888&#x27;<br>      &#125;<br>    &#125;,<br>    methods:&#123;<br>      changeName()&#123;<br>        this.name = &#x27;zhang-san&#x27;<br>      &#125;,<br>      changeAge()&#123;<br>        this.age += 1<br>      &#125;,<br>      showTel()&#123;<br>        alert(this.tel)<br>      &#125;<br>    &#125;,<br>  &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h1 id="3-Vue3核心语法"><a href="#3-Vue3核心语法" class="headerlink" title="3. Vue3核心语法"></a>3. Vue3核心语法</h1><h2 id="3-1-OptionsAPI-与-CompositionAPI"><a href="#3-1-OptionsAPI-与-CompositionAPI" class="headerlink" title="3.1.  OptionsAPI 与 CompositionAPI"></a>3.1.  OptionsAPI 与 CompositionAPI</h2><ul><li><code>Vue2</code>的<code>API</code>设计是<code>Options</code>（配置）风格的。</li><li><code>Vue3</code>的<code>API</code>设计是<code>Composition</code>（组合）风格的。</li></ul><h3 id="Options-API-的弊端"><a href="#Options-API-的弊端" class="headerlink" title="Options API 的弊端"></a>Options API 的弊端</h3><p><code>Options</code>类型的 <code>API</code>，数据、方法、计算属性等，是分散在：<code>data</code>、<code>methods</code>、<code>computed</code>中的，若想新增或者修改一个需求，就需要分别修改：<code>data</code>、<code>methods</code>、<code>computed</code>，不便于维护和复用。</p><h3 id="Composition-API-的优势"><a href="#Composition-API-的优势" class="headerlink" title="Composition API 的优势"></a>Composition API 的优势</h3><p>可以用函数的方式，更加优雅的组织代码，让相关功能的代码更加有序的组织在一起。</p><h2 id="3-2-拉开序幕的-setup"><a href="#3-2-拉开序幕的-setup" class="headerlink" title="3.2. 拉开序幕的 setup"></a>3.2. 拉开序幕的 setup</h2><h3 id="setup-概述"><a href="#setup-概述" class="headerlink" title="setup 概述"></a>setup 概述</h3><p><code>setup</code>是<code>Vue3</code>中一个新的配置项，值是一个函数，它是 <code>Composition API</code> <strong>“表演的舞台</strong>_<strong>”</strong>_，组件中所用到的：数据、方法、计算属性、监视……等等，均配置在<code>setup</code>中。</p><p>特点如下：</p><ul><li><code>setup</code>函数返回的对象中的内容，可直接在模板中使用。</li><li><code>setup</code>中访问<code>this</code>是<code>undefined</code>，Vue3中弱化了this。</li><li><code>setup</code>函数会在<code>beforeCreate</code>之前调用，它是“领先”所有钩子执行的。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;person&quot;&gt;<br>    &lt;h2&gt;姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;<br>    &lt;h2&gt;年龄：&#123;&#123;age&#125;&#125;&lt;/h2&gt;<br>    &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;<br>    &lt;button @click=&quot;changeAge&quot;&gt;年龄+1&lt;/button&gt;<br>    &lt;button @click=&quot;showTel&quot;&gt;点我查看联系方式&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script lang=&quot;ts&quot;&gt;<br>  export default &#123;<br>    name:&#x27;Person&#x27;,<br>    setup()&#123;<br>      // 数据，原来写在data中（注意：此时的name、age、tel数据都不是响应式数据）<br>      let name = &#x27;张三&#x27;<br>      let age = 18<br>      let tel = &#x27;13888888888&#x27;<br><br>      // 方法，原来写在methods中<br>      function changeName()&#123;<br>        name = &#x27;zhang-san&#x27; //注意：此时这么修改name页面是不变化的<br>        console.log(name)<br>      &#125;<br>      function changeAge()&#123;<br>        age += 1 //注意：此时这么修改age页面是不变化的<br>        console.log(age)<br>      &#125;<br>      function showTel()&#123;<br>        alert(tel)<br>      &#125;<br><br>      // 返回一个对象，对象中的内容，模板中可以直接使用<br>      return &#123;name,age,tel,changeName,changeAge,showTel&#125;<br>    &#125;<br>  &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="setup-的返回值"><a href="#setup-的返回值" class="headerlink" title="setup 的返回值"></a>setup 的返回值</h3><ul><li>若返回一个<strong>对象</strong>：则对象中的：属性、方法等，在模板中均可以直接使用<strong>（重点关注）。</strong></li><li>若返回一个<strong>函数</strong>：则可以自定义渲染内容，代码如下：</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function">()=&gt;</span> <span class="hljs-string">&#x27;你好啊！&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="setup-与-Options-API-的关系"><a href="#setup-与-Options-API-的关系" class="headerlink" title="setup 与 Options API 的关系"></a>setup 与 Options API 的关系</h3><ul><li><code>Vue2</code> 的配置（<code>data</code>、<code>methos</code>……）中<strong>可以访问到</strong> <code>setup</code>中的属性、方法。</li><li>但在<code>setup</code>中<strong>不能访问到</strong><code>Vue2</code>的配置（<code>data</code>、<code>methos</code>……）。</li><li>如果与<code>Vue2</code>冲突，则<code>setup</code>优先。</li></ul><h3 id="setup-语法糖"><a href="#setup-语法糖" class="headerlink" title="setup 语法糖"></a>setup 语法糖</h3><p><code>setup</code>函数有一个语法糖，这个语法糖，可以让我们把<code>setup</code>独立出去，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;person&quot;&gt;<br>    &lt;h2&gt;姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;<br>    &lt;h2&gt;年龄：&#123;&#123;age&#125;&#125;&lt;/h2&gt;<br>    &lt;button @click=&quot;changName&quot;&gt;修改名字&lt;/button&gt;<br>    &lt;button @click=&quot;changAge&quot;&gt;年龄+1&lt;/button&gt;<br>    &lt;button @click=&quot;showTel&quot;&gt;点我查看联系方式&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script lang=&quot;ts&quot;&gt;<br>  export default &#123;<br>    name:&#x27;Person&#x27;,<br>  &#125;<br>&lt;/script&gt;<br><br>&lt;!-- 下面的写法是setup语法糖 --&gt;<br>&lt;script setup lang=&quot;ts&quot;&gt;<br>  console.log(this) //undefined<br>  <br>  // 数据（注意：此时的name、age、tel都不是响应式数据）<br>  let name = &#x27;张三&#x27;<br>  let age = 18<br>  let tel = &#x27;13888888888&#x27;<br><br>  // 方法<br>  function changName()&#123;<br>    name = &#x27;李四&#x27;//注意：此时这么修改name页面是不变化的<br>  &#125;<br>  function changAge()&#123;<br>    console.log(age)<br>    age += 1 //注意：此时这么修改age页面是不变化的<br>  &#125;<br>  function showTel()&#123;<br>    alert(tel)<br>  &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>扩展：上述代码，还需要编写一个不写<code>setup</code>的<code>script</code>标签，去指定组件名字，比较麻烦，我们可以借助<code>vite</code>中的插件简化</p><ol><li>第一步：<code>npm i vite-plugin-vue-setup-extend -D</code></li><li>第二步：<code>vite.config.ts</code></li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; defineConfig &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vite&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">VueSetupExtend</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vite-plugin-vue-setup-extend&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>(&#123;<br>  <span class="hljs-attr">plugins</span>: [ <span class="hljs-title class_">VueSetupExtend</span>() ]<br>&#125;)<br></code></pre></td></tr></table></figure><ol start="3"><li>第三步：<code>&lt;script setup lang=&quot;ts&quot; name=&quot;Person&quot;&gt;</code></li></ol><h2 id="3-3-ref-创建：基本类型的响应式数据"><a href="#3-3-ref-创建：基本类型的响应式数据" class="headerlink" title="3.3. ref 创建：基本类型的响应式数据"></a>3.3. ref 创建：基本类型的响应式数据</h2><ul><li><strong>作用：</strong>定义响应式变量。</li><li><strong>语法：</strong><code>let xxx = ref(初始值)</code>。</li><li><strong>返回值：</strong>一个<code>RefImpl</code>的实例对象，简称<code>ref对象</code>或<code>ref</code>，<code>ref</code>对象的<code>value</code><strong>属性是响应式的</strong>。</li><li><strong>注意点：</strong><ul><li><code>JS</code>中操作数据需要：<code>xxx.value</code>，但模板中不需要<code>.value</code>，直接使用即可。</li><li>对于<code>let name = ref(&#39;张三&#39;)</code>来说，<code>name</code>不是响应式的，<code>name.value</code>是响应式的。</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;person&quot;&gt;<br>    &lt;h2&gt;姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;<br>    &lt;h2&gt;年龄：&#123;&#123;age&#125;&#125;&lt;/h2&gt;<br>    &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;<br>    &lt;button @click=&quot;changeAge&quot;&gt;年龄+1&lt;/button&gt;<br>    &lt;button @click=&quot;showTel&quot;&gt;点我查看联系方式&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot; name=&quot;Person&quot;&gt;<br>  import &#123;ref&#125; from &#x27;vue&#x27;<br>  // name和age是一个RefImpl的实例对象，简称ref对象，它们的value属性是响应式的。<br>  let name = ref(&#x27;张三&#x27;)<br>  let age = ref(18)<br>  // tel就是一个普通的字符串，不是响应式的<br>  let tel = &#x27;13888888888&#x27;<br><br>  function changeName()&#123;<br>    // JS中操作ref对象时候需要.value<br>    name.value = &#x27;李四&#x27;<br>    console.log(name.value)<br><br>    // 注意：name不是响应式的，name.value是响应式的，所以如下代码并不会引起页面的更新。<br>    // name = ref(&#x27;zhang-san&#x27;)<br>  &#125;<br>  function changeAge()&#123;<br>    // JS中操作ref对象时候需要.value<br>    age.value += 1 <br>    console.log(age.value)<br>  &#125;<br>  function showTel()&#123;<br>    alert(tel)<br>  &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="3-4-reactive-创建：对象类型的响应式数据"><a href="#3-4-reactive-创建：对象类型的响应式数据" class="headerlink" title="3.4. reactive 创建：对象类型的响应式数据"></a>3.4. reactive 创建：对象类型的响应式数据</h2><ul><li><strong>作用：</strong>定义一个<strong>响应式对象</strong>（基本类型不要用它，要用<code>ref</code>，否则报错）</li><li><strong>语法：</strong><code>let 响应式对象= reactive(源对象)</code>。</li><li><strong>返回值：</strong>一个<code>Proxy</code>的实例对象，简称：响应式对象。</li><li><strong>注意点：</strong><code>reactive</code>定义的响应式数据是“深层次”的。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;person&quot;&gt;<br>    &lt;h2&gt;汽车信息：一台&#123;&#123; car.brand &#125;&#125;汽车，价值&#123;&#123; car.price &#125;&#125;万&lt;/h2&gt;<br>    &lt;h2&gt;游戏列表：&lt;/h2&gt;<br>    &lt;ul&gt;<br>      &lt;li v-for=&quot;g in games&quot; :key=&quot;g.id&quot;&gt;&#123;&#123; g.name &#125;&#125;&lt;/li&gt;<br>    &lt;/ul&gt;<br>    &lt;h2&gt;测试：&#123;&#123;obj.a.b.c.d&#125;&#125;&lt;/h2&gt;<br>    &lt;button @click=&quot;changeCarPrice&quot;&gt;修改汽车价格&lt;/button&gt;<br>    &lt;button @click=&quot;changeFirstGame&quot;&gt;修改第一游戏&lt;/button&gt;<br>    &lt;button @click=&quot;test&quot;&gt;测试&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;<br>import &#123; reactive &#125; from &#x27;vue&#x27;<br><br>// 数据<br>let car = reactive(&#123; brand: &#x27;奔驰&#x27;, price: 100 &#125;)<br>let games = reactive([<br>  &#123; id: &#x27;ahsgdyfa01&#x27;, name: &#x27;英雄联盟&#x27; &#125;,<br>  &#123; id: &#x27;ahsgdyfa02&#x27;, name: &#x27;王者荣耀&#x27; &#125;,<br>  &#123; id: &#x27;ahsgdyfa03&#x27;, name: &#x27;原神&#x27; &#125;<br>])<br>let obj = reactive(&#123;<br>  a:&#123;<br>    b:&#123;<br>      c:&#123;<br>        d:666<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;)<br><br>function changeCarPrice() &#123;<br>  car.price += 10<br>&#125;<br>function changeFirstGame() &#123;<br>  games[0].name = &#x27;流星蝴蝶剑&#x27;<br>&#125;<br>function test()&#123;<br>  obj.a.b.c.d = 999<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="3-5-ref-创建：对象类型的响应式数据"><a href="#3-5-ref-创建：对象类型的响应式数据" class="headerlink" title="3.5. ref 创建：对象类型的响应式数据"></a>3.5. ref 创建：对象类型的响应式数据</h2><ul><li>其实<code>ref</code>接收的数据可以是：<strong>基本类型</strong>、<strong>对象类型</strong>。</li><li>若<code>ref</code>接收的是对象类型，内部其实也是调用了<code>reactive</code>函数。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;person&quot;&gt;<br>    &lt;h2&gt;汽车信息：一台&#123;&#123; car.brand &#125;&#125;汽车，价值&#123;&#123; car.price &#125;&#125;万&lt;/h2&gt;<br>    &lt;h2&gt;游戏列表：&lt;/h2&gt;<br>    &lt;ul&gt;<br>      &lt;li v-for=&quot;g in games&quot; :key=&quot;g.id&quot;&gt;&#123;&#123; g.name &#125;&#125;&lt;/li&gt;<br>    &lt;/ul&gt;<br>    &lt;h2&gt;测试：&#123;&#123;obj.a.b.c.d&#125;&#125;&lt;/h2&gt;<br>    &lt;button @click=&quot;changeCarPrice&quot;&gt;修改汽车价格&lt;/button&gt;<br>    &lt;button @click=&quot;changeFirstGame&quot;&gt;修改第一游戏&lt;/button&gt;<br>    &lt;button @click=&quot;test&quot;&gt;测试&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;<br>import &#123; ref &#125; from &#x27;vue&#x27;<br><br>// 数据<br>let car = ref(&#123; brand: &#x27;奔驰&#x27;, price: 100 &#125;)<br>let games = ref([<br>  &#123; id: &#x27;ahsgdyfa01&#x27;, name: &#x27;英雄联盟&#x27; &#125;,<br>  &#123; id: &#x27;ahsgdyfa02&#x27;, name: &#x27;王者荣耀&#x27; &#125;,<br>  &#123; id: &#x27;ahsgdyfa03&#x27;, name: &#x27;原神&#x27; &#125;<br>])<br>let obj = ref(&#123;<br>  a:&#123;<br>    b:&#123;<br>      c:&#123;<br>        d:666<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;)<br><br>console.log(car)<br><br>function changeCarPrice() &#123;<br>  car.value.price += 10<br>&#125;<br>function changeFirstGame() &#123;<br>  games.value[0].name = &#x27;流星蝴蝶剑&#x27;<br>&#125;<br>function test()&#123;<br>  obj.value.a.b.c.d = 999<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="3-6-ref-对比-reactive"><a href="#3-6-ref-对比-reactive" class="headerlink" title="3.6. ref 对比 reactive"></a>3.6. ref 对比 reactive</h2><p>宏观角度看：</p><blockquote><ol><li><p><code>ref</code>用来定义：<strong>基本类型数据</strong>、<strong>对象类型数据</strong>；</p></li><li><p><code>reactive</code>用来定义：<strong>对象类型数据</strong>。</p></li></ol></blockquote><ul><li>区别：</li></ul><blockquote><ol><li><p><code>ref</code>创建的变量必须使用<code>.value</code>（可以使用插件自动添加<code>.value</code>）。</p><p><code>reactive</code>重新分配一个新对象，会<strong>失去</strong>响应式（可以使用<code>Object.assign</code>去整体替换）。</p></li></ol></blockquote><ul><li>使用原则：</li></ul><blockquote><ol><li>若需要一个基本类型的响应式数据，必须使用<code>ref</code>。</li><li>若需要一个响应式对象，层级不深，<code>ref</code>、<code>reactive</code>都可以。</li><li>若需要一个响应式对象，且层级较深，推荐使用<code>reactive</code>。</li></ol></blockquote><h2 id="3-7-toRefs-与-toRef"><a href="#3-7-toRefs-与-toRef" class="headerlink" title="3.7. toRefs 与 toRef"></a>3.7. toRefs 与 toRef</h2><ul><li>作用：将一个响应式对象中的每一个属性，转换为<code>ref</code>对象。</li><li>备注：<code>toRefs</code>与<code>toRef</code>功能一致，但<code>toRefs</code>可以批量转换。</li><li>语法如下：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;person&quot;&gt;<br>    &lt;h2&gt;姓名：&#123;&#123;person.name&#125;&#125;&lt;/h2&gt;<br>    &lt;h2&gt;年龄：&#123;&#123;person.age&#125;&#125;&lt;/h2&gt;<br>    &lt;h2&gt;性别：&#123;&#123;person.gender&#125;&#125;&lt;/h2&gt;<br>    &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;<br>    &lt;button @click=&quot;changeAge&quot;&gt;修改年龄&lt;/button&gt;<br>    &lt;button @click=&quot;changeGender&quot;&gt;修改性别&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;<br>  import &#123;ref,reactive,toRefs,toRef&#125; from &#x27;vue&#x27;<br><br>  // 数据<br>  let person = reactive(&#123;name:&#x27;张三&#x27;, age:18, gender:&#x27;男&#x27;&#125;)<br><br>  // 通过toRefs将person对象中的n个属性批量取出，且依然保持响应式的能力<br>  let &#123;name,gender&#125; =  toRefs(person)<br><br>  // 通过toRef将person对象中的gender属性取出，且依然保持响应式的能力<br>  let age = toRef(person,&#x27;age&#x27;)<br><br>  // 方法<br>  function changeName()&#123;<br>    name.value += &#x27;~&#x27;<br>  &#125;<br>  function changeAge()&#123;<br>    age.value += 1<br>  &#125;<br>  function changeGender()&#123;<br>    gender.value = &#x27;女&#x27;<br>  &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="3-8-computed"><a href="#3-8-computed" class="headerlink" title="3.8. computed"></a>3.8. computed</h2><p>作用：根据已有数据计算出新数据（和<code>Vue2</code>中的<code>computed</code>作用一致）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;person&quot;&gt;<br>    姓：&lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt; &lt;br&gt;<br>    名：&lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt; &lt;br&gt;<br>    全名：&lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt; &lt;br&gt;<br>    &lt;button @click=&quot;changeFullName&quot;&gt;全名改为：li-si&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot; name=&quot;App&quot;&gt;<br>  import &#123;ref,computed&#125; from &#x27;vue&#x27;<br><br>  let firstName = ref(&#x27;zhang&#x27;)<br>  let lastName = ref(&#x27;san&#x27;)<br><br>  // 计算属性——只读取，不修改<br>  /* let fullName = computed(()=&gt;&#123;<br>    return firstName.value + &#x27;-&#x27; + lastName.value<br>  &#125;) */<br><br><br>  // 计算属性——既读取又修改<br>  let fullName = computed(&#123;<br>    // 读取<br>    get()&#123;<br>      return firstName.value + &#x27;-&#x27; + lastName.value<br>    &#125;,<br>    // 修改<br>    set(val)&#123;<br>      console.log(&#x27;有人修改了fullName&#x27;,val)<br>      firstName.value = val.split(&#x27;-&#x27;)[0]<br>      lastName.value = val.split(&#x27;-&#x27;)[1]<br>    &#125;<br>  &#125;)<br><br>  function changeFullName()&#123;<br>    fullName.value = &#x27;li-si&#x27;<br>  &#125; <br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="3-9-watch"><a href="#3-9-watch" class="headerlink" title="3.9. watch"></a>3.9. watch</h2><ul><li>作用：监视数据的变化（和<code>Vue2</code>中的<code>watch</code>作用一致）</li><li>特点：<code>Vue3</code>中的<code>watch</code>只能监视以下<strong>四种数据</strong>：</li></ul><blockquote><ol><li><code>ref</code>定义的数据。</li><li><code>reactive</code>定义的数据。</li><li>函数返回一个值（<code>getter</code>函数）。</li><li>一个包含上述内容的数组。</li></ol></blockquote><p>我们在<code>Vue3</code>中使用<code>watch</code>的时候，通常会遇到以下几种情况：</p><h3 id="情况一"><a href="#情况一" class="headerlink" title="* 情况一"></a>* 情况一</h3><p>监视<code>ref</code>定义的基本类型 数据：直接写数据名即可，监视的是其<code>value</code>值的改变。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;person&quot;&gt;<br>    &lt;h1&gt;情况一：监视 ref 定义的基本类型数据&lt;/h1&gt;<br>    &lt;h2&gt;当前求和为：&#123;&#123;sum&#125;&#125;&lt;/h2&gt;<br>    &lt;button @click=&quot;changeSum&quot;&gt;点我sum+1&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;<br>  import &#123;ref,watch&#125; from &#x27;vue&#x27;<br>  // 数据<br>  let sum = ref(0)<br>  // 方法<br>  function changeSum()&#123;<br>    sum.value += 1<br>  &#125;<br>  // 监视，情况一：监视 ref 定义的 基本类型 数据<br>  const stopWatch = watch(sum,(newValue,oldValue)=&gt;&#123;<br>    console.log(&#x27;sum变化了&#x27;,newValue,oldValue)<br>    if(newValue &gt;= 10)&#123;<br>      stopWatch()<br>    &#125;<br>  &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="情况二"><a href="#情况二" class="headerlink" title="* 情况二"></a>* 情况二</h3><p>监视<code>ref</code>定义的 对象类型 数据：直接写数据名，监视的是对象的 地址值 ，若想监视对象内部的数据，要手动开启深度监视。</p><blockquote><p>注意：</p><ul><li><p>若修改的是<code>ref</code>定义的对象中的属性，<code>newValue</code> 和 <code>oldValue</code> 都是新值，因为它们是同一个对象。</p></li><li><p>若修改整个<code>ref</code>定义的对象，<code>newValue</code> 是新值， <code>oldValue</code> 是旧值，因为不是同一个对象了。</p></li></ul></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;person&quot;&gt;<br>    &lt;h1&gt;情况二：监视 ref 定义的 对象类型 数据&lt;/h1&gt;<br>    &lt;h2&gt;姓名：&#123;&#123; person.name &#125;&#125;&lt;/h2&gt;<br>    &lt;h2&gt;年龄：&#123;&#123; person.age &#125;&#125;&lt;/h2&gt;<br>    &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;<br>    &lt;button @click=&quot;changeAge&quot;&gt;修改年龄&lt;/button&gt;<br>    &lt;button @click=&quot;changePerson&quot;&gt;修改整个人&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;<br>  import &#123;ref,watch&#125; from &#x27;vue&#x27;<br>  // 数据<br>  let person = ref(&#123;<br>    name:&#x27;张三&#x27;,<br>    age:18<br>  &#125;)<br>  // 方法<br>  function changeName()&#123;<br>    person.value.name += &#x27;~&#x27;<br>  &#125;<br>  function changeAge()&#123;<br>    person.value.age += 1<br>  &#125;<br>  function changePerson()&#123;<br>    person.value = &#123;name:&#x27;李四&#x27;,age:90&#125;<br>  &#125;<br>  /* <br>    监视，情况二：监视 ref 定义的 对象类型 数据，监视的是对象的地址值，若想监视对象内部属性的变化，需要手动开启深度监视<br>    watch的第一个参数是：被监视的数据<br>    watch的第二个参数是：监视的回调<br>    watch的第三个参数是：配置对象（deep、immediate等等.....） <br>  */<br>  watch(person,(newValue,oldValue)=&gt;&#123;<br>    console.log(&#x27;person变化了&#x27;,newValue,oldValue)<br>  &#125;,&#123;deep:true&#125;)<br>  <br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="情况三"><a href="#情况三" class="headerlink" title="*  情况三"></a>*  情况三</h3><p>监视<code>reactive</code>定义的 对象类型 数据，且默认开启了深度监视。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;person&quot;&gt;<br>    &lt;h1&gt;情况三：监视 reactive 定义的 对象类型 数据&lt;/h1&gt;<br>    &lt;h2&gt;姓名：&#123;&#123; person.name &#125;&#125;&lt;/h2&gt;<br>    &lt;h2&gt;年龄：&#123;&#123; person.age &#125;&#125;&lt;/h2&gt;<br>    &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;<br>    &lt;button @click=&quot;changeAge&quot;&gt;修改年龄&lt;/button&gt;<br>    &lt;button @click=&quot;changePerson&quot;&gt;修改整个人&lt;/button&gt;<br>    &lt;hr&gt;<br>    &lt;h2&gt;测试：&#123;&#123;obj.a.b.c&#125;&#125;&lt;/h2&gt;<br>    &lt;button @click=&quot;test&quot;&gt;修改obj.a.b.c&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;<br>  import &#123;reactive,watch&#125; from &#x27;vue&#x27;<br>  // 数据<br>  let person = reactive(&#123;<br>    name:&#x27;张三&#x27;,<br>    age:18<br>  &#125;)<br>  let obj = reactive(&#123;<br>    a:&#123;<br>      b:&#123;<br>        c:666<br>      &#125;<br>    &#125;<br>  &#125;)<br>  // 方法<br>  function changeName()&#123;<br>    person.name += &#x27;~&#x27;<br>  &#125;<br>  function changeAge()&#123;<br>    person.age += 1<br>  &#125;<br>  function changePerson()&#123;<br>    Object.assign(person,&#123;name:&#x27;李四&#x27;,age:80&#125;)<br>  &#125;<br>  function test()&#123;<br>    obj.a.b.c = 888<br>  &#125;<br><br>  // 监视，情况三：监视 reactive 定义的 对象类型 数据，且默认是开启深度监视的<br>  watch(person,(newValue,oldValue)=&gt;&#123;<br>    console.log(&#x27;person变化了&#x27;,newValue,oldValue)<br>  &#125;)<br>  watch(obj,(newValue,oldValue)=&gt;&#123;<br>    console.log(&#x27;Obj变化了&#x27;,newValue,oldValue)<br>  &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="情况四"><a href="#情况四" class="headerlink" title="* 情况四"></a>* 情况四</h3><p>监视<code>ref</code>或<code>reactive</code>定义的 对象类型 数据中的<strong>某个属性</strong>，注意点如下：</p><ol><li>若该属性值<strong>不是</strong> 对象类型 ，需要写成函数形式。</li><li>若该属性值是<strong>依然</strong>是 对象类型 ，可直接写，也可写成函数，建议写成函数。</li></ol><p>结论：监视的要是对象里的属性，那么最好写函数式，注意点：若是对象监视的是地址值，需要关注对象内部，需要手动开启深度监视。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;person&quot;&gt;<br>    &lt;h1&gt;情况四：监视 ref 或 reactive 定义的 对象类型 数据中的某个属性&lt;/h1&gt;<br>    &lt;h2&gt;姓名：&#123;&#123; person.name &#125;&#125;&lt;/h2&gt;<br>    &lt;h2&gt;年龄：&#123;&#123; person.age &#125;&#125;&lt;/h2&gt;<br>    &lt;h2&gt;汽车：&#123;&#123; person.car.c1 &#125;&#125;、&#123;&#123; person.car.c2 &#125;&#125;&lt;/h2&gt;<br>    &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;<br>    &lt;button @click=&quot;changeAge&quot;&gt;修改年龄&lt;/button&gt;<br>    &lt;button @click=&quot;changeC1&quot;&gt;修改第一台车&lt;/button&gt;<br>    &lt;button @click=&quot;changeC2&quot;&gt;修改第二台车&lt;/button&gt;<br>    &lt;button @click=&quot;changeCar&quot;&gt;修改整个车&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;<br>  import &#123;reactive,watch&#125; from &#x27;vue&#x27;<br><br>  // 数据<br>  let person = reactive(&#123;<br>    name:&#x27;张三&#x27;,<br>    age:18,<br>    car:&#123;<br>      c1:&#x27;奔驰&#x27;,<br>      c2:&#x27;宝马&#x27;<br>    &#125;<br>  &#125;)<br>  // 方法<br>  function changeName()&#123;<br>    person.name += &#x27;~&#x27;<br>  &#125;<br>  function changeAge()&#123;<br>    person.age += 1<br>  &#125;<br>  function changeC1()&#123;<br>    person.car.c1 = &#x27;奥迪&#x27;<br>  &#125;<br>  function changeC2()&#123;<br>    person.car.c2 = &#x27;大众&#x27;<br>  &#125;<br>  function changeCar()&#123;<br>    person.car = &#123;c1:&#x27;雅迪&#x27;,c2:&#x27;爱玛&#x27;&#125;<br>  &#125;<br><br>  // 监视，情况四：监视响应式对象中的某个属性，且该属性是基本类型的，要写成函数式<br>  /* watch(()=&gt; person.name,(newValue,oldValue)=&gt;&#123;<br>    console.log(&#x27;person.name变化了&#x27;,newValue,oldValue)<br>  &#125;) */<br><br>  // 监视，情况四：监视响应式对象中的某个属性，且该属性是对象类型的，可以直接写，也能写函数，更推荐写函数<br>  watch(()=&gt;person.car,(newValue,oldValue)=&gt;&#123;<br>    console.log(&#x27;person.car变化了&#x27;,newValue,oldValue)<br>  &#125;,&#123;deep:true&#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="情况五"><a href="#情况五" class="headerlink" title="* 情况五"></a>* 情况五</h3><p>监视上述的多个数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;person&quot;&gt;<br>    &lt;h1&gt;情况五：监视上述的多个数据&lt;/h1&gt;<br>    &lt;h2&gt;姓名：&#123;&#123; person.name &#125;&#125;&lt;/h2&gt;<br>    &lt;h2&gt;年龄：&#123;&#123; person.age &#125;&#125;&lt;/h2&gt;<br>    &lt;h2&gt;汽车：&#123;&#123; person.car.c1 &#125;&#125;、&#123;&#123; person.car.c2 &#125;&#125;&lt;/h2&gt;<br>    &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;<br>    &lt;button @click=&quot;changeAge&quot;&gt;修改年龄&lt;/button&gt;<br>    &lt;button @click=&quot;changeC1&quot;&gt;修改第一台车&lt;/button&gt;<br>    &lt;button @click=&quot;changeC2&quot;&gt;修改第二台车&lt;/button&gt;<br>    &lt;button @click=&quot;changeCar&quot;&gt;修改整个车&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;<br>  import &#123;reactive,watch&#125; from &#x27;vue&#x27;<br><br>  // 数据<br>  let person = reactive(&#123;<br>    name:&#x27;张三&#x27;,<br>    age:18,<br>    car:&#123;<br>      c1:&#x27;奔驰&#x27;,<br>      c2:&#x27;宝马&#x27;<br>    &#125;<br>  &#125;)<br>  // 方法<br>  function changeName()&#123;<br>    person.name += &#x27;~&#x27;<br>  &#125;<br>  function changeAge()&#123;<br>    person.age += 1<br>  &#125;<br>  function changeC1()&#123;<br>    person.car.c1 = &#x27;奥迪&#x27;<br>  &#125;<br>  function changeC2()&#123;<br>    person.car.c2 = &#x27;大众&#x27;<br>  &#125;<br>  function changeCar()&#123;<br>    person.car = &#123;c1:&#x27;雅迪&#x27;,c2:&#x27;爱玛&#x27;&#125;<br>  &#125;<br><br>  // 监视，情况五：监视上述的多个数据<br>  watch([()=&gt;person.name,person.car],(newValue,oldValue)=&gt;&#123;<br>    console.log(&#x27;person.car变化了&#x27;,newValue,oldValue)<br>  &#125;,&#123;deep:true&#125;)<br><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="3-10-watchEffect"><a href="#3-10-watchEffect" class="headerlink" title="3.10. watchEffect"></a>3.10. watchEffect</h2><ul><li><p>官网：立即运行一个函数，同时响应式地追踪其依赖，并在依赖更改时重新执行该函数。</p></li><li><p><code>watch</code>对比<code>watchEffect</code></p><blockquote><ol><li><p>都能监听响应式数据的变化，不同的是监听数据变化的方式不同</p></li><li><p><code>watch</code>：要明确指出监视的数据</p></li><li><p><code>watchEffect</code>：不用明确指出监视的数据（函数中用到哪些属性，那就监视哪些属性）。</p></li></ol></blockquote></li><li><p>示例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;person&quot;&gt;<br>    &lt;h1&gt;需求：当水温超过60℃或水位超过80cm时，给服务器发送请求&lt;/h1&gt;<br>    &lt;h2&gt;当前水温是：&#123;&#123; temp &#125;&#125;℃&lt;/h2&gt;<br>    &lt;h2&gt;当前水位是：&#123;&#123; height &#125;&#125;cm&lt;/h2&gt;<br>    &lt;button @click=&quot;changeTemp&quot;&gt;水温+10&lt;/button&gt;<br>    &lt;button @click=&quot;changeHeight&quot;&gt;水位+10&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup name=&quot;Person&quot;&gt;<br>import &#123; ref, watch, watchEffect &#125; from &quot;vue&quot;;<br><br>// 数据<br>let temp = ref(10);<br>let height = ref(0);<br>// 方法<br>function changeTemp() &#123;<br>  temp.value += 10;<br>&#125;<br>function changeHeight() &#123;<br>  height.value += 10;<br>&#125;<br>// 监视——watch实现<br>// watch([temp, height], (value) =&gt; &#123;<br>//   let [newTemp, newHeight] = value;<br>//   if (newTemp &gt;= 60 || newHeight &gt;= 80) &#123;<br>//     console.log(&quot;给服务器发请求&quot;);<br>//   &#125;<br>// &#125;);<br>// 监视——watchEffect实现<br>watchEffect(() =&gt; &#123;<br>  if (temp.value &gt;= 60 || height.value &gt;= 80) &#123;<br>    console.log(&quot;给服务器发请求&quot;);<br>  &#125;<br>&#125;);<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>.person &#123;<br>  background-color: skyblue;<br>  box-shadow: 0 0 10px;<br>  border-radius: 10px;<br>&#125;<br>button &#123;<br>  margin-right: 5px;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure></li></ul><h2 id="3-11-标签的-ref-属性"><a href="#3-11-标签的-ref-属性" class="headerlink" title="3.11. 标签的 ref 属性"></a>3.11. 标签的 ref 属性</h2><p>作用：用于注册模板引用。</p><blockquote><ul><li><p>用在普通<code>DOM</code>标签上，获取的是<code>DOM</code>节点。</p></li><li><p>用在组件标签上，获取的是组件实例对象。</p></li></ul></blockquote><p>用在普通<code>DOM</code>标签上：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;person&quot;&gt;<br>    &lt;h1 ref=&quot;title1&quot;&gt;尚硅谷&lt;/h1&gt;<br>    &lt;h2 ref=&quot;title2&quot;&gt;前端&lt;/h2&gt;<br>    &lt;h3 ref=&quot;title3&quot;&gt;Vue&lt;/h3&gt;<br>    &lt;input type=&quot;text&quot; ref=&quot;inpt&quot;&gt; &lt;br&gt;&lt;br&gt;<br>    &lt;button @click=&quot;showLog&quot;&gt;点我打印内容&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;<br>  import &#123;ref&#125; from &#x27;vue&#x27;<br><br>  let title1 = ref()<br>  let title2 = ref()<br>  let title3 = ref()<br><br>  function showLog()&#123;<br>    // 通过id获取元素<br>    const t1 = document.getElementById(&#x27;title1&#x27;)<br>    // 打印内容<br>    console.log((t1 as HTMLElement).innerText)<br>    console.log((&lt;HTMLElement&gt;t1).innerText)<br>    console.log(t1?.innerText)<br>    <br>/************************************/<br><br>    // 通过ref获取元素<br>    console.log(title1.value)<br>    console.log(title2.value)<br>    console.log(title3.value)<br>  &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>用在组件标签上：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- 父组件App.vue --&gt;<br>&lt;template&gt;<br>  &lt;Person ref=&quot;ren&quot;/&gt;<br>  &lt;button @click=&quot;test&quot;&gt;测试&lt;/button&gt;<br>&lt;/template&gt;<br><br>&lt;script lang=&quot;ts&quot; setup name=&quot;App&quot;&gt;<br>  import Person from &#x27;./components/Person.vue&#x27;<br>  import &#123;ref&#125; from &#x27;vue&#x27;<br><br>  let ren = ref()<br><br>  function test()&#123;<br>    console.log(ren.value.name)<br>    console.log(ren.value.age)<br>  &#125;<br>&lt;/script&gt;<br><br><br>&lt;!-- 子组件Person.vue中要使用defineExpose暴露内容 --&gt;<br>&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;<br>  import &#123;ref,defineExpose&#125; from &#x27;vue&#x27;<br>// 数据<br>  let name = ref(&#x27;张三&#x27;)<br>  let age = ref(18)<br>  /****************************/<br>  /****************************/<br>  // 使用defineExpose将组件中的数据交给外部<br>  defineExpose(&#123;name,age&#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="3-12-组件的props配置"><a href="#3-12-组件的props配置" class="headerlink" title="3.12. 组件的props配置"></a>3.12. 组件的props配置</h2><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 定义一个接口，限制每个Person对象的格式</span><br><span class="hljs-keyword">export</span> interface <span class="hljs-title class_">PersonInter</span> &#123;<br><span class="hljs-attr">id</span>:string,<br><span class="hljs-attr">name</span>:string,<br> <span class="hljs-attr">age</span>:number<br>&#125;<br><br><span class="hljs-comment">// 定义一个自定义类型Persons</span><br><span class="hljs-keyword">export</span> type <span class="hljs-title class_">Persons</span> = <span class="hljs-title class_">Array</span>&lt;<span class="hljs-title class_">PersonInter</span>&gt;<br></code></pre></td></tr></table></figure><p><code>App.vue</code>中代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;Person :list=&quot;persons&quot;/&gt;<br>&lt;/template&gt;<br><br>&lt;script lang=&quot;ts&quot; setup name=&quot;App&quot;&gt;<br>import Person from &#x27;./components/Person.vue&#x27;<br>import &#123;reactive&#125; from &#x27;vue&#x27;<br> import &#123;type Persons&#125; from &#x27;./types&#x27;<br><br> let persons = reactive&lt;Persons&gt;([<br>  &#123;id:&#x27;e98219e12&#x27;,name:&#x27;张三&#x27;,age:18&#125;,<br>   &#123;id:&#x27;e98219e13&#x27;,name:&#x27;李四&#x27;,age:19&#125;,<br>    &#123;id:&#x27;e98219e14&#x27;,name:&#x27;王五&#x27;,age:20&#125;<br>  ])<br>&lt;/script&gt;<br><br></code></pre></td></tr></table></figure><p><code>Person.vue</code>中代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs Vue">&lt;template&gt;<br>&lt;div class=&quot;person&quot;&gt;<br>&lt;ul&gt;<br>  &lt;li v-for=&quot;item in list&quot; :key=&quot;item.id&quot;&gt;<br>     &#123;&#123;item.name&#125;&#125;--&#123;&#123;item.age&#125;&#125;<br>   &lt;/li&gt;<br> &lt;/ul&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;<br>import &#123;defineProps&#125; from &#x27;vue&#x27;<br>import &#123;type PersonInter&#125; from &#x27;@/types&#x27;<br><br>// 第一种写法：仅接收<br>// const props = defineProps([&#x27;list&#x27;])<br><br>// 第二种写法：接收+限制类型<br>// defineProps&lt;&#123;list:Persons&#125;&gt;()<br><br>// 第三种写法：接收+限制类型+指定默认值+限制必要性<br>let props = withDefaults(defineProps&lt;&#123;list?:Persons&#125;&gt;(),&#123;<br>  list:()=&gt;[&#123;id:&#x27;asdasg01&#x27;,name:&#x27;小猪佩奇&#x27;,age:18&#125;]<br>&#125;)<br>console.log(props)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></blockquote><h2 id="3-13-生命周期"><a href="#3-13-生命周期" class="headerlink" title="3.13. 生命周期"></a>3.13. 生命周期</h2><ul><li><p>概念：<code>Vue</code>组件实例在创建时要经历一系列的初始化步骤，在此过程中<code>Vue</code>会在合适的时机，调用特定的函数，从而让开发者有机会在特定阶段运行自己的代码，这些特定的函数统称为：生命周期钩子</p></li><li><p>规律：</p><blockquote><p>生命周期整体分为四个阶段，分别是：<strong>创建、挂载、更新、销毁</strong>，每个阶段都有两个钩子，一前一后。</p></blockquote></li><li><p><code>Vue2</code>的生命周期</p><blockquote><p>创建阶段：<code>beforeCreate</code>、<code>created</code></p><p>挂载阶段：<code>beforeMount</code>、<code>mounted</code></p><p>更新阶段：<code>beforeUpdate</code>、<code>updated</code></p><p>销毁阶段：<code>beforeDestroy</code>、<code>destroyed</code></p></blockquote></li><li><p><code>Vue3</code>的生命周期</p><blockquote><p>创建阶段：<code>setup</code></p><p>挂载阶段：<code>onBeforeMount</code>、<code>onMounted</code></p><p>更新阶段：<code>onBeforeUpdate</code>、<code>onUpdated</code></p><p>卸载阶段：<code>onBeforeUnmount</code>、<code>onUnmounted</code></p></blockquote></li><li><p>常用的钩子：<code>onMounted</code>(挂载完毕)、<code>onUpdated</code>(更新完毕)、<code>onBeforeUnmount</code>(卸载之前)</p></li><li><p>示例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;person&quot;&gt;<br>    &lt;h2&gt;当前求和为：&#123;&#123; sum &#125;&#125;&lt;/h2&gt;<br>    &lt;button @click=&quot;changeSum&quot;&gt;点我sum+1&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;!-- vue3写法 --&gt;<br>&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;<br>  import &#123; <br>    ref, <br>    onBeforeMount, <br>    onMounted, <br>    onBeforeUpdate, <br>    onUpdated, <br>    onBeforeUnmount, <br>    onUnmounted <br>  &#125; from &#x27;vue&#x27;<br><br>  // 数据<br>  let sum = ref(0)<br>  // 方法<br>  function changeSum() &#123;<br>    sum.value += 1<br>  &#125;<br>  console.log(&#x27;setup&#x27;)<br>  // 生命周期钩子<br>  onBeforeMount(()=&gt;&#123;<br>    console.log(&#x27;挂载之前&#x27;)<br>  &#125;)<br>  onMounted(()=&gt;&#123;<br>    console.log(&#x27;挂载完毕&#x27;)<br>  &#125;)<br>  onBeforeUpdate(()=&gt;&#123;<br>    console.log(&#x27;更新之前&#x27;)<br>  &#125;)<br>  onUpdated(()=&gt;&#123;<br>    console.log(&#x27;更新完毕&#x27;)<br>  &#125;)<br>  onBeforeUnmount(()=&gt;&#123;<br>    console.log(&#x27;卸载之前&#x27;)<br>  &#125;)<br>  onUnmounted(()=&gt;&#123;<br>    console.log(&#x27;卸载完毕&#x27;)<br>  &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li></ul><h2 id="3-14-自定义hooks"><a href="#3-14-自定义hooks" class="headerlink" title="3.14. 自定义hooks"></a>3.14. 自定义hooks</h2><ul><li><p>什么是<code>hook</code>？—— 本质是一个函数，把<code>setup</code>函数中使用的<code>Composition API</code>进行了封装，类似于<code>vue2.x</code>中的<code>mixin</code>。</p></li><li><p>自定义<code>hook</code>的优势：复用代码, 让<code>setup</code>中的逻辑更清楚易懂。</p></li></ul><p>示例代码：</p><ul><li><p><code>useSum.ts</code>中内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; onMounted, ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><span class="hljs-comment">// 默认暴露可以直接写值，直接写匿名函数</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 数据</span><br>  <span class="hljs-keyword">let</span> sum = <span class="hljs-title function_">ref</span>(<span class="hljs-number">0</span>)<br>  <span class="hljs-comment">// 方法</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">addSum</span>(<span class="hljs-params"></span>) &#123;<br>    sum.<span class="hljs-property">value</span>++;<br>  &#125;<br>  <span class="hljs-comment">// 挂载完毕</span><br>  <span class="hljs-title function_">onMounted</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">addSum</span>()<br>  &#125;)<br>  <span class="hljs-keyword">return</span> &#123; sum, addSum &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>useDog.ts</code>中内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; onMounted, reactive &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 数据</span><br>  <span class="hljs-keyword">let</span> dogList = <span class="hljs-title function_">reactive</span>([<br>    <span class="hljs-string">&#x27;https:\/\/images.dog.ceo\/breeds\/pembroke\/n02113023_4972.jpg&#x27;</span><br>  ])<br>  <span class="hljs-comment">// 方法</span><br>  <span class="hljs-comment">// 第一种写法，指定失败和成功的回调</span><br>  <span class="hljs-comment">// function addDog() &#123;</span><br>  <span class="hljs-comment">//   </span><br>  <span class="hljs-comment">//   axios.get(&#x27;https://dog.ceo/api/breed/pembroke/images/random&#x27;).then(</span><br>  <span class="hljs-comment">//     Response =&gt; &#123;</span><br>  <span class="hljs-comment">//       dogList.push(Response.data.message)</span><br>  <span class="hljs-comment">//     &#125;,</span><br>  <span class="hljs-comment">//     Error =&gt; &#123;</span><br>  <span class="hljs-comment">//       alert(Error.message);</span><br>  <span class="hljs-comment">//     &#125;</span><br>  <span class="hljs-comment">//   )</span><br><br>  <span class="hljs-comment">// &#125;</span><br><br>  <span class="hljs-comment">// 第二种写法，异步处理</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">addDog</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">let</span> response = <span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;https://dog.ceo/api/breed/pembroke/images/random&#x27;</span>)<br>      dogList.<span class="hljs-title function_">push</span>(response.<span class="hljs-property">data</span>.<span class="hljs-property">message</span>)<br>    &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>      <span class="hljs-title function_">alert</span>(error);<br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">// 挂载完毕</span><br>  <span class="hljs-title function_">onMounted</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">addDog</span>()<br>  &#125;)<br>  <span class="hljs-keyword">return</span> &#123; dogList, addDog &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>组件中具体使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;person&quot;&gt;<br>    &lt;h2&gt;当前求和为&#123;&#123; sum &#125;&#125;&lt;/h2&gt;<br>    &lt;button @click=&quot;addSum&quot;&gt;sum+1&lt;/button&gt;<br>    &lt;hr&gt;<br>    &lt;img v-for=&quot;(item, index) in dogList&quot; :key=&quot;index&quot; :src=&quot;item&quot; alt=&quot;小狗&quot;&gt;&lt;br /&gt;<br>    &lt;button @click=&quot;addDog&quot;&gt;增加一只小狗&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup name=&quot;Person&quot; lang=&quot;ts&quot;&gt;<br>// 先引入，注意引入的是函数<br>import useSum from &#x27;@/hooks/useSum&#x27;;<br>import useDog from &#x27;@/hooks/useDog&#x27;;<br>// 调用函数，再将函数返回结果解构赋值<br>let &#123; sum, addSum &#125; = useSum()<br>let &#123; dogList, addDog &#125; = useDog()<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>.person &#123;<br>  background-color: skyblue;<br>  box-shadow: 0 0 10px;<br>  border-radius: 10px;<br>&#125;<br><br>button &#123;<br>  margin-right: 5px;<br>&#125;<br><br>img &#123;<br>  height: 200px;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure></li></ul><hr><h1 id="4-路由"><a href="#4-路由" class="headerlink" title="4. 路由"></a>4. 路由</h1><h2 id="4-1-对路由的理解"><a href="#4-1-对路由的理解" class="headerlink" title="4.1. 对路由的理解"></a>4.1. 对路由的理解</h2><p><img src="/2024/09/24/%E5%AD%A6%E4%B9%A0Vue3/img/image-20231018144351536.png"></p><h2 id="4-2-基本切换效果"><a href="#4-2-基本切换效果" class="headerlink" title="4.2. 基本切换效果"></a>4.2. 基本切换效果</h2><ul><li><p><code>Vue3</code>中要使用<code>vue-router</code>的最新版本，目前是<code>4</code>版本。</p></li><li><p>路由配置文件代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 创建路由器并暴露</span><br><span class="hljs-comment">// 引入路由组件</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">About</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/components/About.vue&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Home</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/components/Home.vue&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">News</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/components/News.vue&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;<br><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">createRouter</span>(&#123;<br>  <span class="hljs-comment">// 路由器的两种工作模式</span><br>  <span class="hljs-attr">history</span>: <span class="hljs-title function_">createWebHistory</span>(),<br>  <span class="hljs-comment">// 路由规则</span><br>  <span class="hljs-attr">routes</span>: [<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/home&#x27;</span>,<br>      <span class="hljs-attr">component</span>: <span class="hljs-title class_">Home</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/news&#x27;</span>,<br>      <span class="hljs-attr">component</span>: <span class="hljs-title class_">News</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/about&#x27;</span>,<br>      <span class="hljs-attr">component</span>: <span class="hljs-title class_">About</span><br>    &#125;,<br>  ]<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br></code></pre></td></tr></table></figure></li></ul><ul><li><p><code>main.ts</code>代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-comment">// 引入根组件</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-comment">// 引入路由器</span><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router&#x27;</span><br><span class="hljs-comment">// 创建整个应用</span><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>)<br><span class="hljs-comment">// 应用路由器</span><br>app.<span class="hljs-title function_">use</span>(router)<br><span class="hljs-comment">// 将整个应用挂载到app容器</span><br>app.<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></td></tr></table></figure></li></ul><ul><li><p><code>App.vue</code>代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;app&quot;&gt;<br>    &lt;!-- 顶部 --&gt;<br>    &lt;h2 class=&quot;title&quot;&gt;Vue路由测试&lt;/h2&gt;<br>    &lt;!-- 导航区 --&gt;<br>    &lt;div class=&quot;navigate&quot;&gt;<br>      &lt;RouterLink to=&quot;/home&quot; active-class=&quot;active&quot;&gt;首页&lt;/RouterLink&gt;<br>      &lt;RouterLink to=&quot;/news&quot; active-class=&quot;active&quot;&gt;新闻&lt;/RouterLink&gt;<br>      &lt;RouterLink to=&quot;/about&quot; active-class=&quot;active&quot;&gt;关于&lt;/RouterLink&gt;<br>    &lt;/div&gt;<br>    &lt;!-- 展示区 --&gt;<br>    &lt;div class=&quot;main-content&quot;&gt;<br>      &lt;router-view&gt;&lt;/router-view&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup name=&quot;App&quot; lang=&quot;ts&quot;&gt;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li></ul><h2 id="4-3-两个注意点"><a href="#4-3-两个注意点" class="headerlink" title="4.3. 两个注意点"></a>4.3. 两个注意点</h2><blockquote><ol><li><p>路由组件通常存放在<code>pages</code> 或 <code>views</code>文件夹，一般组件通常存放在<code>components</code>文件夹。</p></li><li><p>通过点击导航，视觉效果上“消失” 了的路由组件，默认是被<strong>卸载</strong>掉的，需要的时候再去<strong>挂载</strong>。</p></li></ol></blockquote><h2 id="4-4-路由器工作模式"><a href="#4-4-路由器工作模式" class="headerlink" title="4.4. 路由器工作模式"></a>4.4. 路由器工作模式</h2><ol><li><p><code>history</code>模式</p><blockquote><p>优点：<code>URL</code>更加美观，不带有<code>#</code>，更接近传统的网站<code>URL</code>。</p><p>缺点：后期项目上线，需要服务端配合处理路径问题，否则刷新会有<code>404</code>错误。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">createRouter</span>(&#123;<br><span class="hljs-attr">history</span>:<span class="hljs-title function_">createWebHistory</span>(), <span class="hljs-comment">//history模式</span><br><span class="hljs-comment">/******/</span><br>&#125;)<br></code></pre></td></tr></table></figure></blockquote></li><li><p><code>hash</code>模式</p><blockquote><p>优点：兼容性更好，因为不需要服务器端处理路径。</p><p>缺点：<code>URL</code>带有<code>#</code>不太美观，且在<code>SEO</code>优化方面相对较差。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">createRouter</span>(&#123;<br><span class="hljs-attr">history</span>:<span class="hljs-title function_">createWebHashHistory</span>(), <span class="hljs-comment">//hash模式</span><br><span class="hljs-comment">/******/</span><br>&#125;)<br></code></pre></td></tr></table></figure></blockquote></li></ol><h2 id="4-5-to的两种写法"><a href="#4-5-to的两种写法" class="headerlink" title="4.5. to的两种写法"></a>4.5. to的两种写法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- 第一种：to的字符串写法 --&gt;<br>&lt;router-link active-class=&quot;active&quot; to=&quot;/home&quot;&gt;主页&lt;/router-link&gt;<br><br>&lt;!-- 第二种：to的对象写法 --&gt;<br>&lt;router-link active-class=&quot;active&quot; :to=&quot;&#123;path:&#x27;/home&#x27;&#125;&quot;&gt;Home&lt;/router-link&gt;<br></code></pre></td></tr></table></figure><h2 id="4-6-命名路由"><a href="#4-6-命名路由" class="headerlink" title="4.6. 命名路由"></a>4.6. 命名路由</h2><p>作用：可以简化路由跳转及传参（后面就讲）。</p><p>给路由规则命名：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">routes</span>:[<br>  &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;zhuye&#x27;</span>,<br>    <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/home&#x27;</span>,<br>    <span class="hljs-attr">component</span>:<span class="hljs-title class_">Home</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;xinwen&#x27;</span>,<br>    <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/news&#x27;</span>,<br>    <span class="hljs-attr">component</span>:<span class="hljs-title class_">News</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;guanyu&#x27;</span>,<br>    <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/about&#x27;</span>,<br>    <span class="hljs-attr">component</span>:<span class="hljs-title class_">About</span><br>  &#125;<br>]<br></code></pre></td></tr></table></figure><p>跳转路由：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!--简化前：需要写完整的路径（to的字符串写法） --&gt;<br>&lt;router-link to=&quot;/news/detail&quot;&gt;跳转&lt;/router-link&gt;<br><br>&lt;!--简化后：直接通过名字跳转（to的对象写法配合name属性） --&gt;<br>&lt;router-link :to=&quot;&#123;name:&#x27;guanyu&#x27;&#125;&quot;&gt;跳转&lt;/router-link&gt;<br></code></pre></td></tr></table></figure><h2 id="4-7-嵌套路由"><a href="#4-7-嵌套路由" class="headerlink" title="4.7. 嵌套路由"></a>4.7. 嵌套路由</h2><ol><li><p>编写<code>News</code>的子路由：<code>Detail.vue</code></p></li><li><p>配置路由规则，使用<code>children</code>配置项：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">createRouter</span>(&#123;<br>  <span class="hljs-attr">history</span>:<span class="hljs-title function_">createWebHistory</span>(),<br><span class="hljs-attr">routes</span>:[<br>&#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;zhuye&#x27;</span>,<br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/home&#x27;</span>,<br><span class="hljs-attr">component</span>:<span class="hljs-title class_">Home</span><br>&#125;,<br>&#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;xinwen&#x27;</span>,<br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/news&#x27;</span>,<br><span class="hljs-attr">component</span>:<span class="hljs-title class_">News</span>,<br><span class="hljs-attr">children</span>:[<br>&#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;xiang&#x27;</span>,<br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;detail&#x27;</span>,<br><span class="hljs-attr">component</span>:<span class="hljs-title class_">Detail</span><br>&#125;<br>]<br>&#125;,<br>&#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;guanyu&#x27;</span>,<br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/about&#x27;</span>,<br><span class="hljs-attr">component</span>:<span class="hljs-title class_">About</span><br>&#125;<br>]<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br></code></pre></td></tr></table></figure></li><li><p>跳转路由（记得要加完整路径）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;router-link to=&quot;/news/detail&quot;&gt;xxxx&lt;/router-link&gt;<br>&lt;!-- 或 --&gt;<br>&lt;router-link :to=&quot;&#123;path:&#x27;/news/detail&#x27;&#125;&quot;&gt;xxxx&lt;/router-link&gt;<br></code></pre></td></tr></table></figure></li><li><p>记得去<code>News</code>组件中预留一个<code>&lt;router-view&gt;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;news&quot;&gt;<br>    &lt;nav class=&quot;news-list&quot;&gt;<br>      &lt;RouterLink v-for=&quot;news in newsList&quot; :key=&quot;news.id&quot; :to=&quot;&#123;path:&#x27;/news/detail&#x27;&#125;&quot;&gt;<br>        &#123;&#123;news.name&#125;&#125;<br>      &lt;/RouterLink&gt;<br>    &lt;/nav&gt;<br>    &lt;div class=&quot;news-detail&quot;&gt;<br>      &lt;RouterView/&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure></li></ol><h2 id="4-8-路由传参"><a href="#4-8-路由传参" class="headerlink" title="4.8. 路由传参"></a>4.8. 路由传参</h2><h3 id="query参数"><a href="#query参数" class="headerlink" title="query参数"></a>query参数</h3><ol><li><p>传递参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- 跳转并携带query参数（to的字符串写法） --&gt;<br>&lt;router-link to=&quot;/news/detail?a=1&amp;b=2&amp;content=欢迎你&quot;&gt;<br>跳转<br>&lt;/router-link&gt;<br><br>&lt;!-- 跳转并携带query参数（to的对象写法） --&gt;<br>&lt;RouterLink <br>  :to=&quot;&#123;<br>    //name:&#x27;xiang&#x27;, //用name也可以跳转<br>    path:&#x27;/news/detail&#x27;,<br>    query:&#123;<br>      id:news.id,<br>      title:news.title,<br>      content:news.content<br>    &#125;<br>  &#125;&quot;<br>&gt;<br>  &#123;&#123;news.title&#125;&#125;<br>&lt;/RouterLink&gt;<br></code></pre></td></tr></table></figure></li><li><p>接收参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;useRoute&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><span class="hljs-keyword">const</span> route = <span class="hljs-title function_">useRoute</span>()<br><span class="hljs-comment">// 打印query参数</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(route.<span class="hljs-property">query</span>)<br></code></pre></td></tr></table></figure></li></ol><h3 id="params参数"><a href="#params参数" class="headerlink" title="params参数"></a>params参数</h3><ol><li><p>传递参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- 跳转并携带params参数（to的字符串写法） --&gt;<br>&lt;RouterLink :to=&quot;`/news/detail/001/新闻001/内容001`&quot;&gt;&#123;&#123;news.title&#125;&#125;&lt;/RouterLink&gt;<br><br>&lt;!-- 跳转并携带params参数（to的对象写法） --&gt;<br>&lt;RouterLink <br>  :to=&quot;&#123;<br>    name:&#x27;xiang&#x27;, //只能用name跳转<br>    params:&#123;<br>      id:news.id,<br>      title:news.title,<br>      content:news.title<br>    &#125;<br>  &#125;&quot;<br>&gt;<br>  &#123;&#123;news.title&#125;&#125;<br>&lt;/RouterLink&gt;<br></code></pre></td></tr></table></figure></li><li><p>接收参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;useRoute&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><span class="hljs-keyword">const</span> route = <span class="hljs-title function_">useRoute</span>()<br><span class="hljs-comment">// 打印params参数</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(route.<span class="hljs-property">params</span>)<br></code></pre></td></tr></table></figure></li></ol><blockquote><p>备注1：传递<code>params</code>参数时，若使用<code>to</code>的对象写法，必须使用<code>name</code>配置项，不能用<code>path</code>。</p><p>备注2：传递<code>params</code>参数时，需要提前在规则中占位。如下：detail后的?表示该参数不是必要的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;detail/:id/:title/:detail?&#x27;</span>,<br></code></pre></td></tr></table></figure></blockquote><h2 id="4-9-路由的props配置"><a href="#4-9-路由的props配置" class="headerlink" title="4.9. 路由的props配置"></a>4.9. 路由的props配置</h2><p>作用：让路由组件更方便的收到参数（可以将路由参数作为<code>props</code>传给组件）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;xiang&#x27;</span>,<br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;detail/:id/:title/:content&#x27;</span>,<br><span class="hljs-attr">component</span>:<span class="hljs-title class_">Detail</span>,<br><br>  <span class="hljs-comment">// props的对象写法，作用：把对象中的每一组key-value作为props传给Detail组件</span><br>  <span class="hljs-comment">// props:&#123;a:1,b:2,c:3&#125;, </span><br><br>  <span class="hljs-comment">// props的布尔值写法，作用：把收到了每一组params参数，作为props传给Detail组件</span><br>  <span class="hljs-comment">// props:true</span><br>  <br>  <span class="hljs-comment">// props的函数写法，作用：把返回的对象中每一组key-value作为props传给Detail组件</span><br>  <span class="hljs-title function_">props</span>(<span class="hljs-params">route</span>)&#123;<br>    <span class="hljs-keyword">return</span> route.<span class="hljs-property">query</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-10-replace属性"><a href="#4-10-replace属性" class="headerlink" title="4.10.  replace属性"></a>4.10.  replace属性</h2><ol><li><p>作用：控制路由跳转时操作浏览器历史记录的模式。</p></li><li><p>浏览器的历史记录有两种写入方式：分别为<code>push</code>和<code>replace</code>：</p><ul><li><code>push</code>是追加历史记录（默认值）。</li><li><code>replace</code>是替换当前记录。</li></ul></li><li><p>开启<code>replace</code>模式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;RouterLink replace .......&gt;News&lt;/RouterLink&gt;<br></code></pre></td></tr></table></figure></li></ol><h2 id="4-11-编程式导航"><a href="#4-11-编程式导航" class="headerlink" title="4.11. 编程式导航"></a>4.11. 编程式导航</h2><p>路由组件的两个重要的属性：<code>$route</code>和<code>$router</code>变成了两个<code>hooks</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;useRoute,useRouter&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><br><span class="hljs-keyword">const</span> route = <span class="hljs-title function_">useRoute</span>()<br><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">useRouter</span>()<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(route.<span class="hljs-property">query</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(route.<span class="hljs-property">parmas</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(router.<span class="hljs-property">push</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(router.<span class="hljs-property">replace</span>)<br></code></pre></td></tr></table></figure><h2 id="4-12-重定向"><a href="#4-12-重定向" class="headerlink" title="4.12. 重定向"></a>4.12. 重定向</h2><ol><li><p>作用：将特定的路径，重新定向到已有路由。</p></li><li><p>具体编码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>    <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/&#x27;</span>,<br>    <span class="hljs-attr">redirect</span>:<span class="hljs-string">&#x27;/about&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h1 id="5-pinia"><a href="#5-pinia" class="headerlink" title="5. pinia"></a>5. pinia</h1><h2 id="5-1-搭建-pinia-环境"><a href="#5-1-搭建-pinia-环境" class="headerlink" title="5.1. 搭建 pinia 环境"></a>5.1. 搭建 pinia 环境</h2><p>第一步：<code>npm install pinia</code></p><p>第二步：操作<code>src/main.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><br><span class="hljs-comment">/* 引入createPinia，用于创建pinia */</span><br><span class="hljs-keyword">import</span> &#123; createPinia &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pinia&#x27;</span><br><br><span class="hljs-comment">/* 创建pinia */</span><br><span class="hljs-keyword">const</span> pinia = <span class="hljs-title function_">createPinia</span>()<br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>)<br><br><span class="hljs-comment">/* 使用插件 */</span>&#123;&#125;<br>app.<span class="hljs-title function_">use</span>(pinia)<br>app.<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></td></tr></table></figure><p>此时开发者工具中已经有了<code>pinia</code>选项</p><h2 id="5-2-存储-读取数据"><a href="#5-2-存储-读取数据" class="headerlink" title="5.2. 存储+读取数据"></a>5.2. 存储+读取数据</h2><ol><li><p><code>Store</code>是一个保存：<strong>状态</strong>、<strong>业务逻辑</strong> 的实体，每个组件都可以<strong>读取</strong>、<strong>写入</strong>它。</p></li><li><p>它有三个概念：<code>state</code>、<code>getter</code>、<code>action</code>，相当于组件中的： <code>data</code>、 <code>computed</code> 和 <code>methods</code>。</p></li><li><p>具体编码：<code>src/store/count.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// 引入defineStore用于创建store</span><br><span class="hljs-keyword">import</span> &#123;defineStore&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pinia&#x27;</span><br><br><span class="hljs-comment">// 定义并暴露一个store</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> useCountStore = <span class="hljs-title function_">defineStore</span>(<span class="hljs-string">&#x27;count&#x27;</span>,&#123;<br>  <span class="hljs-comment">// 动作</span><br>  <span class="hljs-attr">actions</span>:&#123;&#125;,<br>  <span class="hljs-comment">// 状态</span><br>  <span class="hljs-title function_">state</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">sum</span>:<span class="hljs-number">6</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-comment">// 计算</span><br>  <span class="hljs-attr">getters</span>:&#123;&#125;<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>具体编码：<code>src/store/talk.ts</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 引入defineStore用于创建store</span><br><span class="hljs-keyword">import</span> &#123;defineStore&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pinia&#x27;</span><br><br><span class="hljs-comment">// 定义并暴露一个store</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> useTalkStore = <span class="hljs-title function_">defineStore</span>(<span class="hljs-string">&#x27;talk&#x27;</span>,&#123;<br>  <span class="hljs-comment">// 动作</span><br>  <span class="hljs-attr">actions</span>:&#123;&#125;,<br>  <span class="hljs-comment">// 状态</span><br>  <span class="hljs-title function_">state</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">talkList</span>:[<br>        &#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;yuysada01&#x27;</span>,<span class="hljs-attr">content</span>:<span class="hljs-string">&#x27;你今天有点怪，哪里怪？怪好看的！&#x27;</span>&#125;,<br>     &#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;yuysada02&#x27;</span>,<span class="hljs-attr">content</span>:<span class="hljs-string">&#x27;草莓、蓝莓、蔓越莓，你想我了没？&#x27;</span>&#125;,<br>        &#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;yuysada03&#x27;</span>,<span class="hljs-attr">content</span>:<span class="hljs-string">&#x27;心里给你留了一块地，我的死心塌地&#x27;</span>&#125;<br>      ]<br>    &#125;<br>  &#125;,<br>  <span class="hljs-comment">// 计算</span><br>  <span class="hljs-attr">getters</span>:&#123;&#125;<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>组件中使用<code>state</code>中的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;h2&gt;当前求和为：&#123;&#123; sumStore.sum &#125;&#125;&lt;/h2&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot; name=&quot;Count&quot;&gt;<br>  // 引入对应的useXxxxxStore<br>  import &#123;useSumStore&#125; from &#x27;@/store/sum&#x27;<br>  <br>  // 调用useXxxxxStore得到对应的store<br>  const sumStore = useSumStore()<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;ul&gt;<br>    &lt;li v-for=&quot;talk in talkStore.talkList&quot; :key=&quot;talk.id&quot;&gt;<br>      &#123;&#123; talk.content &#125;&#125;<br>    &lt;/li&gt;<br>  &lt;/ul&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot; name=&quot;Count&quot;&gt;<br>  import axios from &#x27;axios&#x27;<br>  import &#123;useTalkStore&#125; from &#x27;@/store/talk&#x27;<br><br>  const talkStore = useTalkStore()<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li></ol><h2 id="5-3-修改数据-三种方式"><a href="#5-3-修改数据-三种方式" class="headerlink" title="5.3. 修改数据 (三种方式)"></a>5.3. 修改数据 (三种方式)</h2><ol><li><p>第一种修改方式，直接修改</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts">countStore.<span class="hljs-property">sum</span> = <span class="hljs-number">666</span><br></code></pre></td></tr></table></figure></li><li><p>第二种修改方式：批量修改</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ts">countStore.$patch(&#123;<br>  <span class="hljs-attr">sum</span>:<span class="hljs-number">999</span>,<br>  <span class="hljs-attr">school</span>:<span class="hljs-string">&#x27;atguigu&#x27;</span><br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>第三种修改方式：借助<code>action</code>修改（<code>action</code>中可以编写一些业务逻辑）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; defineStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pinia&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> useCountStore = <span class="hljs-title function_">defineStore</span>(<span class="hljs-string">&#x27;count&#x27;</span>, &#123;<br>  <span class="hljs-comment">/*************/</span><br>  <span class="hljs-attr">actions</span>: &#123;<br>    <span class="hljs-comment">//加</span><br>    <span class="hljs-title function_">increment</span>(<span class="hljs-params">value:number</span>) &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">sum</span> &lt; <span class="hljs-number">10</span>) &#123;<br>        <span class="hljs-comment">//操作countStore中的sum</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">sum</span> += value<br>      &#125;<br>    &#125;,<br>    <span class="hljs-comment">//减</span><br>    <span class="hljs-title function_">decrement</span>(<span class="hljs-params">value:number</span>)&#123;<br>      <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">sum</span> &gt; <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">sum</span> -= value<br>      &#125;<br>    &#125;<br>  &#125;,<br>  <span class="hljs-comment">/*************/</span><br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>组件中调用<code>action</code>即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 使用countStore</span><br><span class="hljs-keyword">const</span> countStore = <span class="hljs-title function_">useCountStore</span>()<br><br><span class="hljs-comment">// 调用对应action</span><br>countStore.<span class="hljs-title function_">incrementOdd</span>(n.<span class="hljs-property">value</span>)<br></code></pre></td></tr></table></figure></li></ol><h2 id="5-4-storeToRefs"><a href="#5-4-storeToRefs" class="headerlink" title="5.4. storeToRefs"></a>5.4. storeToRefs</h2><ul><li>借助<code>storeToRefs</code>将<code>store</code>中的数据转为<code>ref</code>对象，方便在模板中使用。</li><li>注意：<code>pinia</code>提供的<code>storeToRefs</code>只会将数据做转换，而<code>Vue</code>的<code>toRefs</code>会转换<code>store</code>中方法。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div class=&quot;count&quot;&gt;<br>&lt;h2&gt;当前求和为：&#123;&#123;sum&#125;&#125;&lt;/h2&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot; name=&quot;Count&quot;&gt;<br>  import &#123; useCountStore &#125; from &#x27;@/store/count&#x27;<br>  /* 引入storeToRefs */<br>  import &#123; storeToRefs &#125; from &#x27;pinia&#x27;<br><br>/* 得到countStore */<br>  const countStore = useCountStore()<br>  /* 使用storeToRefs转换countStore，随后解构 */<br>  const &#123;sum&#125; = storeToRefs(countStore)<br>&lt;/script&gt;<br><br></code></pre></td></tr></table></figure><h2 id="5-5-getters"><a href="#5-5-getters" class="headerlink" title="5.5. getters"></a>5.5. getters</h2><ol><li><p>概念：当<code>state</code>中的数据，需要经过处理后再使用时，可以使用<code>getters</code>配置。</p></li><li><p>追加<code>getters</code>配置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 引入defineStore用于创建store</span><br><span class="hljs-keyword">import</span> &#123;defineStore&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pinia&#x27;</span><br><br><span class="hljs-comment">// 定义并暴露一个store</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> useCountStore = <span class="hljs-title function_">defineStore</span>(<span class="hljs-string">&#x27;count&#x27;</span>,&#123;<br>  <span class="hljs-comment">// 动作</span><br>  <span class="hljs-attr">actions</span>:&#123;<br>    <span class="hljs-comment">/************/</span><br>  &#125;,<br>  <span class="hljs-comment">// 状态</span><br>  <span class="hljs-title function_">state</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">sum</span>:<span class="hljs-number">1</span>,<br>      <span class="hljs-attr">school</span>:<span class="hljs-string">&#x27;atguigu&#x27;</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-comment">// 计算</span><br>  <span class="hljs-attr">getters</span>:&#123;<br>    <span class="hljs-attr">bigSum</span>:(state):<span class="hljs-function"><span class="hljs-params">number</span> =&gt;</span> state.<span class="hljs-property">sum</span> *<span class="hljs-number">10</span>,<br>    <span class="hljs-title function_">upperSchool</span>():string&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>. school.<span class="hljs-title function_">toUpperCase</span>()<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>组件中读取数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123;increment,decrement&#125; = countStore<br><span class="hljs-keyword">let</span> &#123;sum,school,bigSum,upperSchool&#125; = <span class="hljs-title function_">storeToRefs</span>(countStore)<br></code></pre></td></tr></table></figure></li></ol><h2 id="5-6-subscribe"><a href="#5-6-subscribe" class="headerlink" title="5.6. $subscribe"></a>5.6. $subscribe</h2><p>通过 store 的 <code>$subscribe()</code> 方法侦听 <code>state</code> 及其变化</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ts">talkStore.$subscribe(<span class="hljs-function">(<span class="hljs-params">mutate,state</span>)=&gt;</span>&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;LoveTalk&#x27;</span>,mutate,state)<br>  <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&#x27;talk&#x27;</span>,<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(talkList.<span class="hljs-property">value</span>))<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="5-7-store组合式写法"><a href="#5-7-store组合式写法" class="headerlink" title="5.7. store组合式写法"></a>5.7. store组合式写法</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; defineStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;pinia&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; computed, ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><br><span class="hljs-comment">// 组合式写法</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> useCountStore = <span class="hljs-title function_">defineStore</span>(<span class="hljs-string">&#x27;Count&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">// state</span><br>  <span class="hljs-keyword">let</span> sum = <span class="hljs-title function_">ref</span>(<span class="hljs-number">0</span>)<br>  <span class="hljs-keyword">let</span> school = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&#x27;uestc&#x27;</span>)<br>  <span class="hljs-keyword">let</span> address = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&#x27;四川成都&#x27;</span>)<br>  <span class="hljs-comment">// actions</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">increment</span>(<span class="hljs-params"><span class="hljs-attr">value</span>: <span class="hljs-built_in">number</span></span>) &#123;<br>    sum.<span class="hljs-property">value</span> += value<br>  &#125;<br>  <span class="hljs-comment">// getters</span><br>  <span class="hljs-keyword">let</span> bigSum = <span class="hljs-title function_">computed</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> sum.<span class="hljs-property">value</span> * <span class="hljs-number">10</span><br>  &#125;)<br>  <span class="hljs-keyword">let</span> upperSchool = <span class="hljs-title function_">computed</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> school.<span class="hljs-property">value</span>.<span class="hljs-title function_">toUpperCase</span>()<br>  &#125;)<br>  <span class="hljs-keyword">return</span> &#123; sum, school, address, increment, bigSum, upperSchool &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h1 id="6-组件通信"><a href="#6-组件通信" class="headerlink" title="6. 组件通信"></a>6. 组件通信</h1><p><strong><code>Vue3</code>组件通信和<code>Vue2</code>的区别：</strong></p><ul><li>移出事件总线，使用<code>mitt</code>代替。</li></ul><ul><li><code>vuex</code>换成了<code>pinia</code>。</li><li>把<code>.sync</code>优化到了<code>v-model</code>里面了。</li><li>把<code>$listeners</code>所有的东西，合并到<code>$attrs</code>中了。</li><li><code>$children</code>被砍掉了。</li></ul><p><strong>常见搭配形式：</strong></p><p><img src="/2024/09/24/%E5%AD%A6%E4%B9%A0Vue3/img/image-20231119185900990.png"></p><h2 id="6-1-组件通信-props"><a href="#6-1-组件通信-props" class="headerlink" title="6.1. 组件通信_props"></a>6.1. 组件通信_props</h2><p>概述：<code>props</code>是使用频率最高的一种通信方式，常用与 ：<strong>父 ↔ 子</strong>。</p><ul><li>若 <strong>父传子</strong>：属性值是<strong>非函数</strong>。</li><li>若 <strong>子传父</strong>：属性值是<strong>函数</strong>。</li></ul><p>父组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;father&quot;&gt;<br>    &lt;h3&gt;父组件，&lt;/h3&gt;<br>&lt;h4&gt;我的车：&#123;&#123; car &#125;&#125;&lt;/h4&gt;<br>&lt;h4&gt;儿子给的玩具：&#123;&#123; toy &#125;&#125;&lt;/h4&gt;<br>&lt;Child :car=&quot;car&quot; :getToy=&quot;getToy&quot;/&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot; name=&quot;Father&quot;&gt;<br>import Child from &#x27;./Child.vue&#x27;<br>import &#123; ref &#125; from &quot;vue&quot;;<br>// 数据<br>const car = ref(&#x27;奔驰&#x27;)<br>const toy = ref()<br>// 方法<br>function getToy(value:string)&#123;<br>toy.value = value<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>子组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;child&quot;&gt;<br>    &lt;h3&gt;子组件&lt;/h3&gt;<br>&lt;h4&gt;我的玩具：&#123;&#123; toy &#125;&#125;&lt;/h4&gt;<br>&lt;h4&gt;父给我的车：&#123;&#123; car &#125;&#125;&lt;/h4&gt;<br>&lt;button @click=&quot;getToy(toy)&quot;&gt;玩具给父亲&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot; name=&quot;Child&quot;&gt;<br>import &#123; ref &#125; from &quot;vue&quot;;<br>const toy = ref(&#x27;奥特曼&#x27;)<br><br>defineProps([&#x27;car&#x27;,&#x27;getToy&#x27;])<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="6-2-自定义事件"><a href="#6-2-自定义事件" class="headerlink" title="6.2. 自定义事件"></a>6.2. 自定义事件</h2><ol><li>概述：自定义事件常用于：<strong>子 &#x3D;&gt; 父。</strong></li><li>注意区分好：原生事件、自定义事件。</li></ol><ul><li>原生事件：<ul><li>事件名是特定的（<code>click</code>、<code>mouseenter</code>等等）</li><li>事件对象<code>$event</code>: 是包含事件相关信息的对象（<code>pageX</code>、<code>pageY</code>、<code>target</code>、<code>keyCode</code>）</li></ul></li><li>自定义事件：<ul><li>事件名是任意名称</li><li><strong style="color:red">事件对象<code>$event</code>: 是调用<code>emit</code>时所提供的数据，可以是任意类型！！！</strong></li></ul></li></ul><ol start="3"><li><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--在父组件中，给子组件绑定自定义事件：--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Child</span> @<span class="hljs-attr">send-toy</span>=<span class="hljs-string">&quot;toy = $event&quot;</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!--注意区分原生事件与自定义事件中的$event--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;toy = $event&quot;</span>&gt;</span>测试<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//子组件中，触发事件：</span><br><span class="hljs-variable language_">this</span>.$emit(<span class="hljs-string">&#x27;send-toy&#x27;</span>, 具体数据)<br></code></pre></td></tr></table></figure></li></ol><h2 id="6-3-mitt"><a href="#6-3-mitt" class="headerlink" title="6.3. mitt"></a>6.3. mitt</h2><p>概述：与消息订阅与发布（<code>pubsub</code>）功能类似，可以实现任意组件间通信。</p><p>安装<code>mitt</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i mitt<br></code></pre></td></tr></table></figure><p>新建文件：<code>src\utils\emitter.ts</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 引入mitt </span><br><span class="hljs-keyword">import</span> mitt <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;mitt&quot;</span>;<br><br><span class="hljs-comment">// 创建emitter</span><br><span class="hljs-keyword">const</span> emitter = <span class="hljs-title function_">mitt</span>()<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">  // 绑定事件</span><br><span class="hljs-comment">  emitter.on(&#x27;abc&#x27;,(value)=&gt;&#123;</span><br><span class="hljs-comment">    console.log(&#x27;abc事件被触发&#x27;,value)</span><br><span class="hljs-comment">  &#125;)</span><br><span class="hljs-comment">  emitter.on(&#x27;xyz&#x27;,(value)=&gt;&#123;</span><br><span class="hljs-comment">    console.log(&#x27;xyz事件被触发&#x27;,value)</span><br><span class="hljs-comment">  &#125;)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">  setInterval(() =&gt; &#123;</span><br><span class="hljs-comment">    // 触发事件</span><br><span class="hljs-comment">    emitter.emit(&#x27;abc&#x27;,666)</span><br><span class="hljs-comment">    emitter.emit(&#x27;xyz&#x27;,777)</span><br><span class="hljs-comment">  &#125;, 1000);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">  setTimeout(() =&gt; &#123;</span><br><span class="hljs-comment">    // 清理事件</span><br><span class="hljs-comment">    emitter.all.clear()</span><br><span class="hljs-comment">  &#125;, 3000); </span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// 创建并暴露mitt</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> emitter<br></code></pre></td></tr></table></figure><p>接收数据的组件中：绑定事件、同时在销毁前解绑事件：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> emitter <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/utils/emitter&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; onUnmounted &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><br><span class="hljs-comment">// 绑定事件</span><br>emitter.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;send-toy&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">value</span>)=&gt;</span>&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;send-toy事件被触发&#x27;</span>,value)<br>&#125;)<br><br><span class="hljs-title function_">onUnmounted</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>  <span class="hljs-comment">// 解绑事件</span><br>  emitter.<span class="hljs-title function_">off</span>(<span class="hljs-string">&#x27;send-toy&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p> 第三步 ：提供数据的组件，在合适的时候触发事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> emitter <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/utils/emitter&quot;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sendToy</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-comment">// 触发事件</span><br>  emitter.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;send-toy&#x27;</span>,toy.<span class="hljs-property">value</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意这个重要的内置关系，总线依赖着这个内置关系</strong></p><h2 id="6-4-v-model"><a href="#6-4-v-model" class="headerlink" title="6.4. v-model"></a>6.4. v-model</h2><ol><li><p>概述：实现 <strong>父↔子</strong> 之间相互通信。</p></li><li><p>前序知识 —— <code>v-model</code>的本质</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- 使用v-model指令 --&gt;<br>&lt;input type=&quot;text&quot; v-model=&quot;userName&quot;&gt;<br><br>&lt;!-- v-model的本质是下面这行代码 --&gt;<br>&lt;input <br>  type=&quot;text&quot; <br>  :value=&quot;userName&quot; <br>  @input=&quot;userName =(&lt;HTMLInputElement&gt;$event.target).value&quot;<br>&gt;<br></code></pre></td></tr></table></figure></li><li><p>组件标签上的<code>v-model</code>的本质：<code>:moldeValue</code> ＋ <code>update:modelValue</code>事件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- 组件标签上使用v-model指令 --&gt;<br>&lt;AtguiguInput v-model=&quot;userName&quot;/&gt;<br><br>&lt;!-- 组件标签上v-model的本质 --&gt;<br>&lt;AtguiguInput :modelValue=&quot;userName&quot; @update:model-value=&quot;userName = $event&quot;/&gt;<br></code></pre></td></tr></table></figure><p><code>AtguiguInput</code>组件中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;box&quot;&gt;<br>    &lt;!--将接收的value值赋给input元素的value属性，目的是：为了呈现数据 --&gt;<br>&lt;!--给input元素绑定原生input事件，触发input事件时，进而触发update:model-value事件--&gt;<br>    &lt;input <br>       type=&quot;text&quot; <br>       :value=&quot;modelValue&quot; <br>       @input=&quot;emit(&#x27;update:model-value&#x27;,$event.target.value)&quot;<br>    &gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot; name=&quot;AtguiguInput&quot;&gt;<br>  // 接收props<br>  defineProps([&#x27;modelValue&#x27;])<br>  // 声明事件<br>  const emit = defineEmits([&#x27;update:model-value&#x27;])<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li><li><p>也可以更换<code>value</code>，例如改成<code>abc</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- 也可以更换value，例如改成abc--&gt;<br>&lt;AtguiguInput v-model:abc=&quot;userName&quot;/&gt;<br><br>&lt;!-- 上面代码的本质如下 --&gt;<br>&lt;AtguiguInput :abc=&quot;userName&quot; @update:abc=&quot;userName = $event&quot;/&gt;<br></code></pre></td></tr></table></figure><p><code>AtguiguInput</code>组件中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;box&quot;&gt;<br>    &lt;input <br>       type=&quot;text&quot; <br>       :value=&quot;abc&quot; <br>       @input=&quot;emit(&#x27;update:abc&#x27;,$event.target.value)&quot;<br>    &gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot; name=&quot;AtguiguInput&quot;&gt;<br>  // 接收props<br>  defineProps([&#x27;abc&#x27;])<br>  // 声明事件<br>  const emit = defineEmits([&#x27;update:abc&#x27;])<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li><li><p>如果<code>value</code>可以更换，那么就可以在组件标签上多次使用<code>v-model</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;AtguiguInput v-model:abc=&quot;userName&quot; v-model:xyz=&quot;password&quot;/&gt;<br></code></pre></td></tr></table></figure></li></ol><h2 id="6-5-attrs"><a href="#6-5-attrs" class="headerlink" title="6.5. $attrs"></a>6.5. $attrs</h2><ol><li><p>概述：<code>$attrs</code>用于实现<strong>当前组件的父组件</strong>，向<strong>当前组件的子组件</strong>通信（<strong>祖→孙</strong>）。</p></li><li><p>具体说明：<code>$attrs</code>是一个对象，包含所有父组件传入的标签属性。</p><blockquote><p> 注意：<code>$attrs</code>会自动排除<code>props</code>中声明的属性(可以认为声明过的 <code>props</code> 被子组件自己“消费”了)</p></blockquote></li></ol><p>父组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;father&quot;&gt;<br>    &lt;h3&gt;父组件&lt;/h3&gt;<br>&lt;Child :a=&quot;a&quot; :b=&quot;b&quot; :c=&quot;c&quot; :d=&quot;d&quot; v-bind=&quot;&#123;x:100,y:200&#125;&quot; :updateA=&quot;updateA&quot;/&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot; name=&quot;Father&quot;&gt;<br>import Child from &#x27;./Child.vue&#x27;<br>import &#123; ref &#125; from &quot;vue&quot;;<br>let a = ref(1)<br>let b = ref(2)<br>let c = ref(3)<br>let d = ref(4)<br><br>function updateA(value)&#123;<br>a.value += value<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>子组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div class=&quot;child&quot;&gt;<br>&lt;h3&gt;子组件&lt;/h3&gt;<br>&lt;GrandChild v-bind=&quot;$attrs&quot;/&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot; name=&quot;Child&quot;&gt;<br>import GrandChild from &#x27;./GrandChild.vue&#x27;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>孙组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div class=&quot;grand-child&quot;&gt;<br>&lt;h3&gt;孙组件&lt;/h3&gt;<br>&lt;h4&gt;a：&#123;&#123; a &#125;&#125;&lt;/h4&gt;<br>&lt;h4&gt;b：&#123;&#123; b &#125;&#125;&lt;/h4&gt;<br>&lt;h4&gt;c：&#123;&#123; c &#125;&#125;&lt;/h4&gt;<br>&lt;h4&gt;d：&#123;&#123; d &#125;&#125;&lt;/h4&gt;<br>&lt;h4&gt;x：&#123;&#123; x &#125;&#125;&lt;/h4&gt;<br>&lt;h4&gt;y：&#123;&#123; y &#125;&#125;&lt;/h4&gt;<br>&lt;button @click=&quot;updateA(2)&quot;&gt;点我更新A&lt;/button&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot; name=&quot;GrandChild&quot;&gt;<br>defineProps([&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;x&#x27;,&#x27;y&#x27;,&#x27;updateA&#x27;])<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="6-6-refs、-parent"><a href="#6-6-refs、-parent" class="headerlink" title="6.6. $refs、$parent"></a>6.6. $refs、$parent</h2><ol><li><p>概述：</p><ul><li><code>$refs</code>用于 ：<strong>父→子。</strong></li><li><code>$parent</code>用于：<strong>子→父。</strong></li></ul></li><li><p>原理如下：</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td><code>$refs</code></td><td>值为对象，包含所有被<code>ref</code>属性标识的<code>DOM</code>元素或组件实例。</td></tr><tr><td><code>$parent</code></td><td>值为对象，当前组件的父组件实例对象。</td></tr></tbody></table></li></ol><p>父组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;button @click=&quot;changeBook($refs)&quot;&gt;修改所有孩子的书籍&lt;/button&gt;<br></code></pre></td></tr></table></figure><p>子组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;button @click=&quot;decreaseHouse($parent)&quot;&gt;使父亲的房产-1&lt;/button&gt;<br></code></pre></td></tr></table></figure><h2 id="6-7-provide、inject"><a href="#6-7-provide、inject" class="headerlink" title="6.7. provide、inject"></a>6.7. provide、inject</h2><ol><li><p>概述：实现<strong>祖孙组件</strong>直接通信</p></li><li><p>具体使用：</p><ul><li>在祖先组件中通过<code>provide</code>配置向后代组件提供数据</li><li>在后代组件中通过<code>inject</code>配置来声明接收数据</li></ul></li><li><p>具体编码：</p><p>第一步 父组件中，使用<code>provide</code>提供数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;father&quot;&gt;<br>    &lt;h3&gt;父组件&lt;/h3&gt;<br>    &lt;h4&gt;资产：&#123;&#123; money &#125;&#125;&lt;/h4&gt;<br>    &lt;h4&gt;汽车：&#123;&#123; car &#125;&#125;&lt;/h4&gt;<br>    &lt;button @click=&quot;money += 1&quot;&gt;资产+1&lt;/button&gt;<br>    &lt;button @click=&quot;car.price += 1&quot;&gt;汽车价格+1&lt;/button&gt;<br>    &lt;Child/&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot; name=&quot;Father&quot;&gt;<br>  import Child from &#x27;./Child.vue&#x27;<br>  import &#123; ref,reactive,provide &#125; from &quot;vue&quot;;<br>  // 数据<br>  let money = ref(100)<br>  let car = reactive(&#123;<br>    brand:&#x27;奔驰&#x27;,<br>    price:100<br>  &#125;)<br>  // 用于更新money的方法<br>  function updateMoney(value:number)&#123;<br>    money.value += value<br>  &#125;<br>  // 提供数据<br>  provide(&#x27;moneyContext&#x27;,&#123;money,updateMoney&#125;)<br>  provide(&#x27;car&#x27;,car)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><blockquote><p>注意：子组件中不用编写任何东西，是不受到任何打扰的</p></blockquote><p>第二步 孙组件中使用<code>inject</code>配置项接受数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;grand-child&quot;&gt;<br>    &lt;h3&gt;我是孙组件&lt;/h3&gt;<br>    &lt;h4&gt;资产：&#123;&#123; money &#125;&#125;&lt;/h4&gt;<br>    &lt;h4&gt;汽车：&#123;&#123; car &#125;&#125;&lt;/h4&gt;<br>    &lt;button @click=&quot;updateMoney(6)&quot;&gt;点我&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot; name=&quot;GrandChild&quot;&gt;<br>  import &#123; inject &#125; from &#x27;vue&#x27;;<br>  // 注入数据<br> let &#123;money,updateMoney&#125; = inject(&#x27;moneyContext&#x27;,&#123;money:0,updateMoney:(x:number)=&gt;&#123;&#125;&#125;)<br>  let car = inject(&#x27;car&#x27;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li></ol><h2 id="6-8-pinia"><a href="#6-8-pinia" class="headerlink" title="6.8. pinia"></a>6.8. pinia</h2><p>参考之前<code>pinia</code>的部分</p><h2 id="6-9-slot"><a href="#6-9-slot" class="headerlink" title="6.9. slot"></a>6.9. slot</h2><h3 id="1-默认插槽"><a href="#1-默认插槽" class="headerlink" title="1. 默认插槽"></a>1. 默认插槽</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs vue">父组件中：<br>        &lt;Category title=&quot;今日热门游戏&quot;&gt;<br>          &lt;ul&gt;<br>            &lt;li v-for=&quot;g in games&quot; :key=&quot;g.id&quot;&gt;&#123;&#123; g.name &#125;&#125;&lt;/li&gt;<br>          &lt;/ul&gt;<br>        &lt;/Category&gt;<br>子组件中：<br>        &lt;template&gt;<br>          &lt;div class=&quot;item&quot;&gt;<br>            &lt;h3&gt;&#123;&#123; title &#125;&#125;&lt;/h3&gt;<br>            &lt;!-- 默认插槽 --&gt;<br>            &lt;slot&gt;&lt;/slot&gt;<br>          &lt;/div&gt;<br>        &lt;/template&gt;<br></code></pre></td></tr></table></figure><h3 id="2-具名插槽"><a href="#2-具名插槽" class="headerlink" title="2. 具名插槽"></a>2. 具名插槽</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs vue">父组件中：<br>        &lt;Category title=&quot;今日热门游戏&quot;&gt;<br>          &lt;template v-slot:s1&gt;<br>            &lt;ul&gt;<br>              &lt;li v-for=&quot;g in games&quot; :key=&quot;g.id&quot;&gt;&#123;&#123; g.name &#125;&#125;&lt;/li&gt;<br>            &lt;/ul&gt;<br>          &lt;/template&gt;<br>          &lt;template #s2&gt;<br>            &lt;a href=&quot;&quot;&gt;更多&lt;/a&gt;<br>          &lt;/template&gt;<br>        &lt;/Category&gt;<br>子组件中：<br>        &lt;template&gt;<br>          &lt;div class=&quot;item&quot;&gt;<br>            &lt;h3&gt;&#123;&#123; title &#125;&#125;&lt;/h3&gt;<br>            &lt;slot name=&quot;s1&quot;&gt;&lt;/slot&gt;<br>            &lt;slot name=&quot;s2&quot;&gt;&lt;/slot&gt;<br>          &lt;/div&gt;<br>        &lt;/template&gt;<br></code></pre></td></tr></table></figure><h3 id="3-作用域插槽"><a href="#3-作用域插槽" class="headerlink" title="3. 作用域插槽"></a>3. 作用域插槽</h3><ol><li><p>理解：<span style="color:red">数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。</span>（新闻数据在<code>News</code>组件中，但使用数据所遍历出来的结构由<code>App</code>组件决定）</p></li><li><p>具体编码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs vue">父组件中：<br>      &lt;Game v-slot=&quot;params&quot;&gt;<br>      &lt;!-- &lt;Game v-slot:default=&quot;params&quot;&gt; --&gt;<br>      &lt;!-- &lt;Game #default=&quot;params&quot;&gt; --&gt;<br>        &lt;ul&gt;<br>          &lt;li v-for=&quot;g in params.games&quot; :key=&quot;g.id&quot;&gt;&#123;&#123; g.name &#125;&#125;&lt;/li&gt;<br>        &lt;/ul&gt;<br>      &lt;/Game&gt;<br><br>子组件中：<br>      &lt;template&gt;<br>        &lt;div class=&quot;category&quot;&gt;<br>          &lt;h2&gt;今日游戏榜单&lt;/h2&gt;<br>          &lt;slot :games=&quot;games&quot; a=&quot;哈哈&quot;&gt;&lt;/slot&gt;<br>        &lt;/div&gt;<br>      &lt;/template&gt;<br><br>      &lt;script setup lang=&quot;ts&quot; name=&quot;Category&quot;&gt;<br>        import &#123;reactive&#125; from &#x27;vue&#x27;<br>        let games = reactive([<br>          &#123;id:&#x27;asgdytsa01&#x27;,name:&#x27;英雄联盟&#x27;&#125;,<br>          &#123;id:&#x27;asgdytsa02&#x27;,name:&#x27;王者荣耀&#x27;&#125;,<br>          &#123;id:&#x27;asgdytsa03&#x27;,name:&#x27;红色警戒&#x27;&#125;,<br>          &#123;id:&#x27;asgdytsa04&#x27;,name:&#x27;斗罗大陆&#x27;&#125;<br>        ])<br>      &lt;/script&gt;<br></code></pre></td></tr></table></figure></li></ol><h1 id="7-其它-API"><a href="#7-其它-API" class="headerlink" title="7. 其它 API"></a>7. 其它 API</h1><h2 id="7-1-shallowRef-与-shallowReactive"><a href="#7-1-shallowRef-与-shallowReactive" class="headerlink" title="7.1. shallowRef 与 shallowReactive"></a>7.1. shallowRef 与 shallowReactive</h2><h3 id="shallowRef"><a href="#shallowRef" class="headerlink" title="shallowRef"></a><code>shallowRef</code></h3><ol><li><p>作用：创建一个响应式数据，但只对顶层属性进行响应式处理。</p></li><li><p>用法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> myVar = <span class="hljs-title function_">shallowRef</span>(initialValue);<br></code></pre></td></tr></table></figure></li><li><p>特点：只跟踪引用值的变化，不关心值内部的属性变化。</p></li></ol><h3 id="shallowReactive"><a href="#shallowReactive" class="headerlink" title="shallowReactive"></a><code>shallowReactive</code></h3><ol><li><p>作用：创建一个浅层响应式对象，只会使对象的最顶层属性变成响应式的，对象内部的嵌套属性则不会变成响应式的</p></li><li><p>用法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> myObj = <span class="hljs-title function_">shallowReactive</span>(&#123; ... &#125;);<br></code></pre></td></tr></table></figure></li><li><p>特点：对象的顶层属性是响应式的，但嵌套对象的属性不是。</p></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><p>通过使用 <a href="https://cn.vuejs.org/api/reactivity-advanced.html#shallowref"><code>shallowRef()</code></a> 和 <a href="https://cn.vuejs.org/api/reactivity-advanced.html#shallowreactive"><code>shallowReactive()</code></a> 来绕开深度响应。浅层式 <code>API</code> 创建的状态只在其顶层是响应式的，对所有深层的对象不会做任何处理，避免了对每一个内部属性做响应式所带来的性能成本，这使得属性的访问变得更快，可提升性能。</p></blockquote><h2 id="7-2-readonly-与-shallowReadonly"><a href="#7-2-readonly-与-shallowReadonly" class="headerlink" title="7.2. readonly 与 shallowReadonly"></a>7.2. readonly 与 shallowReadonly</h2><h3 id="readonly"><a href="#readonly" class="headerlink" title="readonly"></a><strong><code>readonly</code></strong></h3><ol><li><p>作用：用于创建一个对象的深只读副本。</p></li><li><p>用法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> original = <span class="hljs-title function_">reactive</span>(&#123; ... &#125;);<br><span class="hljs-keyword">const</span> readOnlyCopy = <span class="hljs-title function_">readonly</span>(original);<br></code></pre></td></tr></table></figure></li><li><p>特点：</p><ul><li>对象的所有嵌套属性都将变为只读。</li><li>任何尝试修改这个对象的操作都会被阻止（在开发模式下，还会在控制台中发出警告）。</li></ul></li><li><p>应用场景：</p><ul><li>创建不可变的状态快照。</li><li>保护全局状态或配置不被修改。</li></ul></li></ol><h3 id="shallowReadonly"><a href="#shallowReadonly" class="headerlink" title="shallowReadonly"></a><strong><code>shallowReadonly</code></strong></h3><ol><li><p>作用：与 <code>readonly</code> 类似，但只作用于对象的顶层属性。</p></li><li><p>用法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> original = <span class="hljs-title function_">reactive</span>(&#123; ... &#125;);<br><span class="hljs-keyword">const</span> shallowReadOnlyCopy = <span class="hljs-title function_">shallowReadonly</span>(original);<br></code></pre></td></tr></table></figure></li><li><p>特点：</p><ul><li><p>只将对象的顶层属性设置为只读，对象内部的嵌套属性仍然是可变的。</p></li><li><p>适用于只需保护对象顶层属性的场景。</p></li></ul></li></ol><h2 id="7-3-toRaw-与-markRaw"><a href="#7-3-toRaw-与-markRaw" class="headerlink" title="7.3. toRaw 与 markRaw"></a>7.3. toRaw 与 markRaw</h2><h3 id="toRaw"><a href="#toRaw" class="headerlink" title="toRaw"></a><code>toRaw</code></h3><ol><li><p>作用：用于获取一个响应式对象的原始对象， <code>toRaw</code> 返回的对象不再是响应式的，不会触发视图更新。</p><blockquote><p>官网描述：这是一个可以用于临时读取而不引起代理访问&#x2F;跟踪开销，或是写入而不触发更改的特殊方法。不建议保存对原始对象的持久引用，请谨慎使用。</p></blockquote><blockquote><p>何时使用？ —— 在需要将响应式对象传递给非 <code>Vue</code> 的库或外部系统时，使用 <code>toRaw</code> 可以确保它们收到的是普通对象</p></blockquote></li><li><p>具体编码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; reactive,toRaw,markRaw,isReactive &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><br><span class="hljs-comment">/* toRaw */</span><br><span class="hljs-comment">// 响应式对象</span><br><span class="hljs-keyword">let</span> person = <span class="hljs-title function_">reactive</span>(&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;tony&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">18</span>&#125;)<br><span class="hljs-comment">// 原始对象</span><br><span class="hljs-keyword">let</span> rawPerson = <span class="hljs-title function_">toRaw</span>(person)<br><br><br><span class="hljs-comment">/* markRaw */</span><br><span class="hljs-keyword">let</span> citysd = <span class="hljs-title function_">markRaw</span>([<br>  &#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;asdda01&#x27;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;北京&#x27;</span>&#125;,<br>  &#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;asdda02&#x27;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;上海&#x27;</span>&#125;,<br>  &#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;asdda03&#x27;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;天津&#x27;</span>&#125;,<br>  &#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;asdda04&#x27;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;重庆&#x27;</span>&#125;<br>])<br><span class="hljs-comment">// 根据原始对象citys去创建响应式对象citys2 —— 创建失败，因为citys被markRaw标记了</span><br><span class="hljs-keyword">let</span> citys2 = <span class="hljs-title function_">reactive</span>(citys)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">isReactive</span>(person))<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">isReactive</span>(rawPerson))<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">isReactive</span>(citys))<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">isReactive</span>(citys2))<br></code></pre></td></tr></table></figure></li></ol><h3 id="markRaw"><a href="#markRaw" class="headerlink" title="markRaw"></a><code>markRaw</code></h3><ol><li><p>作用：标记一个对象，使其<strong>永远不会</strong>变成响应式的。</p><blockquote><p>例如使用<code>mockjs</code>时，为了防止误把<code>mockjs</code>变为响应式对象，可以使用 <code>markRaw</code> 去标记<code>mockjs</code></p></blockquote></li><li><p>编码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/* markRaw */</span><br><span class="hljs-keyword">let</span> citys = <span class="hljs-title function_">markRaw</span>([<br>  &#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;asdda01&#x27;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;北京&#x27;</span>&#125;,<br>  &#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;asdda02&#x27;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;上海&#x27;</span>&#125;,<br>  &#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;asdda03&#x27;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;天津&#x27;</span>&#125;,<br>  &#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;asdda04&#x27;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;重庆&#x27;</span>&#125;<br>])<br><span class="hljs-comment">// 根据原始对象citys去创建响应式对象citys2 —— 创建失败，因为citys被markRaw标记了</span><br><span class="hljs-keyword">let</span> citys2 = <span class="hljs-title function_">reactive</span>(citys)<br></code></pre></td></tr></table></figure></li></ol><h2 id="7-4-customRef"><a href="#7-4-customRef" class="headerlink" title="7.4. customRef"></a>7.4. customRef</h2><p>作用：创建一个自定义的<code>ref</code>，并对其依赖项跟踪和更新触发进行逻辑控制。</p><p>实现防抖效果（<code>useSumRef.ts</code>）：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123;customRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-attr">initValue</span>:<span class="hljs-built_in">string</span>,<span class="hljs-attr">delay</span>:<span class="hljs-built_in">number</span></span>)&#123;<br>  <span class="hljs-keyword">let</span> msg = <span class="hljs-title function_">customRef</span>(<span class="hljs-function">(<span class="hljs-params">track,trigger</span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-attr">timer</span>:<span class="hljs-built_in">number</span><br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-title function_">track</span>() <span class="hljs-comment">// 告诉Vue数据msg很重要，要对msg持续关注，一旦变化就更新</span><br>        <span class="hljs-keyword">return</span> initValue<br>      &#125;,<br>      <span class="hljs-title function_">set</span>(<span class="hljs-params">value</span>)&#123;<br>        <span class="hljs-built_in">clearTimeout</span>(timer)<br>        timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>          initValue = value<br>          <span class="hljs-title function_">trigger</span>() <span class="hljs-comment">//通知Vue数据msg变化了</span><br>        &#125;, delay);<br>      &#125;<br>    &#125;<br>  &#125;) <br>  <span class="hljs-keyword">return</span> &#123;msg&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>组件中使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> useMsgRef <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./hooks/useMsgRef&#x27;</span>;<br><span class="hljs-comment">// 实现自定义延迟时间和默认值的响应式数据（防抖效果）</span><br><span class="hljs-keyword">let</span> &#123; msg &#125; = <span class="hljs-title function_">useMsgRef</span>(<span class="hljs-string">&#x27;monica&#x27;</span>, <span class="hljs-number">2000</span>)<br></code></pre></td></tr></table></figure><h1 id="8-Vue3新组件"><a href="#8-Vue3新组件" class="headerlink" title="8. Vue3新组件"></a>8. Vue3新组件</h1><h2 id="8-1-Teleport"><a href="#8-1-Teleport" class="headerlink" title="8.1. Teleport"></a>8.1. Teleport</h2><ul><li>什么是Teleport？—— Teleport 是一种能够将我们的<strong>组件html结构</strong>移动到指定位置的技术。to里面可以写css选择器字符串</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">teleport</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&#x27;body&#x27;</span> &gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal&quot;</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;isShow&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我是一个弹窗<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是弹窗中的一些内容<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;isShow = false&quot;</span>&gt;</span>关闭弹窗<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">teleport</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="8-2-Suspense"><a href="#8-2-Suspense" class="headerlink" title="8.2. Suspense"></a>8.2. Suspense</h2><ul><li>等待异步组件时渲染一些额外内容，让应用有更好的用户体验 </li><li>使用步骤： <ul><li>异步引入组件</li><li>使用<code>Suspense</code>包裹组件，与插槽结合使用，并配置好<template>标签上插槽的名字，<code>default</code> 与 <code>fallback</code></template></li></ul></li></ul><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> &#123; defineAsyncComponent,<span class="hljs-title class_">Suspense</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Child</span> = <span class="hljs-title function_">defineAsyncComponent</span>(<span class="hljs-function">()=&gt;</span><span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;./Child.vue&#x27;</span>))<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;app&quot;&gt;<br>    &lt;h1&gt;我是父组件&lt;/h1&gt;<br>    &lt;Suspense&gt;<br>      &lt;!-- 返回成功时，同插槽的结合使用 --&gt;<br>      &lt;template #default&gt;<br>        &lt;Child /&gt;<br>      &lt;/template&gt;<br><br>      &lt;!-- 返回失败时 --&gt;<br>      &lt;template #fallback&gt;<br>        &lt;p&gt;加载中...&lt;/p&gt;<br>      &lt;/template&gt;<br>    &lt;/Suspense&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h2 id="8-3-全局API转移到应用对象"><a href="#8-3-全局API转移到应用对象" class="headerlink" title="8.3. 全局API转移到应用对象"></a>8.3. 全局API转移到应用对象</h2><ul><li><code>app.component</code></li><li><code>app.config</code></li><li><code>app.directive</code></li><li><code>app.mount</code></li><li><code>app.unmount</code></li><li><code>app.use</code></li></ul><h2 id="8-4-其他"><a href="#8-4-其他" class="headerlink" title="8.4. 其他"></a>8.4. 其他</h2><ul><li><p>过渡类名 <code>v-enter</code> 修改为 <code>v-enter-from</code>、过渡类名 <code>v-leave</code> 修改为 <code>v-leave-from</code>。</p></li><li><p><code>keyCode</code> 作为 <code>v-on</code> 修饰符的支持。</p></li><li><p><code>v-model</code> 指令在组件上的使用已经被重新设计，替换掉了 <code>v-bind.sync。</code></p></li><li><p><code>v-if</code> 和 <code>v-for</code> 在同一个元素身上使用时的优先级发生了变化。</p></li><li><p>移除了<code>$on</code>、<code>$off</code> 和 <code>$once</code> 实例方法。</p></li><li><p>移除了过滤器 <code>filter</code>。</p></li><li><p>移除了<code>$children</code> 实例 <code>property</code>。</p><p>……</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Vue3</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学习AJAX</title>
    <link href="/2024/09/24/%E5%AD%A6%E4%B9%A0AJAX/"/>
    <url>/2024/09/24/%E5%AD%A6%E4%B9%A0AJAX/</url>
    
    <content type="html"><![CDATA[<h1 id="AJAX学习"><a href="#AJAX学习" class="headerlink" title="AJAX学习"></a>AJAX学习</h1><h2 id="1-原生AJAX"><a href="#1-原生AJAX" class="headerlink" title="1.原生AJAX"></a>1.原生AJAX</h2><h3 id="1-1-AJAX简介"><a href="#1-1-AJAX简介" class="headerlink" title="1.1 AJAX简介"></a>1.1 AJAX简介</h3><p>异步的JS和XML</p><p>在浏览器中向服务器发送异步的请求，<strong>无刷新地获取数据</strong></p><h3 id="1-2-XML简介"><a href="#1-2-XML简介" class="headerlink" title="1.2 XML简介"></a>1.2 XML简介</h3><p>可扩展标记语言，可用来传输和存储数据，没有预定义标签，全是自定义标签</p><p>例如有一条学生数据：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">student</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>monica<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">age</span>&gt;</span>18<span class="hljs-tag">&lt;/<span class="hljs-name">age</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">gender</span>&gt;</span>female<span class="hljs-tag">&lt;/<span class="hljs-name">gender</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">student</span>&gt;</span><br></code></pre></td></tr></table></figure><p>现在已经被JSON取代</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;monica&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">18</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;gender&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;female&quot;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="1-3-AJAX的特点"><a href="#1-3-AJAX的特点" class="headerlink" title="1.3 AJAX的特点"></a>1.3 AJAX的特点</h3><h4 id="1-3-1-AJAX优点"><a href="#1-3-1-AJAX优点" class="headerlink" title="1.3.1 AJAX优点"></a>1.3.1 AJAX优点</h4><p>无需刷新页面与服务器通信</p><p>允许根据用户事件更新部分页面内容</p><h4 id="1-3-2-AJAX缺点"><a href="#1-3-2-AJAX缺点" class="headerlink" title="1.3.2 AJAX缺点"></a>1.3.2 AJAX缺点</h4><p>没有浏览历史，不能回退</p><p>存在跨域问题</p><p>SEO（搜索引擎优化）不友好，爬虫爬取不到</p><h3 id="1-4-HTTP报文"><a href="#1-4-HTTP报文" class="headerlink" title="1.4 HTTP报文"></a>1.4 HTTP报文</h3><p>可在network中查看</p><h4 id="请求报文"><a href="#请求报文" class="headerlink" title="请求报文"></a>请求报文</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">行POST /<span class="hljs-keyword">server</span>  HTTP/<span class="hljs-number">1.1</span><br><br>头Host: <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">8000</span><br><br>​<span class="hljs-keyword">User</span>-Agent: Chrome <span class="hljs-number">83</span><br><br>空行<br><br>体username=monica&amp;<span class="hljs-keyword">password</span>=<span class="hljs-number">123</span><br></code></pre></td></tr></table></figure><h4 id="响应报文"><a href="#响应报文" class="headerlink" title="响应报文"></a>响应报文</h4><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arcade">行 HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK<br><br>头Content-Type: <span class="hljs-built_in">text</span>/html; charset=utf<span class="hljs-number">-8</span><br><br>​Content-<span class="hljs-built_in">Length</span>: <span class="hljs-number">15</span><br><br>空行<br><br>体hello,ajax POST<br></code></pre></td></tr></table></figure><h3 id="1-5-express框架"><a href="#1-5-express框架" class="headerlink" title="1.5 express框架"></a>1.5 express框架</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1.引入express</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">const</span> &#123; request &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<br><br><span class="hljs-comment">// 2.创建应用对象</span><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();<br><br><span class="hljs-comment">// 3.创建路由规则</span><br><span class="hljs-comment">// request 是对请求报文封装,response 是对响应报文封装</span><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">request, response</span>) =&gt;</span> &#123;<br>    response.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;hello,express&#x27;</span>)<br>&#125;)<br><br><span class="hljs-comment">// 4.监听端口，启动服务</span><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">8000</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;server starts,listening on 8000...&#x27;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="1-6-1-AJAX案例-请求的基本操作"><a href="#1-6-1-AJAX案例-请求的基本操作" class="headerlink" title="1.6.1 AJAX案例_请求的基本操作"></a>1.6.1 AJAX案例_请求的基本操作</h3><p>GET.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>ajax get请求<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-id">#result</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid pink;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>点我发送请求<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;result&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 获取对象</span></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> result = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#result&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-comment">// 绑定按钮点击事件</span></span><br><span class="language-javascript">        btn.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 1.创建对象</span></span><br><span class="language-javascript">            <span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();</span><br><span class="language-javascript">            <span class="hljs-comment">// 2.初始化</span></span><br><span class="language-javascript">            xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;http://localhost:8000/server&#x27;</span>);</span><br><span class="language-javascript">            <span class="hljs-comment">// 3.发送</span></span><br><span class="language-javascript">            xhr.<span class="hljs-title function_">send</span>();</span><br><span class="language-javascript">            <span class="hljs-comment">// 4.事件绑定，处理服务端返回的结果</span></span><br><span class="language-javascript">            <span class="hljs-comment">// 只要 readyState 属性发生变化，就会调用相应的处理函数</span></span><br><span class="language-javascript">            <span class="hljs-comment">// XMLHttpRequest.onreadystatechange 会在 XMLHttpRequest 的readyState 属性发生改变时触发 readystatechange 事件的时候被调用。</span></span><br><span class="language-javascript">            xhr.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 判断当服务端返回了所有的结果</span></span><br><span class="language-javascript">                <span class="hljs-keyword">if</span> (xhr.<span class="hljs-property">readyState</span> === <span class="hljs-number">4</span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-comment">// 响应成功</span></span><br><span class="language-javascript">                    <span class="hljs-keyword">if</span> (xhr.<span class="hljs-property">status</span> &gt;= <span class="hljs-number">200</span> &amp;&amp; xhr.<span class="hljs-property">status</span> &lt; <span class="hljs-number">300</span>) &#123;</span><br><span class="language-javascript">                        <span class="hljs-comment">// 响应</span></span><br><span class="language-javascript">                        <span class="hljs-comment">// console.log(xhr.status);</span></span><br><span class="language-javascript">                        <span class="hljs-comment">// console.log(xhr.statusText);</span></span><br><span class="language-javascript">                        <span class="hljs-comment">// console.log(xhr.getAllResponseHeaders());</span></span><br><span class="language-javascript">                        <span class="hljs-comment">// console.log(xhr.response);</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">                        <span class="hljs-comment">// 处理结果</span></span><br><span class="language-javascript">                        result.<span class="hljs-property">innerHTML</span> = xhr.<span class="hljs-property">response</span>;</span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        &#125;;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>server.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express=<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">const</span> app=<span class="hljs-title function_">express</span>();<br><span class="hljs-comment">// 访问路由为localhost:8000/server</span><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/server&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">request,response</span>)=&gt;</span>&#123;<br>    <span class="hljs-comment">// 设置响应头，允许跨域</span><br>    response.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;Access-Control-Allow-Origin&#x27;</span>,<span class="hljs-string">&#x27;*&#x27;</span>)<br>    <span class="hljs-comment">// 设置响应体</span><br>    response.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;hello,ajax&#x27;</span>)<br>&#125;)<br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">8000</span>,<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;server running on 8000...&#x27;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="1-6-2-设置请求参数"><a href="#1-6-2-设置请求参数" class="headerlink" title="1.6.2 设置请求参数"></a>1.6.2 设置请求参数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 设置请求参数</span><br>xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;http://localhost:8000/serverusername=monica&amp;password=123&amp;gender=female&#x27;</span>);<br><br></code></pre></td></tr></table></figure><p><img src="/2024/09/24/%E5%AD%A6%E4%B9%A0AJAX/img/image-20241016213728737.png"></p><h3 id="1-6-3-发送POST请求"><a href="#1-6-3-发送POST请求" class="headerlink" title="1.6.3 发送POST请求"></a>1.6.3 发送POST请求</h3><p>POST.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>ajax POST 请求<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.result</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid pink;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 鼠标悬浮于div上发送POST请求，并在div中呈现响应结果 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;result&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 获取对象</span></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> result = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.result&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-comment">// 绑定事件</span></span><br><span class="language-javascript">        result.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;mouseover&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 1.创建对象</span></span><br><span class="language-javascript">            <span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();</span><br><span class="language-javascript">            <span class="hljs-comment">// 2.初始化</span></span><br><span class="language-javascript">            xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;POST&#x27;</span>, <span class="hljs-string">&#x27;http://127.0.0.1:8000/server&#x27;</span>);</span><br><span class="language-javascript">            <span class="hljs-comment">// 3.发送</span></span><br><span class="language-javascript">            <span class="hljs-comment">// 可以设置请求体</span></span><br><span class="language-javascript">            <span class="hljs-comment">// xhr.send();</span></span><br><span class="language-javascript">            xhr.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;a=100&amp;b=200&amp;c=300&#x27;</span>);</span><br><span class="language-javascript">            <span class="hljs-comment">// 4.事件绑定，处理返回结果</span></span><br><span class="language-javascript">            xhr.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span> (xhr.<span class="hljs-property">readyState</span> === <span class="hljs-number">4</span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">if</span> (xhr.<span class="hljs-property">status</span> &gt;= <span class="hljs-number">200</span> &amp;&amp; xhr.<span class="hljs-property">status</span> &lt; <span class="hljs-number">300</span>) &#123;</span><br><span class="language-javascript">                        result.<span class="hljs-property">innerHTML</span> = xhr.<span class="hljs-property">response</span>;</span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>server.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express=<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">const</span> app=<span class="hljs-title function_">express</span>();<br><span class="hljs-comment">// 访问路由为localhost:8000/server</span><br><span class="hljs-comment">// 对应GET请求</span><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/server&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">request,response</span>)=&gt;</span>&#123;<br>    <span class="hljs-comment">// 设置响应头，允许跨域</span><br>    response.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;Access-Control-Allow-Origin&#x27;</span>,<span class="hljs-string">&#x27;*&#x27;</span>)<br>    <span class="hljs-comment">// 设置响应体</span><br>    response.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;hello,ajax&#x27;</span>)<br>&#125;)<br><br><span class="hljs-comment">// 对应POST请求</span><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/server&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">request,response</span>)=&gt;</span>&#123;<br>    <span class="hljs-comment">// 设置响应头，允许跨域</span><br>    response.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;Access-Control-Allow-Origin&#x27;</span>,<span class="hljs-string">&#x27;*&#x27;</span>)<br>    <span class="hljs-comment">// 设置响应体</span><br>    response.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;hello,ajax POST&#x27;</span>)<br>&#125;)<br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">8000</span>,<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;server running on 8000...&#x27;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="1-6-4-POST设置请求体"><a href="#1-6-4-POST设置请求体" class="headerlink" title="1.6.4 POST设置请求体"></a>1.6.4 POST设置请求体</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 3.发送</span><br><span class="hljs-comment">// 可以设置请求体</span><br><span class="hljs-comment">// xhr.send();</span><br>xhr.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;a=100&amp;b=200&amp;c=300&#x27;</span>);<br></code></pre></td></tr></table></figure><p><img src="/2024/09/24/%E5%AD%A6%E4%B9%A0AJAX/img/image-20240718145654386.png"></p><h3 id="1-6-5-设置请求头信息"><a href="#1-6-5-设置请求头信息" class="headerlink" title="1.6.5 设置请求头信息"></a>1.6.5 设置请求头信息</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 2.初始化</span><br>xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;POST&#x27;</span>, <span class="hljs-string">&#x27;http://127.0.0.1:8000/server&#x27;</span>);<br><span class="hljs-comment">// 设置请求头信息</span><br>xhr.<span class="hljs-title function_">setRequestHeader</span>(<span class="hljs-string">&#x27;Content-type&#x27;</span>, <span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="1-6-6-服务端对JSON数据的响应"><a href="#1-6-6-服务端对JSON数据的响应" class="headerlink" title="1.6.6 服务端对JSON数据的响应"></a>1.6.6 服务端对JSON数据的响应</h3><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>响应JSON<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.result</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid skyblue;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;result&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 获取对象</span></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> result = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.result&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-comment">// 绑定事件</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">window</span>.<span class="hljs-property">onkeydown</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 1.创建对象</span></span><br><span class="language-javascript">            <span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();</span><br><span class="language-javascript">            <span class="hljs-comment">// 2.初始化</span></span><br><span class="language-javascript">            <span class="hljs-comment">// 设置返回数据类型，可自动转换JSON为对象</span></span><br><span class="language-javascript">            xhr.<span class="hljs-property">responseType</span> = <span class="hljs-string">&quot;json&quot;</span>;</span><br><span class="language-javascript">            xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;http://127.0.0.1:8000/server&#x27;</span>);</span><br><span class="language-javascript">            <span class="hljs-comment">// 设置请求头信息</span></span><br><span class="language-javascript">            xhr.<span class="hljs-title function_">setRequestHeader</span>(<span class="hljs-string">&#x27;Content-type&#x27;</span>, <span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">// 3.发送</span></span><br><span class="language-javascript">            <span class="hljs-comment">// 可以设置请求体</span></span><br><span class="language-javascript">            <span class="hljs-comment">// xhr.send();</span></span><br><span class="language-javascript">            xhr.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;a=100&amp;b=200&amp;c=300&#x27;</span>);</span><br><span class="language-javascript">            <span class="hljs-comment">// 4.事件绑定，处理返回结果</span></span><br><span class="language-javascript">            xhr.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span> (xhr.<span class="hljs-property">readyState</span> === <span class="hljs-number">4</span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">if</span> (xhr.<span class="hljs-property">status</span> &gt;= <span class="hljs-number">200</span> &amp;&amp; xhr.<span class="hljs-property">status</span> &lt; <span class="hljs-number">300</span>) &#123;</span><br><span class="language-javascript">                        <span class="hljs-comment">// 自动转换，注意初始化前设置xhr的返回数据类型</span></span><br><span class="language-javascript">                        result.<span class="hljs-property">innerHTML</span> = xhr.<span class="hljs-property">response</span>.<span class="hljs-property">name</span>;</span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>sever.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();<br><span class="hljs-comment">// 访问路由为localhost:8000/server</span><br><span class="hljs-comment">// 对应GET请求</span><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/server&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">request, response</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 设置响应头，允许跨域</span><br>    response.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>)<br>    <span class="hljs-comment">// 响应一个数据</span><br>    <span class="hljs-keyword">const</span> data = &#123; <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;monica&quot;</span> &#125;<br>    <span class="hljs-keyword">const</span> str = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data)<br>    <span class="hljs-comment">// 设置响应体</span><br>    response.<span class="hljs-title function_">send</span>(str)<br>&#125;)<br><br><span class="hljs-comment">// 对应POST请求</span><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/server&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">request, response</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 设置响应头，允许跨域</span><br>    response.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>)<br>    <span class="hljs-comment">// 设置响应体</span><br>    response.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;hello,ajax POST&#x27;</span>)<br>&#125;)<br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">8000</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;server running on 8000...&#x27;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="1-7-请求超时和网络异常处理"><a href="#1-7-请求超时和网络异常处理" class="headerlink" title="1.7 请求超时和网络异常处理"></a>1.7 请求超时和网络异常处理</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>ajax get请求<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-id">#result</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid pink;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>点我发送请求<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;result&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 获取对象</span></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> result = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#result&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-comment">// 绑定按钮点击事件</span></span><br><span class="language-javascript">        btn.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 1.创建对象</span></span><br><span class="language-javascript">            <span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();</span><br><span class="language-javascript">            <span class="hljs-comment">// 超时设置为 2s</span></span><br><span class="language-javascript">            xhr.<span class="hljs-property">timeout</span>=<span class="hljs-number">2000</span>;</span><br><span class="language-javascript">            <span class="hljs-comment">// 超时回调</span></span><br><span class="language-javascript">            xhr.<span class="hljs-property">ontimeout</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;请求超时，请稍后再试&#x27;</span>)</span><br><span class="language-javascript">            &#125;;</span><br><span class="language-javascript">            <span class="hljs-comment">// 网络异常回调</span></span><br><span class="language-javascript">            xhr.<span class="hljs-property">onerror</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;网络好像出问题了&#x27;</span>);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            <span class="hljs-comment">// 2.初始化</span></span><br><span class="language-javascript">            <span class="hljs-comment">// 设置请求参数</span></span><br><span class="language-javascript">            xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;http://localhost:8000/server&#x27;</span>);</span><br><span class="language-javascript">            <span class="hljs-comment">// 3.发送</span></span><br><span class="language-javascript">            xhr.<span class="hljs-title function_">send</span>();</span><br><span class="language-javascript">            <span class="hljs-comment">// 4.事件绑定，处理服务端返回的结果</span></span><br><span class="language-javascript">            <span class="hljs-comment">// 只要 readyState 属性发生变化，就会调用相应的处理函数</span></span><br><span class="language-javascript">            <span class="hljs-comment">// XMLHttpRequest.onreadystatechange 会在 XMLHttpRequest 的readyState 属性发生改变时触发 readystatechange 事件的时候被调用。</span></span><br><span class="language-javascript">            xhr.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 判断当服务端返回了所有的结果</span></span><br><span class="language-javascript">                <span class="hljs-keyword">if</span> (xhr.<span class="hljs-property">readyState</span> === <span class="hljs-number">4</span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-comment">// 响应成功</span></span><br><span class="language-javascript">                    <span class="hljs-keyword">if</span> (xhr.<span class="hljs-property">status</span> &gt;= <span class="hljs-number">200</span> &amp;&amp; xhr.<span class="hljs-property">status</span> &lt; <span class="hljs-number">300</span>) &#123;</span><br><span class="language-javascript">                        <span class="hljs-comment">// 处理结果</span></span><br><span class="language-javascript">                        result.<span class="hljs-property">innerHTML</span> = xhr.<span class="hljs-property">response</span>;</span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        &#125;;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-8-取消请求"><a href="#1-8-取消请求" class="headerlink" title="1.8 取消请求"></a>1.8 取消请求</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>ajax 取消请求<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-id">#result</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid pink;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>点我发送请求<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>点我取消请求<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 获取对象</span></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> sendbtn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;button&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> cancelbtn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;button&#x27;</span>)[<span class="hljs-number">1</span>];</span><br><span class="language-javascript">        <span class="hljs-comment">// 标识是否正在发送请求变量</span></span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> isPending = <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> xhr = <span class="hljs-literal">null</span>;</span><br><span class="language-javascript">        <span class="hljs-comment">// 绑定按钮点击事件</span></span><br><span class="language-javascript">        sendbtn.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 如果正在发送，则取消该请求，创建新请求</span></span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (isPending) &#123;</span><br><span class="language-javascript">                xhr.<span class="hljs-title function_">abort</span>();</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            <span class="hljs-comment">// 1.创建对象</span></span><br><span class="language-javascript">            xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();</span><br><span class="language-javascript">            <span class="hljs-comment">// 2.初始化</span></span><br><span class="language-javascript">            <span class="hljs-comment">// 设置请求参数</span></span><br><span class="language-javascript">            xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;http://localhost:8000/server&#x27;</span>);</span><br><span class="language-javascript">            <span class="hljs-comment">// 3.发送</span></span><br><span class="language-javascript">            xhr.<span class="hljs-title function_">send</span>();</span><br><span class="language-javascript">            isPending = <span class="hljs-literal">true</span>;</span><br><span class="language-javascript">            <span class="hljs-comment">// 4.事件绑定，处理服务端返回的结果</span></span><br><span class="language-javascript">            xhr.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 判断当服务端返回了所有的结果</span></span><br><span class="language-javascript">                <span class="hljs-keyword">if</span> (xhr.<span class="hljs-property">readyState</span> === <span class="hljs-number">4</span>) &#123;</span><br><span class="language-javascript">                    isPending = <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        &#125;;</span><br><span class="language-javascript">        cancelbtn.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            xhr.<span class="hljs-title function_">abort</span>();</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-axios"><a href="#2-axios" class="headerlink" title="2.axios"></a>2.axios</h2><h3 id="使用axios发送ajax请求"><a href="#使用axios发送ajax请求" class="headerlink" title="使用axios发送ajax请求"></a>使用axios发送ajax请求</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>axios<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/axios/1.7.2/axios.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>GET<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>POST<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>AJAX<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> btns = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;button&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-comment">// 配置baseURL</span></span><br><span class="language-javascript">        axios.<span class="hljs-property">defaults</span>.<span class="hljs-property">baseURL</span> = <span class="hljs-string">&#x27;http://127.0.0.1:8000&#x27;</span>;</span><br><span class="language-javascript">        btns[<span class="hljs-number">0</span>].<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/axios-server&#x27;</span>, &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// url参数</span></span><br><span class="language-javascript">                <span class="hljs-attr">params</span>: &#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;monica&quot;</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">vip</span>: <span class="hljs-string">&quot;yes&quot;</span></span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-comment">// 请求头信息</span></span><br><span class="language-javascript">                <span class="hljs-attr">headers</span>: &#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">a</span>: <span class="hljs-number">100</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">b</span>: <span class="hljs-number">200</span></span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value);</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">        &#125;;</span><br><span class="language-javascript">        btns[<span class="hljs-number">1</span>].<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            axios.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/axios-server&#x27;</span>,</span><br><span class="language-javascript">                &#123;</span><br><span class="language-javascript">                    <span class="hljs-comment">// 请求体信息</span></span><br><span class="language-javascript">                    <span class="hljs-attr">school</span>: <span class="hljs-string">&#x27;UESTC&#x27;</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">age</span>: <span class="hljs-string">&#x27;19&#x27;</span></span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                &#123;</span><br><span class="language-javascript">                    <span class="hljs-comment">// 配置参数，包括url参数和请求头信息</span></span><br><span class="language-javascript">                    <span class="hljs-attr">params</span>: &#123;</span><br><span class="language-javascript">                        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;monica&quot;</span>,</span><br><span class="language-javascript">                        <span class="hljs-attr">vip</span>: <span class="hljs-string">&quot;yes&quot;</span></span><br><span class="language-javascript">                    &#125;,</span><br><span class="language-javascript">                    <span class="hljs-attr">headers</span>: &#123;</span><br><span class="language-javascript">                        <span class="hljs-attr">a</span>: <span class="hljs-number">100</span>,</span><br><span class="language-javascript">                        <span class="hljs-attr">b</span>: <span class="hljs-number">200</span></span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                &#125;)</span><br><span class="language-javascript">                .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response.<span class="hljs-property">data</span>);</span><br><span class="language-javascript">                &#125;)</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        btns[<span class="hljs-number">2</span>].<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">axios</span>(&#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 请求类型</span></span><br><span class="language-javascript">                <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-comment">// url</span></span><br><span class="language-javascript">                <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/axios-server&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-comment">// url参数</span></span><br><span class="language-javascript">                <span class="hljs-attr">params</span>: &#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;monica&#x27;</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">age</span>: <span class="hljs-string">&#x27;19&#x27;</span></span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-comment">// 头信息</span></span><br><span class="language-javascript">                <span class="hljs-attr">headers</span>: &#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">a</span>: <span class="hljs-number">100</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">b</span>: <span class="hljs-number">200</span></span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-comment">// 请求体参数</span></span><br><span class="language-javascript">                <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">student</span>: <span class="hljs-string">&#x27;tom&#x27;</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">school</span>: <span class="hljs-string">&#x27;UESTC&#x27;</span></span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3-使用fetch函数发送ajax请求"><a href="#3-使用fetch函数发送ajax请求" class="headerlink" title="3.使用fetch函数发送ajax请求"></a>3.使用fetch函数发送ajax请求</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>fetch<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>POST<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>);</span><br><span class="language-javascript">        btn.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;http://127.0.0.1:8000/fetch-server&#x27;</span>, &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 请求方法</span></span><br><span class="language-javascript">                <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-comment">// 请求头</span></span><br><span class="language-javascript">                <span class="hljs-attr">headers</span>: &#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">a</span>: <span class="hljs-number">100</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">b</span>: <span class="hljs-number">200</span></span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-comment">// 请求体</span></span><br><span class="language-javascript">                <span class="hljs-attr">body</span>: &#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;monica&#x27;</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">age</span>: <span class="hljs-number">19</span></span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response);</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">        &#125;;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4-跨域"><a href="#4-跨域" class="headerlink" title="4.跨域"></a>4.跨域</h2><h3 id="4-1-同源策略"><a href="#4-1-同源策略" class="headerlink" title="4.1 同源策略"></a>4.1 同源策略</h3><p>同源：协议、域名、端口号必须完全相同</p><p>AJAX默认遵循同源策略</p><p>违背同源策略就是跨域</p><h3 id="4-2-jsonp"><a href="#4-2-jsonp" class="headerlink" title="4.2 jsonp"></a>4.2 jsonp</h3><h3 id="4-3-CORS"><a href="#4-3-CORS" class="headerlink" title="4.3 CORS"></a>4.3 CORS</h3><p>新增一组响应头</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">response.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>)<br></code></pre></td></tr></table></figure><p>一般开发中加上</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">response.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>)<br>response.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>)<br>response.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;Access-Control-Allow-Method&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>AJAX</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学习ES6新特性</title>
    <link href="/2024/09/24/%E5%AD%A6%E4%B9%A0ES6%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <url>/2024/09/24/%E5%AD%A6%E4%B9%A0ES6%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h2 id="1-ES6"><a href="#1-ES6" class="headerlink" title="1. ES6"></a>1. ES6</h2><h3 id="1-1-1-let变量声明"><a href="#1-1-1-let变量声明" class="headerlink" title="1.1.1 let变量声明"></a>1.1.1 let变量声明</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1.不允许重复声明</span><br>     <span class="hljs-comment">// let a = 1;</span><br>     <span class="hljs-comment">// let a = 2;</span><br><br>     <span class="hljs-comment">// 2.块级作用域  ES5三种作用域：全局 函数 eval</span><br>     <span class="hljs-comment">// if else for while</span><br>     <span class="hljs-comment">// &#123;</span><br>     <span class="hljs-comment">//     let a = 5;</span><br>     <span class="hljs-comment">// &#125;</span><br>     <span class="hljs-comment">// console.log(a);</span><br><br>     <span class="hljs-comment">// 3.不存在变量提升(即不允许使用未声明的变量)</span><br>     <span class="hljs-comment">// console.log(a);</span><br>     <span class="hljs-comment">// let a = 7;</span><br><br>     <span class="hljs-comment">// 4.不影响作用域链（即块级作用域里的函数等还可以使用变量）</span><br>     <span class="hljs-comment">// &#123;</span><br>     <span class="hljs-comment">//     let a = 7;</span><br>     <span class="hljs-comment">//     function fn() &#123;</span><br>     <span class="hljs-comment">//         console.log(a);</span><br>     <span class="hljs-comment">//     &#125;</span><br>     <span class="hljs-comment">//     fn();</span><br>     <span class="hljs-comment">// &#125;</span><br></code></pre></td></tr></table></figure><h3 id="1-1-2-let经典案例（和var对比）"><a href="#1-1-2-let经典案例（和var对比）" class="headerlink" title="1.1.2 let经典案例（和var对比）"></a>1.1.2 let经典案例（和var对比）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 获取元素对象</span><br><span class="hljs-keyword">let</span> items = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;.item&#x27;</span>);<br><br><span class="hljs-comment">// 给每个item绑定点击事件，点击时切换背景颜色</span><br><br><span class="hljs-comment">// 以前用var写必须要用this</span><br><br><span class="hljs-comment">// for (var i = 0; i &lt; items.length; i++) &#123;</span><br><span class="hljs-comment">//     items[i].onclick = function () &#123;</span><br><span class="hljs-comment">//         this.style.backgroundColor = &#x27;pink&#x27;;</span><br><span class="hljs-comment">//     &#125;</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-comment">// 如果写成items[i]会出问题，以上代码等价如下</span><br><span class="hljs-comment">// var不存在块级作用域，块与块之间相互污染，所有的i都为window.i为3</span><br><span class="hljs-comment">// &#123;</span><br><span class="hljs-comment">//     var i=0;</span><br><span class="hljs-comment">//     items[i].onclick = function () &#123;</span><br><span class="hljs-comment">//         this.style.backgroundColor = &#x27;pink&#x27;;</span><br><span class="hljs-comment">//     &#125;</span><br><span class="hljs-comment">// &#125;;</span><br><br><span class="hljs-comment">// &#123;</span><br><span class="hljs-comment">//     var i=1;</span><br><span class="hljs-comment">//     items[i].onclick = function () &#123;</span><br><span class="hljs-comment">//         this.style.backgroundColor = &#x27;pink&#x27;;</span><br><span class="hljs-comment">//     &#125;</span><br><span class="hljs-comment">// &#125;;</span><br><br><span class="hljs-comment">// &#123;</span><br><span class="hljs-comment">//     var i=2;</span><br><span class="hljs-comment">//     items[i].onclick = function () &#123;</span><br><span class="hljs-comment">//         this.style.backgroundColor = &#x27;pink&#x27;;</span><br><span class="hljs-comment">//     &#125;</span><br><span class="hljs-comment">// &#125;;</span><br><br><span class="hljs-comment">//用let声明i像以下这样写是可行的</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; items.<span class="hljs-property">length</span>; i++) &#123;<br>    items[i].<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        items[i].<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = <span class="hljs-string">&#x27;pink&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//等价于</span><br><span class="hljs-comment">//块与块之间不相互干扰</span><br><span class="hljs-comment">// &#123;</span><br><span class="hljs-comment">//     let i=0;</span><br><span class="hljs-comment">//     items[i].onclick = function () &#123;</span><br><span class="hljs-comment">//         this.style.backgroundColor = &#x27;pink&#x27;;</span><br><span class="hljs-comment">//     &#125;</span><br><span class="hljs-comment">// &#125;;</span><br><br><span class="hljs-comment">// &#123;</span><br><span class="hljs-comment">//     let i=1;</span><br><span class="hljs-comment">//     items[i].onclick = function () &#123;</span><br><span class="hljs-comment">//         this.style.backgroundColor = &#x27;pink&#x27;;</span><br><span class="hljs-comment">//     &#125;</span><br><span class="hljs-comment">// &#125;;</span><br><br><span class="hljs-comment">// &#123;</span><br><span class="hljs-comment">//     let i=2;</span><br><span class="hljs-comment">//     items[i].onclick = function () &#123;</span><br><span class="hljs-comment">//         this.style.backgroundColor = &#x27;pink&#x27;;</span><br><span class="hljs-comment">//     &#125;</span><br><span class="hljs-comment">// &#125;;</span><br></code></pre></td></tr></table></figure><h3 id="1-2-const常量声明"><a href="#1-2-const常量声明" class="headerlink" title="1.2 const常量声明"></a>1.2 const常量声明</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//声明常量</span><br>   <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">PI</span> = <span class="hljs-number">3.14</span>;<br><br>   <span class="hljs-comment">//1.常量必须在声明时赋值</span><br>   <span class="hljs-comment">// const A;</span><br><br>   <span class="hljs-comment">//2.常量通常用大写表示，但用小写也不会报错</span><br>   <span class="hljs-comment">// const school=&#x27;UESTC&#x27;;</span><br><br>   <span class="hljs-comment">//3.常量的值不能修改</span><br>   <span class="hljs-comment">// PI=6;</span><br><br>   <span class="hljs-comment">// 4.对对象和数组元素的改变不算做对常量的改变，因为该常量存储的是地址</span><br>   <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">ARR</span> = [<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>]<br>   <span class="hljs-variable constant_">ARR</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;4&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="1-3-变量的解构赋值"><a href="#1-3-变量的解构赋值" class="headerlink" title="1.3 变量的解构赋值"></a>1.3 变量的解构赋值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 数组解构赋值</span><br>      <span class="hljs-keyword">let</span> arr = [<span class="hljs-string">&#x27;monica&#x27;</span>, <span class="hljs-string">&#x27;andrew&#x27;</span>, <span class="hljs-string">&#x27;rosa&#x27;</span>];<br><br>      <span class="hljs-comment">// 按顺序赋值，注意要是方括号[]</span><br>      <span class="hljs-keyword">let</span> [first, second, third] = arr;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(first, second, third);<br><br>      <span class="hljs-comment">// 对象解构赋值</span><br>      <span class="hljs-keyword">const</span> monica = &#123;<br>          <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;monica&#x27;</span>,<br>          <span class="hljs-attr">age</span>: <span class="hljs-string">&#x27;19&#x27;</span>,<br>          <span class="hljs-attr">english</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>              <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;speak English&#x27;</span>);<br>          &#125;<br>      &#125;<br>      <span class="hljs-comment">// 要与对象中属性同名，一般解构方法，注意要写大括号&#123;&#125;</span><br>      <span class="hljs-keyword">let</span> &#123;english&#125; = monica;<br>      <span class="hljs-title function_">english</span>();<br></code></pre></td></tr></table></figure><h3 id="1-4-模板字符串"><a href="#1-4-模板字符串" class="headerlink" title="1.4 模板字符串"></a>1.4 模板字符串</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1.声明字符串，使用反引号``  ES5声明字符串 单引号&#x27;&#x27; 双引号&quot;&quot;</span><br>     <span class="hljs-keyword">let</span> str = <span class="hljs-string">`我也是字符串`</span>;<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str, <span class="hljs-keyword">typeof</span> str);<br><br>     <span class="hljs-comment">// 2.可以在内容中出现换行符</span><br>     <span class="hljs-keyword">let</span> string = <span class="hljs-string">`&lt;ul&gt;</span><br><span class="hljs-string">         &lt;li&gt;哈哈&lt;/li&gt;</span><br><span class="hljs-string">         &lt;li&gt;嘻嘻&lt;/li&gt;</span><br><span class="hljs-string">         &lt;li&gt;嘿嘿&lt;/li&gt;</span><br><span class="hljs-string">         &lt;/ul&gt;`</span>;<br>         <br>     <span class="hljs-comment">//3.变量拼接</span><br>     <span class="hljs-keyword">let</span> favorite = <span class="hljs-string">&#x27;monica&#x27;</span>;<br>     <span class="hljs-keyword">let</span> output = <span class="hljs-string">`<span class="hljs-subst">$&#123;favorite&#125;</span> is my favorite`</span>;<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(output);<br></code></pre></td></tr></table></figure><h3 id="1-5-对象的简化写法"><a href="#1-5-对象的简化写法" class="headerlink" title="1.5 对象的简化写法"></a>1.5 对象的简化写法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">       <span class="hljs-keyword">let</span> name = <span class="hljs-string">&#x27;monica&#x27;</span>;</span><br><span class="language-javascript">       <span class="hljs-keyword">let</span> change = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">           <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;改变了~&quot;</span>);</span><br><span class="language-javascript">       &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">       <span class="hljs-keyword">const</span> girl = &#123;</span><br><span class="language-javascript">           <span class="hljs-comment">//完整写法</span></span><br><span class="language-javascript">           <span class="hljs-comment">// name: name,</span></span><br><span class="language-javascript">           <span class="hljs-comment">// change: change,</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">           <span class="hljs-comment">//简化写法，属性和变量同名可以直接如下简写</span></span><br><span class="language-javascript">           name,</span><br><span class="language-javascript">           change,</span><br><span class="language-javascript">           <span class="hljs-comment">//声明函数的简写</span></span><br><span class="language-javascript">           <span class="hljs-title function_">improve</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">               <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;提升了&#x27;</span>)</span><br><span class="language-javascript">           &#125;</span><br><span class="language-javascript">       &#125;</span><br><span class="language-javascript"> </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-6-1-箭头函数及声明特点"><a href="#1-6-1-箭头函数及声明特点" class="headerlink" title="1.6.1 箭头函数及声明特点"></a>1.6.1 箭头函数及声明特点</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">//声明</span></span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> <span class="hljs-title function_">fn</span> = (<span class="hljs-params">a, b</span>) =&gt; &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> a + b;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">fn</span>(<span class="hljs-number">3</span>, <span class="hljs-number">9</span>));</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">//1.this是静态的，始终指向函数声明时所在作用域this的值</span></span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> getName = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);</span><br><span class="language-javascript">        &#125;;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> <span class="hljs-title function_">getName2</span> = (<span class="hljs-params"></span>) =&gt; &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);</span><br><span class="language-javascript">        &#125;;</span><br><span class="language-javascript">    <span class="hljs-comment">//实质上等同于</span></span><br><span class="language-javascript">        <span class="hljs-comment">//let fn=function(a,b)&#123;</span></span><br><span class="language-javascript">            <span class="hljs-keyword">let</span> _this=<span class="hljs-variable language_">this</span>;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(_this.<span class="hljs-property">name</span>);</span><br><span class="language-javascript">        &#125;;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">window</span>.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;monica&#x27;</span>;</span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> girl = &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;莫妮卡&#x27;</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-title function_">getName</span>();</span><br><span class="language-javascript">        <span class="hljs-title function_">getName2</span>();</span><br><span class="language-javascript">        getName.<span class="hljs-title function_">call</span>(girl);</span><br><span class="language-javascript">        getName2.<span class="hljs-title function_">call</span>(girl);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">//2.不能作为构造函数实例化对象</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">//3.不能使用arguments对象</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">//4.箭头函数的简写</span></span><br><span class="language-javascript">        <span class="hljs-comment">//（1）省略小括号，只有一个形参时</span></span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> <span class="hljs-title function_">add</span> = n =&gt; &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> n + n;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">add</span>(<span class="hljs-number">9</span>));</span><br><span class="language-javascript">        <span class="hljs-comment">//（2）省略花括号，函数体只有一行语句时，且要省略return，语句的执行结果就是返回值</span></span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> <span class="hljs-title function_">pow</span> = n =&gt; n * n;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">pow</span>(<span class="hljs-number">8</span>));</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-6-2-箭头函数实践与应用场景"><a href="#1-6-2-箭头函数实践与应用场景" class="headerlink" title="1.6.2 箭头函数实践与应用场景"></a>1.6.2 箭头函数实践与应用场景</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">       <span class="hljs-comment">//需求1：点击div 2s 后变成粉色</span></span><br><span class="language-javascript">       <span class="hljs-keyword">let</span> box = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.box&#x27;</span>);</span><br><span class="language-javascript">       box.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">           <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">               <span class="hljs-comment">//写成匿名函数的this指向不对(指向window)</span></span><br><span class="language-javascript">               <span class="hljs-comment">// console.log(this);</span></span><br><span class="language-javascript">               <span class="hljs-variable language_">this</span>.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = <span class="hljs-string">&#x27;pink&#x27;</span>;</span><br><span class="language-javascript">           &#125;, <span class="hljs-number">2000</span>)</span><br><span class="language-javascript">       &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript">       <span class="hljs-comment">//需求2：获取数组中偶数元素</span></span><br><span class="language-javascript">       <span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">10</span>, <span class="hljs-number">25</span>, <span class="hljs-number">36</span>]</span><br><span class="language-javascript">       <span class="hljs-comment">// const result = arr.filter(function (num) &#123;</span></span><br><span class="language-javascript">       <span class="hljs-comment">//     if (num % 2 === 0) &#123;</span></span><br><span class="language-javascript">       <span class="hljs-comment">//         return true;</span></span><br><span class="language-javascript">       <span class="hljs-comment">//     &#125; else &#123;</span></span><br><span class="language-javascript">       <span class="hljs-comment">//         return false;</span></span><br><span class="language-javascript">       <span class="hljs-comment">//     &#125;</span></span><br><span class="language-javascript">       <span class="hljs-comment">// &#125;)</span></span><br><span class="language-javascript">       <span class="hljs-keyword">const</span> result = arr.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">num</span> =&gt;</span> num % <span class="hljs-number">2</span> === <span class="hljs-number">0</span>)</span><br><span class="language-javascript">       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);</span><br><span class="language-javascript"></span><br><span class="language-javascript">       <span class="hljs-comment">//总结：箭头函数适合应用于与this无关的场景，如定时器，数组的方法回调</span></span><br><span class="language-javascript">       <span class="hljs-comment">//箭头函数不适合应用于与this有关的场景：如事件回调，对象的方法</span></span><br><span class="language-javascript">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-7-函数参数的默认值设置"><a href="#1-7-函数参数的默认值设置" class="headerlink" title="1.7 函数参数的默认值设置"></a>1.7 函数参数的默认值设置</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">       <span class="hljs-comment">//1.形参初始值，具有默认值的参数，一般位置靠后</span></span><br><span class="language-javascript">       <span class="hljs-comment">//如果没有传参则使用默认值</span></span><br><span class="language-javascript">       <span class="hljs-keyword">let</span> add = <span class="hljs-keyword">function</span> (<span class="hljs-params">a, b, c = <span class="hljs-number">10</span></span>) &#123;</span><br><span class="language-javascript">           <span class="hljs-keyword">return</span> a + b + c;</span><br><span class="language-javascript">       &#125;</span><br><span class="language-javascript">       <span class="hljs-comment">// console.log(add(1,2,3));</span></span><br><span class="language-javascript">       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">add</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>));</span><br><span class="language-javascript"></span><br><span class="language-javascript">       <span class="hljs-comment">//2.与解构赋值结合</span></span><br><span class="language-javascript">       <span class="hljs-keyword">function</span> <span class="hljs-title function_">connect</span>(<span class="hljs-params">&#123; hostName = <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, userName, password, port &#125;</span>) &#123;</span><br><span class="language-javascript">           <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(hostName);</span><br><span class="language-javascript">           <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(userName);</span><br><span class="language-javascript">           <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(password);</span><br><span class="language-javascript">           <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(port);</span><br><span class="language-javascript">       &#125;</span><br><span class="language-javascript">       <span class="hljs-title function_">connect</span>(&#123;</span><br><span class="language-javascript">           <span class="hljs-comment">// hostName: &#x27;localhost&#x27;,</span></span><br><span class="language-javascript">           <span class="hljs-attr">userName</span>: <span class="hljs-string">&#x27;root&#x27;</span>,</span><br><span class="language-javascript">           <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;123&#x27;</span>,</span><br><span class="language-javascript">           <span class="hljs-attr">port</span>: <span class="hljs-string">&#x27;80&#x27;</span></span><br><span class="language-javascript">       &#125;)</span><br><span class="language-javascript">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-8-rest参数"><a href="#1-8-rest参数" class="headerlink" title="1.8 rest参数"></a>1.8 rest参数</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-comment">// ES5获取实参方式，不是数组</span></span><br><span class="language-javascript">      <span class="hljs-comment">// function date()&#123;</span></span><br><span class="language-javascript">      <span class="hljs-comment">//     console.log(arguments);</span></span><br><span class="language-javascript">      <span class="hljs-comment">// &#125;</span></span><br><span class="language-javascript">      <span class="hljs-comment">// date(&#x27;monica&#x27;,&#x27;andrew&#x27;,&#x27;rosa&#x27;)</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-comment">// rest参数，得到数组，操作更灵活</span></span><br><span class="language-javascript">      <span class="hljs-comment">// function date(...args)&#123;</span></span><br><span class="language-javascript">      <span class="hljs-comment">//     console.log(args);</span></span><br><span class="language-javascript">      <span class="hljs-comment">// &#125;</span></span><br><span class="language-javascript">      <span class="hljs-comment">// date(&#x27;monica&#x27;,&#x27;andrew&#x27;,&#x27;rosa&#x27;)</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-comment">// rest 参数放到最后</span></span><br><span class="language-javascript">      <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params">a, b, ...args</span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);</span><br><span class="language-javascript">          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b);</span><br><span class="language-javascript">          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(args);</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">      <span class="hljs-comment">// 1 , 2 之后的全赋值给 args</span></span><br><span class="language-javascript">      <span class="hljs-title function_">fn</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>);</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-9-1-扩展运算符介绍"><a href="#1-9-1-扩展运算符介绍" class="headerlink" title="1.9.1 扩展运算符介绍"></a>1.9.1 扩展运算符介绍</h3><p>将数组转换为逗号分隔的参数序列</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> students=[<span class="hljs-string">&#x27;monica&#x27;</span>,<span class="hljs-string">&#x27;andrew&#x27;</span>,<span class="hljs-string">&#x27;rosa&#x27;</span>];</span><br><span class="language-javascript">        <span class="hljs-comment">//只有一个参数</span></span><br><span class="language-javascript">        <span class="hljs-comment">// function study()&#123;</span></span><br><span class="language-javascript">        <span class="hljs-comment">//     console.log(arguments);</span></span><br><span class="language-javascript">        <span class="hljs-comment">// &#125;</span></span><br><span class="language-javascript">        <span class="hljs-comment">// study(students);</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">//使用扩展运算符，有3个参数</span></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">study</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">arguments</span>);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-title function_">study</span>(...students);</span><br><span class="language-javascript"></span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-9-2-扩展运算符应用"><a href="#1-9-2-扩展运算符应用" class="headerlink" title="1.9.2 扩展运算符应用"></a>1.9.2 扩展运算符应用</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">//1.数组的合并</span></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> boys = [<span class="hljs-string">&#x27;andrew&#x27;</span>, <span class="hljs-string">&#x27;tom&#x27;</span>];</span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> girls = [<span class="hljs-string">&#x27;monica&#x27;</span>, <span class="hljs-string">&#x27;rosa&#x27;</span>];</span><br><span class="language-javascript">        <span class="hljs-comment">// const students=boys.concat(girls);</span></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> students = [...boys, ...girls]</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(students);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">//2.数组的克隆</span></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];</span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> b = [...a];</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">//3.将伪数组转为真正的数组</span></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> divs = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;div&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> divArr=[...divs]</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(divs);</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(divArr);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-10-1-Symbol的介绍与创建"><a href="#1-10-1-Symbol的介绍与创建" class="headerlink" title="1.10.1 Symbol的介绍与创建"></a>1.10.1 Symbol的介绍与创建</h3><p>文字表述：<a href="https://es6.ruanyifeng.com/#docs/symbol">Symbol - ECMAScript 6入门 (ruanyifeng.com)</a></p><p>symbol的值是唯一的，用来解决命名冲突</p><p>不能参与运算，不能枚举，不能遍历，但可以使用Reflect.ownKeys来获取对象的所有键名。或者使用<code>Object.getOwnPropertySymbols()</code>方法，可以获取指定对象的所有 Symbol 属性名，该方法返回一个数组，成员是当前对象的所有用作属性名的 Symbol 值。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">let</span> s = <span class="hljs-title class_">Symbol</span>();</span><br><span class="language-javascript">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(s, <span class="hljs-keyword">typeof</span> s);</span><br><span class="language-javascript">      <span class="hljs-comment">//Symbol()可以接受一个字符串作为参数，表示对 Symbol 实例的描述。这主要是为了在控制台显示，或者转为字符串时，比较容易区分</span></span><br><span class="language-javascript">      <span class="hljs-keyword">let</span> s2 = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&#x27;monica&#x27;</span>);</span><br><span class="language-javascript">      <span class="hljs-keyword">let</span> s3 = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&#x27;monica&#x27;</span>);</span><br><span class="language-javascript">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(s2===s3);</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-comment">//Symbol.for()创建的值可重复使用</span></span><br><span class="language-javascript">      <span class="hljs-keyword">let</span> s4=<span class="hljs-title class_">Symbol</span>.<span class="hljs-title function_">for</span>(<span class="hljs-string">&#x27;monica&#x27;</span>);</span><br><span class="language-javascript">      <span class="hljs-keyword">let</span> s5=<span class="hljs-title class_">Symbol</span>.<span class="hljs-title function_">for</span>(<span class="hljs-string">&#x27;monica&#x27;</span>);</span><br><span class="language-javascript">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(s4===s5);</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>JavaScript的7中数据类型：USONB</p><p>Uundefined</p><p>Sstring symbol</p><p>Oobject</p><p>Nnull number</p><p>Bboolean</p><h3 id="1-10-2-对象添加Symbol类型属性"><a href="#1-10-2-对象添加Symbol类型属性" class="headerlink" title="1.10.2 对象添加Symbol类型属性"></a>1.10.2 对象添加Symbol类型属性</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">       <span class="hljs-keyword">let</span> game = &#123;</span><br><span class="language-javascript">           <span class="hljs-attr">up</span>: <span class="hljs-string">&#x27;5&#x27;</span>,</span><br><span class="language-javascript">           <span class="hljs-attr">down</span>: <span class="hljs-string">&#x27;6&#x27;</span>,</span><br><span class="language-javascript">           <span class="hljs-attr">play</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">               <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;play&quot;</span>)</span><br><span class="language-javascript">           &#125;</span><br><span class="language-javascript">       &#125;</span><br><span class="language-javascript">       <span class="hljs-comment">//如何在不看game内部结构的情况下安全地向game中添加两个方法 up down</span></span><br><span class="language-javascript">       <span class="hljs-keyword">let</span> methods = &#123;</span><br><span class="language-javascript">           <span class="hljs-attr">up</span>: <span class="hljs-title class_">Symbol</span>(),</span><br><span class="language-javascript">           <span class="hljs-attr">down</span>: <span class="hljs-title class_">Symbol</span>()</span><br><span class="language-javascript">       &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">       <span class="hljs-comment">//用[]可以访问动态属性，即内部可以是表达式或变量</span></span><br><span class="language-javascript">       game[methods.<span class="hljs-property">up</span>] = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">           <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;up&quot;</span>);</span><br><span class="language-javascript">       &#125;;</span><br><span class="language-javascript">       game[methods.<span class="hljs-property">down</span>] = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">           <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;down&quot;</span>);</span><br><span class="language-javascript">       &#125;</span><br><span class="language-javascript">       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(game);</span><br><span class="language-javascript"></span><br><span class="language-javascript">       <span class="hljs-keyword">let</span> game2=&#123;</span><br><span class="language-javascript">           [<span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&#x27;up&#x27;</span>)]:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">               <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;up&quot;</span>);</span><br><span class="language-javascript">           &#125;,</span><br><span class="language-javascript">           [<span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&#x27;down&#x27;</span>)]:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">               <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;down&quot;</span>);</span><br><span class="language-javascript">           &#125;</span><br><span class="language-javascript">       &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(game2);</span><br><span class="language-javascript"></span><br><span class="language-javascript">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-10-3-Symbol的内置属性"><a href="#1-10-3-Symbol的内置属性" class="headerlink" title="1.10.3 Symbol的内置属性"></a>1.10.3 Symbol的内置属性</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol#%E8%BF%AD%E4%BB%A3_symbols">迭代 symbols </a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/iterator"><code>Symbol.iterator</code></a></p><p>一个返回一个对象默认迭代器的方法。被 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...of"><code>for...of</code></a> 使用。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/asyncIterator"><code>Symbol.asyncIterator</code></a> 实验性</p><p>一个返回对象默认的异步迭代器的方法。被 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for-await...of"><code>for await of</code></a> 使用。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol#%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F_symbols">正则表达式 symbols </a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/match"><code>Symbol.match</code></a></p><p>一个用于对字符串进行匹配的方法，也用于确定一个对象是否可以作为正则表达式使用。被 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/match"><code>String.prototype.match()</code></a> 使用。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/replace"><code>Symbol.replace</code></a></p><p>一个替换匹配字符串的子串的方法。被 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace"><code>String.prototype.replace()</code></a> 使用。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/search"><code>Symbol.search</code></a></p><p>一个返回一个字符串中与正则表达式相匹配的索引的方法。被 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/search"><code>String.prototype.search()</code></a> 使用。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/split"><code>Symbol.split</code></a></p><p>一个在匹配正则表达式的索引处拆分一个字符串的方法.。被 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/split"><code>String.prototype.split()</code></a> 使用。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol#%E5%85%B6%E4%BB%96_symbols">其他 symbols </a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/hasInstance"><code>Symbol.hasInstance</code></a></p><p>一个确定一个构造器对象识别的对象是否为它的实例的方法。被 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/instanceof"><code>instanceof</code></a> 使用。当其他对象使用<code>instanceof</code>运算符，判断是否为该对象的实例时，会调用这个方法。比如，<code>foo instanceof Foo</code>在语言内部，实际调用的是<code>Foo[Symbol.hasInstance](foo)</code></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/isConcatSpreadable"><code>Symbol.isConcatSpreadable</code></a></p><p>一个布尔值，表明一个对象是否应该 flattened 为它的数组元素。被 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/concat"><code>Array.prototype.concat()</code></a> 使用。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/unscopables"><code>Symbol.unscopables</code></a></p><p>拥有和继承属性名的一个对象的值被排除在与环境绑定的相关对象外。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/species"><code>Symbol.species</code></a></p><p>一个用于创建派生对象的构造器函数。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive"><code>Symbol.toPrimitive</code></a></p><p>一个将对象转化为基本数据类型的方法。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag"><code>Symbol.toStringTag</code></a></p><p>用于对象的默认描述的字符串值。被 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/toString"><code>Object.prototype.toString()</code></a> 使用。</p><h3 id="1-11-1-迭代器介绍"><a href="#1-11-1-迭代器介绍" class="headerlink" title="1.11.1 迭代器介绍"></a>1.11.1 迭代器介绍</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">       <span class="hljs-keyword">let</span> arr = [<span class="hljs-string">&#x27;monica&#x27;</span>, <span class="hljs-string">&#x27;andrew&#x27;</span>, <span class="hljs-string">&#x27;rosa&#x27;</span>, <span class="hljs-string">&#x27;tom&#x27;</span>];</span><br><span class="language-javascript"></span><br><span class="language-javascript">       <span class="hljs-comment">// 使用for...in遍历数组，输出的是键名</span></span><br><span class="language-javascript">       <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">in</span> arr) &#123;</span><br><span class="language-javascript">           <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i);</span><br><span class="language-javascript">       &#125;</span><br><span class="language-javascript">       <span class="hljs-comment">// 使用for...of遍历数组，输出的是键值，</span></span><br><span class="language-javascript">       <span class="hljs-comment">// 对象进行for...of循环时，会调用Symbol.iterator方法，返回该对象的默认遍历器</span></span><br><span class="language-javascript">       <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">of</span> arr) &#123;</span><br><span class="language-javascript">           <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i);</span><br><span class="language-javascript">       &#125;</span><br><span class="language-javascript">       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr);</span><br><span class="language-javascript">       <span class="hljs-comment">// 对象的Symbol.iterator属性指向对象的默认遍历器方法</span></span><br><span class="language-javascript">       <span class="hljs-comment">// 执行这个属性，会返回一个遍历器对象。该对象的根本特征就是具有next方法。</span></span><br><span class="language-javascript">       <span class="hljs-comment">// 每次调用next方法，都会返回一个代表当前成员的信息对象，具有value和done两个属性</span></span><br><span class="language-javascript">       <span class="hljs-keyword">let</span> iterator = arr[<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">iterator</span>]();</span><br><span class="language-javascript">       <span class="hljs-comment">// 调用遍历器的next方法</span></span><br><span class="language-javascript">       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(iterator.<span class="hljs-title function_">next</span>());</span><br><span class="language-javascript">       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(iterator.<span class="hljs-title function_">next</span>());</span><br><span class="language-javascript">       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(iterator.<span class="hljs-title function_">next</span>());</span><br><span class="language-javascript">       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(iterator.<span class="hljs-title function_">next</span>());</span><br><span class="language-javascript">       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(iterator.<span class="hljs-title function_">next</span>());</span><br><span class="language-javascript">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-11-2-迭代器应用-自定义遍历数据"><a href="#1-11-2-迭代器应用-自定义遍历数据" class="headerlink" title="1.11.2 迭代器应用_自定义遍历数据"></a>1.11.2 迭代器应用_自定义遍历数据</h3><p>对于原生部署 Iterator 接口的数据结构，不用自己写遍历器生成函数，<code>for...of</code>循环会自动遍历它们。除此之外，其他数据结构（主要是对象）的 Iterator 接口，都需要自己在<code>Symbol.iterator</code>属性上面部署，这样才会被<code>for...of</code>循环遍历。</p><p>对象（Object）之所以没有默认部署 Iterator 接口，是因为对象的哪个属性先遍历，哪个属性后遍历是不确定的，需要开发者手动指定。本质上，遍历器是一种线性处理，对于任何非线性的数据结构，部署遍历器接口，就等于部署一种线性转换。不过，严格地说，对象部署遍历器接口并不是很必要，因为这时对象实际上被当作 Map 结构使用，ES5 没有 Map 结构，而 ES6 原生提供了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> school = &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;UEXTC&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">students</span>: [</span><br><span class="language-javascript">                <span class="hljs-string">&#x27;monica&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-string">&#x27;andrew&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-string">&#x27;rosa&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-string">&#x27;tom&#x27;</span></span><br><span class="language-javascript">            ],</span><br><span class="language-javascript">            [<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">iterator</span>]() &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">//声明索引变量</span></span><br><span class="language-javascript">                <span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">                <span class="hljs-comment">// return一个指针对象,指针对象里有一个next方法</span></span><br><span class="language-javascript">                <span class="hljs-comment">// next方法返回value和done属性值</span></span><br><span class="language-javascript">                <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">next</span>: <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">                        <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">students</span>.<span class="hljs-property">length</span>) &#123;</span><br><span class="language-javascript">                            <span class="hljs-keyword">let</span> result= &#123; <span class="hljs-attr">value</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">students</span>[index], <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span> &#125;;</span><br><span class="language-javascript">                            index++;</span><br><span class="language-javascript">                            <span class="hljs-keyword">return</span> result;</span><br><span class="language-javascript">                        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">                            <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;undefined&#x27;</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">true</span> &#125;</span><br><span class="language-javascript">                        &#125;</span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-comment">// 自定义遍历对象school</span></span><br><span class="language-javascript">        <span class="hljs-keyword">for</span> (index <span class="hljs-keyword">of</span> school) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(index);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-12-1-生成器函数声明"><a href="#1-12-1-生成器函数声明" class="headerlink" title="1.12.1 生成器函数声明"></a>1.12.1 生成器函数声明</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">//生成器是一个特殊的函数</span></span><br><span class="language-javascript">        <span class="hljs-comment">//特殊的声明方式</span></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span>* <span class="hljs-title function_">generate</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// yield——函数代码的分隔符</span></span><br><span class="language-javascript">            <span class="hljs-comment">// console.log(&#x27;1&#x27;);</span></span><br><span class="language-javascript">            <span class="hljs-keyword">yield</span> <span class="hljs-string">&#x27;一只没有耳朵&#x27;</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">// console.log(&#x27;2&#x27;);</span></span><br><span class="language-javascript">            <span class="hljs-keyword">yield</span> <span class="hljs-string">&#x27;一只没有尾巴&#x27;</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">// console.log(&#x27;3&#x27;);</span></span><br><span class="language-javascript">            <span class="hljs-keyword">yield</span> <span class="hljs-string">&#x27;真奇怪&#x27;</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> iterator = <span class="hljs-title function_">generate</span>();</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">generate</span>());</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 特殊的执行方式</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(iterator.<span class="hljs-title function_">next</span>()); </span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(iterator.<span class="hljs-title function_">next</span>()); </span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(iterator.<span class="hljs-title function_">next</span>()); </span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(iterator.<span class="hljs-title function_">next</span>()); </span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 遍历</span></span><br><span class="language-javascript">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i <span class="hljs-keyword">of</span> <span class="hljs-title function_">generate</span>())&#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-12-2-生成器函数参数传递"><a href="#1-12-2-生成器函数参数传递" class="headerlink" title="1.12.2 生成器函数参数传递"></a>1.12.2 生成器函数参数传递</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">//声明生成器函数</span></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span>* <span class="hljs-title function_">gen</span>(<span class="hljs-params">args</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(args);</span><br><span class="language-javascript">            <span class="hljs-comment">// yield暂停执行，next继续执行</span></span><br><span class="language-javascript">            <span class="hljs-keyword">let</span> one = <span class="hljs-keyword">yield</span> <span class="hljs-number">111</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(one);</span><br><span class="language-javascript">            <span class="hljs-keyword">let</span> two=<span class="hljs-keyword">yield</span> <span class="hljs-number">222</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(two);</span><br><span class="language-javascript">            <span class="hljs-keyword">let</span> three=<span class="hljs-keyword">yield</span> <span class="hljs-number">333</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(three);</span><br><span class="language-javascript">            </span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-comment">// 执行获取迭代器对象</span></span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> iterator = <span class="hljs-title function_">gen</span>(<span class="hljs-string">&#x27;AAA&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-comment">//指针对象指向第一个</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(iterator.<span class="hljs-title function_">next</span>());</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// next也可以传递参数，并作为上一个yield整体返回的结果</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(iterator.<span class="hljs-title function_">next</span>(<span class="hljs-string">&#x27;BBB&#x27;</span>));</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(iterator.<span class="hljs-title function_">next</span>(<span class="hljs-string">&#x27;CCC&#x27;</span>));</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(iterator.<span class="hljs-title function_">next</span>(<span class="hljs-string">&#x27;DDD&#x27;</span>));</span><br><span class="language-javascript">        </span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-12-3-解决回调地狱问题"><a href="#1-12-3-解决回调地狱问题" class="headerlink" title="1.12.3 解决回调地狱问题"></a>1.12.3 解决回调地狱问题</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">       <span class="hljs-comment">//需求：1s后控制台输出111，再过2s后输出222，再过3s后输出333</span></span><br><span class="language-javascript">       <span class="hljs-comment">//回调地狱，很难维护</span></span><br><span class="language-javascript">       <span class="hljs-comment">// setTimeout(() =&gt; &#123;</span></span><br><span class="language-javascript">       <span class="hljs-comment">//     console.log(&#x27;111&#x27;);</span></span><br><span class="language-javascript">       <span class="hljs-comment">//     setTimeout(() =&gt; &#123;</span></span><br><span class="language-javascript">       <span class="hljs-comment">//         console.log(&#x27;222&#x27;);</span></span><br><span class="language-javascript">       <span class="hljs-comment">//         setTimeout(() =&gt; &#123;</span></span><br><span class="language-javascript">       <span class="hljs-comment">//             console.log(&#x27;333&#x27;);</span></span><br><span class="language-javascript">       <span class="hljs-comment">//         &#125;, 3000);</span></span><br><span class="language-javascript">       <span class="hljs-comment">//     &#125;, 2000);</span></span><br><span class="language-javascript">       <span class="hljs-comment">// &#125;, 1000);</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">       <span class="hljs-keyword">function</span> <span class="hljs-title function_">one</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">           <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">               <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;111&#x27;</span>);</span><br><span class="language-javascript">               iterator.<span class="hljs-title function_">next</span>();</span><br><span class="language-javascript">           &#125;, <span class="hljs-number">1000</span>);</span><br><span class="language-javascript">           <span class="hljs-comment">// 使用setTimeout是必要的，它使主线程到达yield后完全暂停才执行子线程操作</span></span><br><span class="language-javascript">           <span class="hljs-comment">// iterator.next()相当于告诉子线程完成后需干什么</span></span><br><span class="language-javascript">           <span class="hljs-comment">// 当然，JavaScript是单线程异步执行</span></span><br><span class="language-javascript">       &#125;</span><br><span class="language-javascript">       <span class="hljs-keyword">function</span> <span class="hljs-title function_">two</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">           <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">               <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;222&#x27;</span>);</span><br><span class="language-javascript">               iterator.<span class="hljs-title function_">next</span>();</span><br><span class="language-javascript">           &#125;, <span class="hljs-number">2000</span>);</span><br><span class="language-javascript">       &#125;</span><br><span class="language-javascript">       <span class="hljs-keyword">function</span> <span class="hljs-title function_">three</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">           <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">               <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;333&#x27;</span>);</span><br><span class="language-javascript">               iterator.<span class="hljs-title function_">next</span>();</span><br><span class="language-javascript">           &#125;, <span class="hljs-number">3000</span>);</span><br><span class="language-javascript">       &#125;</span><br><span class="language-javascript">       <span class="hljs-comment">//使用生成器函数解决</span></span><br><span class="language-javascript">       <span class="hljs-keyword">function</span>* <span class="hljs-title function_">gen</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">           <span class="hljs-keyword">yield</span> <span class="hljs-title function_">one</span>();</span><br><span class="language-javascript">           <span class="hljs-keyword">yield</span> <span class="hljs-title function_">two</span>();</span><br><span class="language-javascript">           <span class="hljs-keyword">yield</span> <span class="hljs-title function_">three</span>();</span><br><span class="language-javascript">       &#125;</span><br><span class="language-javascript">       <span class="hljs-keyword">let</span> iterator = <span class="hljs-title function_">gen</span>();</span><br><span class="language-javascript">       iterator.<span class="hljs-title function_">next</span>();</span><br><span class="language-javascript">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-12-4-模拟获取数据"><a href="#1-12-4-模拟获取数据" class="headerlink" title="1.12.4 模拟获取数据"></a>1.12.4 模拟获取数据</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">//需求：先获取用户数据，再获取订单数据，再获取商品数据</span></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">getUsers</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">let</span> data = <span class="hljs-string">&#x27;用户数据&#x27;</span>;</span><br><span class="language-javascript">                iterator.<span class="hljs-title function_">next</span>(data);</span><br><span class="language-javascript">            &#125;, <span class="hljs-number">1000</span>);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">getOrders</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">let</span> data = <span class="hljs-string">&#x27;订单数据&#x27;</span>;</span><br><span class="language-javascript">                iterator.<span class="hljs-title function_">next</span>(data);</span><br><span class="language-javascript">            &#125;, <span class="hljs-number">1000</span>);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">getGoods</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">let</span> data = <span class="hljs-string">&#x27;商品数据&#x27;</span>;</span><br><span class="language-javascript">                iterator.<span class="hljs-title function_">next</span>(data);</span><br><span class="language-javascript">            &#125;, <span class="hljs-number">1000</span>);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-comment">//声明生成器函数</span></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span>* <span class="hljs-title function_">gen</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">let</span> users=<span class="hljs-keyword">yield</span> <span class="hljs-title function_">getUsers</span>();</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(users);</span><br><span class="language-javascript">            <span class="hljs-keyword">let</span> orders=<span class="hljs-keyword">yield</span> <span class="hljs-title function_">getOrders</span>();</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(orders);</span><br><span class="language-javascript">            <span class="hljs-keyword">let</span> goods=<span class="hljs-keyword">yield</span> <span class="hljs-title function_">getGoods</span>();</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(goods);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> iterator = <span class="hljs-title function_">gen</span>();</span><br><span class="language-javascript">        iterator.<span class="hljs-title function_">next</span>();</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-13-1-Promise的基本使用"><a href="#1-13-1-Promise的基本使用" class="headerlink" title="1.13.1 Promise的基本使用"></a>1.13.1 Promise的基本使用</h3><p><code>Promise</code>，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果</p><p><code>Promise</code>对象是一个构造函数，用来生成<code>Promise</code>实例</p><p><code>Promise</code>构造函数接受一个函数作为参数，该函数的两个参数分别是<code>resolve</code>和<code>reject</code>。它们是两个函数，由 JavaScript 引擎提供，不用自己部署。</p><p><code>resolve</code>函数的作用是，将<code>Promise</code>对象的状态从“未完成”变为“成功”（即从 pending 变为 resolved），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去；<code>reject</code>函数的作用是，将<code>Promise</code>对象的状态从“未完成”变为“失败”（即从 pending 变为 rejected），在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。</p><p><code>Promise</code>实例生成以后，可以用<code>then</code>方法分别指定<code>resolved</code>状态和<code>rejected</code>状态的回调函数。<code>then</code>方法可以接受两个回调函数作为参数。第一个回调函数是<code>Promise</code>对象的状态变为<code>resolved</code>时调用，第二个回调函数是<code>Promise</code>对象的状态变为<code>rejected</code>时调用。这两个函数都是可选的，不一定要提供。它们都接受<code>Promise</code>对象传出的值作为参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> p=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">resolve,reject</span>)&#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-comment">// let data=&#x27;数据库中的用户数据&#x27;;</span><br>        <span class="hljs-comment">// // 只要调用就把p状态转为成功(resolved)</span><br>        <span class="hljs-comment">// resolve(data);</span><br><br>        <span class="hljs-keyword">let</span> err=<span class="hljs-string">&#x27;数据读取失败&#x27;</span>;<br>        <span class="hljs-title function_">reject</span>(err);<br>    &#125;, <span class="hljs-number">1000</span>);<br>&#125;);<br><span class="hljs-comment">// 当p状态为成功时(resolved)，调用第一个函数，否则调用第二个</span><br>p.<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value);<br>&#125;,<span class="hljs-keyword">function</span>(<span class="hljs-params">reason</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(reason);<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="1-13-2-Promise封装文件读取"><a href="#1-13-2-Promise封装文件读取" class="headerlink" title="1.13.2 Promise封装文件读取"></a>1.13.2 Promise封装文件读取</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js">  <span class="hljs-comment">// 1.引入fs模块</span><br>  <span class="hljs-keyword">const</span> &#123; error &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;console&#x27;</span>);<br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><br>  <span class="hljs-comment">// 2.使用方法读取文件</span><br><span class="hljs-comment">//   fs.readFile(&#x27;../resources/test.txt&#x27;, (err, data) =&gt; &#123;</span><br><span class="hljs-comment">//       if (err) throw err;</span><br><span class="hljs-comment">//       console.log(data.toString());</span><br><span class="hljs-comment">//   &#125;)</span><br><br><span class="hljs-comment">// 3.使用Promise封装</span><br><span class="hljs-keyword">const</span> p=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;../resources/test.txt&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">err,data</span>)=&gt;</span>&#123;<br>        <span class="hljs-keyword">if</span>(err) <span class="hljs-title function_">reject</span>(err);<br>        <span class="hljs-title function_">resolve</span>(data);<br>    &#125;)<br>&#125;)<br>p.<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value.<span class="hljs-title function_">toString</span>());<br>&#125;,<span class="hljs-keyword">function</span>(<span class="hljs-params">reason</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;读取失败&#x27;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="1-13-3-Promise封装ajax请求"><a href="#1-13-3-Promise封装ajax请求" class="headerlink" title="1.13.3 Promise封装ajax请求"></a>1.13.3 Promise封装ajax请求</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">       <span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="language-javascript">           <span class="hljs-comment">// 1.创建对象</span></span><br><span class="language-javascript">           <span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();</span><br><span class="language-javascript">           <span class="hljs-comment">// 2.初始化</span></span><br><span class="language-javascript">           xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;https://api.apiopen.top/getJoke&#x27;</span>);</span><br><span class="language-javascript">           <span class="hljs-comment">// 3.发送</span></span><br><span class="language-javascript">           xhr.<span class="hljs-title function_">send</span>();</span><br><span class="language-javascript">           <span class="hljs-comment">// 4.绑定事件，处理响应结果</span></span><br><span class="language-javascript">           xhr.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">               <span class="hljs-comment">// 判断状态码</span></span><br><span class="language-javascript">               <span class="hljs-keyword">if</span> (xhr.<span class="hljs-property">status</span> &gt;= <span class="hljs-number">200</span> &amp;&amp; xhr.<span class="hljs-property">status</span> &lt; <span class="hljs-number">300</span>) &#123;</span><br><span class="language-javascript">                   <span class="hljs-comment">// 表示成功</span></span><br><span class="language-javascript">                  <span class="hljs-title function_">resolve</span>(xhr.<span class="hljs-property">response</span>);</span><br><span class="language-javascript">               &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">                   <span class="hljs-comment">// 如果失败</span></span><br><span class="language-javascript">                   <span class="hljs-title function_">reject</span>(xhr.<span class="hljs-property">status</span>);</span><br><span class="language-javascript">               &#125;</span><br><span class="language-javascript">           &#125;</span><br><span class="language-javascript">       &#125;)</span><br><span class="language-javascript">       p.<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>)&#123;</span><br><span class="language-javascript">           <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value);</span><br><span class="language-javascript">       &#125;,<span class="hljs-keyword">function</span>(<span class="hljs-params">reason</span>)&#123;</span><br><span class="language-javascript">           <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(reason);</span><br><span class="language-javascript">       &#125;)</span><br><span class="language-javascript">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-13-4-Promise-prototype-then-方法"><a href="#1-13-4-Promise-prototype-then-方法" class="headerlink" title="1.13.4 Promise.prototype.then()方法"></a>1.13.4 Promise.prototype.then()方法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">       <span class="hljs-comment">// 创建promise对象</span></span><br><span class="language-javascript">       <span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="language-javascript">           <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">               <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;用户数据&#x27;</span>);</span><br><span class="language-javascript">               <span class="hljs-comment">// reject(&#x27;出错啦！&#x27;)</span></span><br><span class="language-javascript">           &#125;, <span class="hljs-number">1000</span>);</span><br><span class="language-javascript">       &#125;)</span><br><span class="language-javascript">       <span class="hljs-comment">// 调用then方法，返回一个promise对象，对象状态由对象的回调函数执行结果决定</span></span><br><span class="language-javascript">       <span class="hljs-keyword">let</span> result = p.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;</span><br><span class="language-javascript">           <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value);</span><br><span class="language-javascript">           <span class="hljs-comment">// return &#x27;成功&#x27;;</span></span><br><span class="language-javascript">           <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="language-javascript">               <span class="hljs-comment">// resolve(&#x27;ok&#x27;);</span></span><br><span class="language-javascript">               <span class="hljs-comment">// reject(&#x27;error!&#x27;)</span></span><br><span class="language-javascript">               <span class="hljs-keyword">throw</span> <span class="hljs-string">&#x27;出错啦！&#x27;</span></span><br><span class="language-javascript">           &#125;)</span><br><span class="language-javascript">       &#125;, <span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> &#123;</span><br><span class="language-javascript">           <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">warn</span>(reason);</span><br><span class="language-javascript">       &#125;)</span><br><span class="language-javascript">       <span class="hljs-comment">// 1.函数返回 非promise类型属性 对象状态成功，返回的值为对象的成功值</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">       <span class="hljs-comment">// 2.函数返回 promise对象,resolve时成功，reject时失败</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">       <span class="hljs-comment">// 3.抛出错误，失败</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);</span><br><span class="language-javascript">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-13-5-Promise实现多个文件内容读取"><a href="#1-13-5-Promise实现多个文件内容读取" class="headerlink" title="1.13.5 Promise实现多个文件内容读取"></a>1.13.5 Promise实现多个文件内容读取</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//要求读取三个文件内容，并将它们拼接在一起输出</span><br><span class="hljs-comment">// 1.引入fs模块</span><br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><br><span class="hljs-comment">// 2.回调实现</span><br><span class="hljs-comment">// fs.readFile(&#x27;../resources/file1.txt&#x27;, (err, data1) =&gt; &#123;</span><br><span class="hljs-comment">//     fs.readFile(&#x27;../resources/file2.txt&#x27;, (err, data2) =&gt; &#123;</span><br><span class="hljs-comment">//         fs.readFile(&#x27;../resources/file3.txt&#x27;, (err, data3) =&gt; &#123;</span><br><span class="hljs-comment">//             let result = data1 + &#x27;\n&#x27; + data2 + &#x27;\n&#x27; + data3</span><br><span class="hljs-comment">//             console.log(result);</span><br><span class="hljs-comment">//         &#125;)</span><br><span class="hljs-comment">//     &#125;)</span><br><span class="hljs-comment">// &#125;)</span><br><br><span class="hljs-comment">// 3.promise实现，链式调用</span><br><span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;../resources/file1.txt&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;<br>        <span class="hljs-title function_">resolve</span>(data);<br>    &#125;)<br>&#125;)<br>p.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;../resources/file2.txt&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;<br>            <span class="hljs-title function_">resolve</span>([value,data]);<br>        &#125;)<br>    &#125;)<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;../resources/file3.txt&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;<br>            value.<span class="hljs-title function_">push</span>(data);<br>            <span class="hljs-title function_">resolve</span>(value);<br>        &#125;)<br>    &#125;)<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">value</span>=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;\n&#x27;</span>));<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="1-13-6-Promise对象catch方法"><a href="#1-13-6-Promise对象catch方法" class="headerlink" title="1.13.6 Promise对象catch方法"></a>1.13.6 Promise对象catch方法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="language-javascript">          <span class="hljs-title function_">reject</span>(<span class="hljs-string">&#x27;出错啦！&#x27;</span>)</span><br><span class="language-javascript">      &#125;)</span><br><span class="language-javascript">      <span class="hljs-comment">// 语法糖，更方便程序员使用</span></span><br><span class="language-javascript">      p.<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> &#123;</span><br><span class="language-javascript">          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">warn</span>(reason);</span><br><span class="language-javascript">      &#125;)</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-14-1-集合介绍及API"><a href="#1-14-1-集合介绍及API" class="headerlink" title="1.14.1 集合介绍及API"></a>1.14.1 集合介绍及API</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 声明set</span></span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>();</span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> s2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<span class="hljs-string">&#x27;monica&#x27;</span>, <span class="hljs-string">&#x27;andrew&#x27;</span>, <span class="hljs-string">&#x27;rosa&#x27;</span>, <span class="hljs-string">&#x27;tom&#x27;</span>]);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 元素个数</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(s2.<span class="hljs-property">size</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 添加新元素</span></span><br><span class="language-javascript">        <span class="hljs-comment">// s2.add(&#x27;bob&#x27;);</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 删除元素</span></span><br><span class="language-javascript">        <span class="hljs-comment">// s2.delete(&#x27;tom&#x27;);</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 检测</span></span><br><span class="language-javascript">        <span class="hljs-comment">// console.log(s2.has(&#x27;jack&#x27;));</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 清空</span></span><br><span class="language-javascript">        <span class="hljs-comment">// s2.clear();</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 遍历</span></span><br><span class="language-javascript">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i <span class="hljs-keyword">of</span> s2)&#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(s2);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-14-2-集合实践练习（数组去重，交集，并集，差集）"><a href="#1-14-2-集合实践练习（数组去重，交集，并集，差集）" class="headerlink" title="1.14.2 集合实践练习（数组去重，交集，并集，差集）"></a>1.14.2 集合实践练习（数组去重，交集，并集，差集）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">       <span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">4</span>]</span><br><span class="language-javascript">       <span class="hljs-comment">// 数组去重</span></span><br><span class="language-javascript">       <span class="hljs-keyword">let</span> result = [...<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(arr)]</span><br><span class="language-javascript">       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result)</span><br><span class="language-javascript"></span><br><span class="language-javascript">       <span class="hljs-comment">// 交集</span></span><br><span class="language-javascript">       <span class="hljs-keyword">let</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]</span><br><span class="language-javascript">       <span class="hljs-keyword">let</span> s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(arr)</span><br><span class="language-javascript">       <span class="hljs-keyword">let</span> s1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(arr1)</span><br><span class="language-javascript">       <span class="hljs-comment">// let intersection=[...s].filter(item=&gt;&#123;</span></span><br><span class="language-javascript">       <span class="hljs-comment">//     if(s1.has(item))&#123;</span></span><br><span class="language-javascript">       <span class="hljs-comment">//         return true</span></span><br><span class="language-javascript">       <span class="hljs-comment">//     &#125;else&#123;</span></span><br><span class="language-javascript">       <span class="hljs-comment">//         return false</span></span><br><span class="language-javascript">       <span class="hljs-comment">//     &#125;</span></span><br><span class="language-javascript">       <span class="hljs-comment">// &#125;)</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">       <span class="hljs-comment">// 简化后</span></span><br><span class="language-javascript">       <span class="hljs-keyword">let</span> intersection = [...[...s].<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> s1.<span class="hljs-title function_">has</span>(item))]</span><br><span class="language-javascript">       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(intersection);</span><br><span class="language-javascript"></span><br><span class="language-javascript">       <span class="hljs-comment">// 并集</span></span><br><span class="language-javascript">       <span class="hljs-keyword">let</span> union = [...<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(arr.<span class="hljs-title function_">concat</span>(arr1))];</span><br><span class="language-javascript">       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(union);</span><br><span class="language-javascript"></span><br><span class="language-javascript">       <span class="hljs-comment">// 差集(与交集的判断逻辑相反,过滤出不在s1中的元素)</span></span><br><span class="language-javascript">       <span class="hljs-keyword">let</span> diff = [...[...s].<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> !s1.<span class="hljs-title function_">has</span>(item))]</span><br><span class="language-javascript">       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(diff);</span><br><span class="language-javascript"></span><br><span class="language-javascript">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-15-map简介及API"><a href="#1-15-map简介及API" class="headerlink" title="1.15 map简介及API"></a>1.15 map简介及API</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">       <span class="hljs-comment">// 声明map</span></span><br><span class="language-javascript">       <span class="hljs-keyword">let</span> m = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>();</span><br><span class="language-javascript"></span><br><span class="language-javascript">       <span class="hljs-comment">// 添加元素</span></span><br><span class="language-javascript">       m.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;monica&#x27;</span>);</span><br><span class="language-javascript">       m.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;change&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">           <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;改变&#x27;</span>);</span><br><span class="language-javascript">       &#125;);</span><br><span class="language-javascript">       <span class="hljs-keyword">let</span> key = &#123;</span><br><span class="language-javascript">           <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;monica&#x27;</span></span><br><span class="language-javascript">       &#125;</span><br><span class="language-javascript">       m.<span class="hljs-title function_">set</span>(key, [<span class="hljs-string">&#x27;tom&#x27;</span>, <span class="hljs-string">&#x27;jack&#x27;</span>, <span class="hljs-string">&#x27;andrew&#x27;</span>]);</span><br><span class="language-javascript"></span><br><span class="language-javascript">       <span class="hljs-comment">// 删除元素</span></span><br><span class="language-javascript">       <span class="hljs-comment">// m.delete(&#x27;name&#x27;);</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">       <span class="hljs-comment">// 获取</span></span><br><span class="language-javascript">       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(m.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;change&#x27;</span>));</span><br><span class="language-javascript">       <span class="hljs-comment">// 清空</span></span><br><span class="language-javascript">       <span class="hljs-comment">// m.clear();</span></span><br><span class="language-javascript">       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(m);</span><br><span class="language-javascript">       <span class="hljs-comment">// 遍历</span></span><br><span class="language-javascript">       <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i <span class="hljs-keyword">of</span> m)&#123;</span><br><span class="language-javascript">           <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i);</span><br><span class="language-javascript">       &#125;</span><br><span class="language-javascript">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-16-1-class介绍与初体验"><a href="#1-16-1-class介绍与初体验" class="headerlink" title="1.16.1 class介绍与初体验"></a>1.16.1 class介绍与初体验</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// ES5写法</span></span><br><span class="language-javascript">        <span class="hljs-comment">// 定义一个构造函数</span></span><br><span class="language-javascript">        <span class="hljs-comment">// function Phone(brand, price) &#123;</span></span><br><span class="language-javascript">        <span class="hljs-comment">//     this.brand = brand;</span></span><br><span class="language-javascript">        <span class="hljs-comment">//     this.price = price;</span></span><br><span class="language-javascript">        <span class="hljs-comment">// &#125;</span></span><br><span class="language-javascript">        <span class="hljs-comment">// // 向构造函数的prototype中添加方法</span></span><br><span class="language-javascript">        <span class="hljs-comment">// Phone.prototype.call = function () &#123;</span></span><br><span class="language-javascript">        <span class="hljs-comment">//     console.log(&#x27;打电话&#x27;);</span></span><br><span class="language-javascript">        <span class="hljs-comment">// &#125;</span></span><br><span class="language-javascript">        <span class="hljs-comment">// let p=new Phone(&#x27;huawei&#x27;,5999);</span></span><br><span class="language-javascript">        <span class="hljs-comment">// p.call();</span></span><br><span class="language-javascript">        <span class="hljs-comment">// console.log(p);</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">//class写法,相当于语法糖,大部分能用ES5实现,但更好体现面向对象</span></span><br><span class="language-javascript">        <span class="hljs-keyword">class</span> <span class="hljs-title class_">Phone</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">constructor</span>(<span class="hljs-params">brand, price</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">brand</span> = brand;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">price</span> = price;</span><br><span class="language-javascript">            &#125;;</span><br><span class="language-javascript">            <span class="hljs-title function_">call</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;打电话&#x27;</span>);</span><br><span class="language-javascript">            &#125;            </span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> p2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Phone</span>(<span class="hljs-string">&#x27;sanxing&#x27;</span>,<span class="hljs-number">2999</span>);</span><br><span class="language-javascript">        p2.<span class="hljs-title function_">call</span>();</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>((p2));</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-16-2-class静态成员"><a href="#1-16-2-class静态成员" class="headerlink" title="1.16.2 class静态成员"></a>1.16.2 class静态成员</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">       <span class="hljs-comment">// 函数对象的属性与方法只在函数对象上,而不在实例对象上</span></span><br><span class="language-javascript">       <span class="hljs-comment">// 类似于类的静态成员,只能通过类访问,而实例无法访问</span></span><br><span class="language-javascript">       <span class="hljs-keyword">class</span> <span class="hljs-title class_">Phone</span> &#123;</span><br><span class="language-javascript">           <span class="hljs-keyword">static</span> name = <span class="hljs-string">&#x27;monica&#x27;</span>;</span><br><span class="language-javascript">           <span class="hljs-keyword">static</span> <span class="hljs-title function_">call</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">               <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;打电话&#x27;</span>);</span><br><span class="language-javascript">           &#125;;</span><br><span class="language-javascript">           <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">           &#125;;</span><br><span class="language-javascript">       &#125;</span><br><span class="language-javascript">       <span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phone</span>();</span><br><span class="language-javascript">       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p.<span class="hljs-property">name</span>);</span><br><span class="language-javascript">       <span class="hljs-comment">// p.call();</span></span><br><span class="language-javascript">       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Phone</span>.<span class="hljs-property">name</span>);</span><br><span class="language-javascript">       <span class="hljs-title class_">Phone</span>.<span class="hljs-title function_">call</span>();</span><br><span class="language-javascript">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-16-2-ES5构造函数继承"><a href="#1-16-2-ES5构造函数继承" class="headerlink" title="1.16.2 ES5构造函数继承"></a>1.16.2 ES5构造函数继承</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 构造函数继承</span></span><br><span class="language-javascript">        <span class="hljs-comment">//手机</span></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">Phone</span>(<span class="hljs-params">brand, price</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">brand</span> = brand;</span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">price</span> = price;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-title class_">Phone</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">call</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我可以打电话！&#x27;</span>);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 智能手机</span></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">SmartPhone</span>(<span class="hljs-params">brand, price, color, size</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 改变this指向并传参，立即执行Phone(brand,price)</span></span><br><span class="language-javascript">            <span class="hljs-comment">// apply(this,[a,b]) 以数组形式传参</span></span><br><span class="language-javascript">            <span class="hljs-title class_">Phone</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, brand, price);</span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">color</span> = color;</span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">size</span> = size;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-comment">// *********设置子级构造函数的原型***********</span></span><br><span class="language-javascript">        <span class="hljs-title class_">SmartPhone</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phone</span>;</span><br><span class="language-javascript">        <span class="hljs-title class_">SmartPhone</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">constructor</span> = <span class="hljs-title class_">SmartPhone</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-title class_">SmartPhone</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">photo</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;拍照&#x27;</span>);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-title class_">SmartPhone</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">playGame</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;玩游戏&#x27;</span>);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> sp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SmartPhone</span>(<span class="hljs-string">&#x27;huawei&#x27;</span>, <span class="hljs-number">5999</span>, <span class="hljs-string">&#x27;black&#x27;</span>, <span class="hljs-string">&#x27;4.7inch&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(sp);</span><br><span class="language-javascript">        sp.<span class="hljs-title function_">call</span>();</span><br><span class="language-javascript">        sp.<span class="hljs-title function_">photo</span>();</span><br><span class="language-javascript">        sp.<span class="hljs-title function_">playGame</span>();</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-16-3-class的类继承"><a href="#1-16-3-class的类继承" class="headerlink" title="1.16.3 class的类继承"></a>1.16.3 class的类继承</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">       <span class="hljs-comment">// 父类</span></span><br><span class="language-javascript">       <span class="hljs-keyword">class</span> <span class="hljs-title class_">Phone</span> &#123;</span><br><span class="language-javascript">           <span class="hljs-title function_">constructor</span>(<span class="hljs-params">brand, price</span>) &#123;</span><br><span class="language-javascript">               <span class="hljs-variable language_">this</span>.<span class="hljs-property">brand</span> = brand;</span><br><span class="language-javascript">               <span class="hljs-variable language_">this</span>.<span class="hljs-property">price</span> = price;</span><br><span class="language-javascript">           &#125;;</span><br><span class="language-javascript">           <span class="hljs-title function_">call</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">               <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;打电话&#x27;</span>);</span><br><span class="language-javascript">           &#125;;</span><br><span class="language-javascript">       &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">       <span class="hljs-comment">// 子类</span></span><br><span class="language-javascript">       <span class="hljs-keyword">class</span> <span class="hljs-title class_">SmartPhone</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Phone</span> &#123;</span><br><span class="language-javascript">           <span class="hljs-title function_">constructor</span>(<span class="hljs-params">brand, price, color, size</span>) &#123;</span><br><span class="language-javascript">               <span class="hljs-variable language_">super</span>(brand, price);</span><br><span class="language-javascript">               <span class="hljs-variable language_">this</span>.<span class="hljs-property">color</span> = color;</span><br><span class="language-javascript">               <span class="hljs-variable language_">this</span>.<span class="hljs-property">size</span> = size;</span><br><span class="language-javascript">           &#125;;</span><br><span class="language-javascript">           <span class="hljs-title function_">photo</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">               <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;拍照&#x27;</span>);</span><br><span class="language-javascript">           &#125;;</span><br><span class="language-javascript">           <span class="hljs-title function_">playGame</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">               <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;玩游戏&#x27;</span>);</span><br><span class="language-javascript">           &#125;</span><br><span class="language-javascript">       &#125;</span><br><span class="language-javascript">       <span class="hljs-keyword">let</span> sp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SmartPhone</span>(<span class="hljs-string">&#x27;xiaomi&#x27;</span>, <span class="hljs-number">4999</span>, <span class="hljs-string">&#x27;white&#x27;</span>, <span class="hljs-string">&#x27;4.9inch&#x27;</span>);</span><br><span class="language-javascript">       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(sp);</span><br><span class="language-javascript">       sp.<span class="hljs-title function_">call</span>();</span><br><span class="language-javascript">       sp.<span class="hljs-title function_">photo</span>();</span><br><span class="language-javascript">       sp.<span class="hljs-title function_">playGame</span>();</span><br><span class="language-javascript">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-16-4-子类对父类方法的重写"><a href="#1-16-4-子类对父类方法的重写" class="headerlink" title="1.16.4 子类对父类方法的重写"></a>1.16.4 子类对父类方法的重写</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">       <span class="hljs-comment">// 父类</span></span><br><span class="language-javascript">       <span class="hljs-keyword">class</span> <span class="hljs-title class_">Phone</span> &#123;</span><br><span class="language-javascript">           <span class="hljs-title function_">constructor</span>(<span class="hljs-params">brand, price</span>) &#123;</span><br><span class="language-javascript">               <span class="hljs-variable language_">this</span>.<span class="hljs-property">brand</span> = brand;</span><br><span class="language-javascript">               <span class="hljs-variable language_">this</span>.<span class="hljs-property">price</span> = price;</span><br><span class="language-javascript">           &#125;;</span><br><span class="language-javascript">           <span class="hljs-title function_">call</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">               <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;打电话&#x27;</span>);</span><br><span class="language-javascript">           &#125;;</span><br><span class="language-javascript">       &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">       <span class="hljs-comment">// 子类</span></span><br><span class="language-javascript">       <span class="hljs-keyword">class</span> <span class="hljs-title class_">SmartPhone</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Phone</span> &#123;</span><br><span class="language-javascript">           <span class="hljs-title function_">constructor</span>(<span class="hljs-params">brand, price, color, size</span>) &#123;</span><br><span class="language-javascript">               <span class="hljs-variable language_">super</span>(brand, price);</span><br><span class="language-javascript">               <span class="hljs-variable language_">this</span>.<span class="hljs-property">color</span> = color;</span><br><span class="language-javascript">               <span class="hljs-variable language_">this</span>.<span class="hljs-property">size</span> = size;</span><br><span class="language-javascript">           &#125;;</span><br><span class="language-javascript">           <span class="hljs-comment">// 重写父类方法</span></span><br><span class="language-javascript">           <span class="hljs-comment">// 但不能在成员属性中调用super()</span></span><br><span class="language-javascript">           <span class="hljs-comment">// 只能进行重写</span></span><br><span class="language-javascript">           <span class="hljs-title function_">call</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">               <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我可以进行视频通话&#x27;</span>);</span><br><span class="language-javascript">           &#125;;</span><br><span class="language-javascript">           <span class="hljs-title function_">photo</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">               <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;拍照&#x27;</span>);</span><br><span class="language-javascript">           &#125;;</span><br><span class="language-javascript">           <span class="hljs-title function_">playGame</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">               <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;玩游戏&#x27;</span>);</span><br><span class="language-javascript">           &#125;</span><br><span class="language-javascript">       &#125;</span><br><span class="language-javascript">       <span class="hljs-keyword">let</span> sp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SmartPhone</span>(<span class="hljs-string">&#x27;xiaomi&#x27;</span>, <span class="hljs-number">4999</span>, <span class="hljs-string">&#x27;white&#x27;</span>, <span class="hljs-string">&#x27;4.9inch&#x27;</span>);</span><br><span class="language-javascript">       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(sp);</span><br><span class="language-javascript">       sp.<span class="hljs-title function_">call</span>();</span><br><span class="language-javascript">       sp.<span class="hljs-title function_">photo</span>();</span><br><span class="language-javascript">       sp.<span class="hljs-title function_">playGame</span>();</span><br><span class="language-javascript">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-16-5-class中getter和setter设置"><a href="#1-16-5-class中getter和setter设置" class="headerlink" title="1.16.5 class中getter和setter设置"></a>1.16.5 class中getter和setter设置</h3><p>（一般与动态属性相关）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">       <span class="hljs-keyword">class</span> <span class="hljs-title class_">Phone</span> &#123;</span><br><span class="language-javascript">           <span class="hljs-keyword">get</span> <span class="hljs-title function_">price</span>() &#123;</span><br><span class="language-javascript">               <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;price被读取了&#x27;</span>);</span><br><span class="language-javascript">               <span class="hljs-comment">// 必须要返回一个值，后续调用price属性(与get后同名)即可触发</span></span><br><span class="language-javascript">               <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;123&#x27;</span>;</span><br><span class="language-javascript">           &#125;;</span><br><span class="language-javascript">           <span class="hljs-keyword">set</span> <span class="hljs-title function_">price</span>(<span class="hljs-params">newValue</span>) &#123;</span><br><span class="language-javascript">               <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;price被修改了&#x27;</span>);</span><br><span class="language-javascript">               <span class="hljs-comment">// 可判断给属性赋值的逻辑，如newValue是否合法</span></span><br><span class="language-javascript">               <span class="hljs-comment">// 必须要传入至少一个参数</span></span><br><span class="language-javascript">           &#125;</span><br><span class="language-javascript">       &#125;;</span><br><span class="language-javascript">       <span class="hljs-keyword">let</span> s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phone</span>();</span><br><span class="language-javascript">       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(s.<span class="hljs-property">price</span>);</span><br><span class="language-javascript">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="1-17-ES6的数值扩展"><a href="#1-17-ES6的数值扩展" class="headerlink" title="1.17 ES6的数值扩展"></a>1.17 ES6的数值扩展</h2><ul><li><p>Number.EPSILON ：ES6 在 Number 对象上，新增一个极小的常量，表示 1 与 大于 1 的最小浮点数之差。</p></li><li><p>Math.trunc () ：去除一个数的小数部分，返回整数部分。</p></li><li><p>Math.sign () ：用来判断一个数是正数（1）、负数（-1）还是零（0）。</p></li><li><p>Number.isFinite ：检测是否为有限数。</p></li><li><p>Number.isNaN ：检测一个数值是不是NaN。</p></li><li><p>Number.parseInt</p></li><li><pre><code class="js">Number.parseInt(&#39;12348哈哈哈哈哈&#39;)//12348<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><br>- <span class="hljs-built_in">Number</span>.<span class="hljs-built_in">parseFloat</span><br><br>- ```<span class="language-javascript">js</span><br><span class="language-javascript">  <span class="hljs-title class_">Number</span>.<span class="hljs-built_in">parseFloat</span>(<span class="hljs-string">&#x27;3.1415926嘻嘻嘻嘻嘻嘻&#x27;</span>)<span class="hljs-comment">//3.1415926</span></span><br></code></pre></td></tr></table></figure></code></pre></li><li><p>Number.isInteger： 判断一个数是否为整数。</p></li></ul><h3 id="1-18-ES6的对象方法扩展"><a href="#1-18-ES6的对象方法扩展" class="headerlink" title="1.18 ES6的对象方法扩展"></a>1.18 ES6的对象方法扩展</h3><h4 id="Object-is"><a href="#Object-is" class="headerlink" title="Object.is()"></a>Object.is()</h4><p>ES5 比较两个值是否相等，只有两个运算符：相等运算符（<code>==</code>）和严格相等运算符（<code>===</code>）。它们都有缺点，前者会自动转换数据类型，后者的<code>NaN</code>不等于自身，以及<code>+0</code>等于<code>-0</code>。JavaScript 缺乏一种运算，在所有环境中，只要两个值是一样的，它们就应该相等。</p><p>ES6 提出“Same-value equality”（同值相等）算法，用来解决这个问题。<code>Object.is</code>就是部署这个算法的新方法。它用来比较两个值是否严格相等，与严格比较运算符（&#x3D;&#x3D;&#x3D;）的行为基本一致。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">+<span class="hljs-number">0</span> === -<span class="hljs-number">0</span> <span class="hljs-comment">//true</span><br><span class="hljs-title class_">NaN</span> === <span class="hljs-title class_">NaN</span> <span class="hljs-comment">// false</span><br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">is</span>(+<span class="hljs-number">0</span>, -<span class="hljs-number">0</span>) <span class="hljs-comment">// false</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">is</span>(<span class="hljs-title class_">NaN</span>, <span class="hljs-title class_">NaN</span>) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h4 id="Object-assign-浅拷贝"><a href="#Object-assign-浅拷贝" class="headerlink" title="Object.assign()(浅拷贝)"></a>Object.assign()(浅拷贝)</h4><p><code>Object.assign()</code>方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> target = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;;<br><br><span class="hljs-keyword">const</span> source1 = &#123; <span class="hljs-attr">b</span>: <span class="hljs-number">2</span> &#125;;<br><span class="hljs-keyword">const</span> source2 = &#123; <span class="hljs-attr">c</span>: <span class="hljs-number">3</span> &#125;;<br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(target, source1, source2);<br>target <span class="hljs-comment">// &#123;a:1, b:2, c:3&#125;</span><br></code></pre></td></tr></table></figure><p><code>Object.assign()</code>方法的第一个参数是目标对象，后面的参数都是源对象。</p><p>注意，如果目标对象与源对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> target = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">1</span> &#125;;<br><br><span class="hljs-keyword">const</span> source1 = &#123; <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">2</span> &#125;;<br><span class="hljs-keyword">const</span> source2 = &#123; <span class="hljs-attr">c</span>: <span class="hljs-number">3</span> &#125;;<br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(target, source1, source2);<br>target <span class="hljs-comment">// &#123;a:1, b:2, c:3&#125;</span><br></code></pre></td></tr></table></figure><h4 id="Object-getPrototypeOf"><a href="#Object-getPrototypeOf" class="headerlink" title="Object.getPrototypeOf()"></a>Object.getPrototypeOf()</h4><p>该方法与<code>Object.setPrototypeOf</code>方法配套，用于读取一个对象的原型对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getPrototypeOf</span>(obj);<br></code></pre></td></tr></table></figure><p>下面是一个例子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Rectangle</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br><br><span class="hljs-keyword">const</span> rec = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Rectangle</span>();<br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getPrototypeOf</span>(rec) === <span class="hljs-title class_">Rectangle</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span><br><span class="hljs-comment">// true</span><br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">setPrototypeOf</span>(rec, <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>);<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getPrototypeOf</span>(rec) === <span class="hljs-title class_">Rectangle</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span><br><span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><h4 id="Object-setPrototypeOf"><a href="#Object-setPrototypeOf" class="headerlink" title="Object.setPrototypeOf()"></a>Object.setPrototypeOf()</h4><p><code>Object.setPrototypeOf</code>方法的作用与<code>__proto__</code>相同，用来设置一个对象的原型对象（prototype），返回参数对象本身。它是 ES6 正式推荐的设置原型对象的方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 格式</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">setPrototypeOf</span>(object, prototype)<br><br><span class="hljs-comment">// 用法</span><br><span class="hljs-keyword">const</span> o = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">setPrototypeOf</span>(&#123;&#125;, <span class="hljs-literal">null</span>);<br></code></pre></td></tr></table></figure><p>该方法等同于下面的函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">setPrototypeOf</span>(<span class="hljs-params">obj, proto</span>) &#123;<br>  obj.<span class="hljs-property">__proto__</span> = proto;<br>  <span class="hljs-keyword">return</span> obj;<br>&#125;<br></code></pre></td></tr></table></figure><p>下面是一个例子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> proto = &#123;&#125;;<br><span class="hljs-keyword">let</span> obj = &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">10</span> &#125;;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">setPrototypeOf</span>(obj, proto);<br><br>proto.<span class="hljs-property">y</span> = <span class="hljs-number">20</span>;<br>proto.<span class="hljs-property">z</span> = <span class="hljs-number">40</span>;<br><br>obj.<span class="hljs-property">x</span> <span class="hljs-comment">// 10</span><br>obj.<span class="hljs-property">y</span> <span class="hljs-comment">// 20</span><br>obj.<span class="hljs-property">z</span> <span class="hljs-comment">// 40</span><br></code></pre></td></tr></table></figure><p>上面代码将<code>proto</code>对象设为<code>obj</code>对象的原型，所以从<code>obj</code>对象可以读取<code>proto</code>对象的属性。</p><h3 id="1-19-1-模块化介绍"><a href="#1-19-1-模块化介绍" class="headerlink" title="1.19.1 模块化介绍"></a>1.19.1 模块化介绍</h3><p>防止命名冲突；代码复用；高维护性</p><h3 id="1-19-2-模块化语法"><a href="#1-19-2-模块化语法" class="headerlink" title="1.19.2 模块化语法"></a>1.19.2 模块化语法</h3><p>export 命令用于规定模块的对外接口</p><p>import 命令用于输入其他模块提供的功能</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">       <span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> m1 <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./js/m1.js&#x27;</span>;</span><br><span class="language-javascript">       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(m1);</span><br><span class="language-javascript">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 在需要向外暴露的数据或函数等前加上 export 命令</span><br><span class="hljs-comment">// 分别暴露</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">let</span> student=<span class="hljs-string">&#x27;monica&#x27;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">study</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我爱学习&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-19-3-模块暴露语法汇总"><a href="#1-19-3-模块暴露语法汇总" class="headerlink" title="1.19.3 模块暴露语法汇总"></a>1.19.3 模块暴露语法汇总</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">       <span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> m1 <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./js/m1.js&#x27;</span>;</span><br><span class="language-javascript">       <span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> m2 <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./js/m2.js&#x27;</span></span><br><span class="language-javascript">       <span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> m3 <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./js/m3.js&#x27;</span></span><br><span class="language-javascript">       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(m1);</span><br><span class="language-javascript">       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(m2);</span><br><span class="language-javascript">       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(m3);</span><br><span class="language-javascript">       <span class="hljs-comment">// m3的属性和方法在default对象下</span></span><br><span class="language-javascript">       m3.<span class="hljs-property">default</span>.<span class="hljs-title function_">improve</span>();</span><br><span class="language-javascript">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="分别暴露"><a href="#分别暴露" class="headerlink" title="分别暴露"></a>分别暴露</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 在需要向外暴露的数据或函数等前加上 export 命令</span><br><span class="hljs-comment">// 分别暴露</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">let</span> student=<span class="hljs-string">&#x27;monica&#x27;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">study</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我爱学习&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="统一暴露"><a href="#统一暴露" class="headerlink" title="统一暴露"></a>统一暴露</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 统一暴露</span><br><span class="hljs-keyword">let</span> school=<span class="hljs-string">&#x27;UESTC&#x27;</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">change</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;改变你&#x27;</span>);<br>&#125;;<br><span class="hljs-keyword">export</span>&#123;school,change&#125;;<br></code></pre></td></tr></table></figure><h4 id="默认暴露"><a href="#默认暴露" class="headerlink" title="默认暴露"></a>默认暴露</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 默认暴露</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>&#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;tom&#x27;</span>,<br>    <span class="hljs-title function_">improve</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我想提升自己&#x27;</span>);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="1-19-4-模块引入语法汇总"><a href="#1-19-4-模块引入语法汇总" class="headerlink" title="1.19.4 模块引入语法汇总"></a>1.19.4 模块引入语法汇总</h3><h4 id="通用的引入方式"><a href="#通用的引入方式" class="headerlink" title="通用的引入方式"></a>通用的引入方式</h4><h4 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h4><h4 id="简便形式（只针对默认暴露）"><a href="#简便形式（只针对默认暴露）" class="headerlink" title="简便形式（只针对默认暴露）"></a>简便形式（只针对默认暴露）</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">       <span class="hljs-comment">// 1.通用的导入方式</span></span><br><span class="language-javascript">       <span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> m1 <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./js/m1.js&#x27;</span>;</span><br><span class="language-javascript">       <span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> m2 <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./js/m2.js&#x27;</span></span><br><span class="language-javascript">       <span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> m3 <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./js/m3.js&#x27;</span></span><br><span class="language-javascript">       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(m1);</span><br><span class="language-javascript">       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(m2);</span><br><span class="language-javascript">       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(m3);</span><br><span class="language-javascript">       <span class="hljs-comment">// m3的属性和方法在default对象下</span></span><br><span class="language-javascript">       m3.<span class="hljs-property">default</span>.<span class="hljs-title function_">improve</span>();</span><br><span class="language-javascript"></span><br><span class="language-javascript">       <span class="hljs-comment">// 2.解构赋值</span></span><br><span class="language-javascript">       <span class="hljs-keyword">import</span> &#123; student, study &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./js/m1.js&#x27;</span>;</span><br><span class="language-javascript">       <span class="hljs-comment">// 有重名的话直接as 别名解决就好</span></span><br><span class="language-javascript">       <span class="hljs-keyword">import</span> &#123; student <span class="hljs-keyword">as</span> <span class="hljs-variable constant_">UESTC</span>, change &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./js/m2.js&#x27;</span>;</span><br><span class="language-javascript">       <span class="hljs-keyword">import</span> &#123; <span class="hljs-keyword">default</span> <span class="hljs-keyword">as</span> m3 &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./js/m3.js&#x27;</span>;</span><br><span class="language-javascript">       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(student, study);</span><br><span class="language-javascript">       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable constant_">UESTC</span>, study);</span><br><span class="language-javascript">       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(m3);</span><br><span class="language-javascript"></span><br><span class="language-javascript">       <span class="hljs-comment">// 3.简便形式（仅针对默认暴露）</span></span><br><span class="language-javascript">       <span class="hljs-keyword">import</span> m3 <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./js/m3.js&#x27;</span>;</span><br><span class="language-javascript">       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(m3);</span><br><span class="language-javascript">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-19-5-第2种模块化方式"><a href="#1-19-5-第2种模块化方式" class="headerlink" title="1.19.5 第2种模块化方式"></a>1.19.5 第2种模块化方式</h3><p>app.js(入口文件)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 入口文件</span><br><br><span class="hljs-comment">// 引入模块</span><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> m1 <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./m1.js&#x27;</span>;<br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> m2 <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./m2.js&#x27;</span><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> m3 <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./m3.js&#x27;</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(m1);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(m2);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(m3);<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;module&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./js/app.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ES6新特性</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>创建你的第一个博客</title>
    <link href="/2024/09/23/hello-world/"/>
    <url>/2024/09/23/hello-world/</url>
    
    <content type="html"><![CDATA[<h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="创建新文章"><a href="#创建新文章" class="headerlink" title="创建新文章"></a>创建新文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>更多信息：<a href="https://hexo.io/docs/writing.html">写作</a></p><h3 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>更多信息：<a href="https://hexo.io/docs/server.html">服务器</a></p><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>更多信息：<a href="https://hexo.io/docs/generating.html">生成</a></p><h3 id="部署到远程站点"><a href="#部署到远程站点" class="headerlink" title="部署到远程站点"></a>部署到远程站点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>更多信息：<a href="https://hexo.io/docs/one-command-deployment.html">部署</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
